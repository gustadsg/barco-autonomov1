
Barco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005230  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a4  080054a4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080054ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000005c  08005508  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005508  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fff5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdd  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be8  00000000  00000000  00032fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002946  00000000  00000000  00033b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013411  00000000  00000000  000364d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4d4b  00000000  00000000  000498e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004714  00000000  00000000  0011e634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00122d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080053e8 	.word	0x080053e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080053e8 	.word	0x080053e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b970 	b.w	8000c24 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9e08      	ldr	r6, [sp, #32]
 8000962:	460d      	mov	r5, r1
 8000964:	4604      	mov	r4, r0
 8000966:	460f      	mov	r7, r1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d14a      	bne.n	8000a02 <__udivmoddi4+0xa6>
 800096c:	428a      	cmp	r2, r1
 800096e:	4694      	mov	ip, r2
 8000970:	d965      	bls.n	8000a3e <__udivmoddi4+0xe2>
 8000972:	fab2 f382 	clz	r3, r2
 8000976:	b143      	cbz	r3, 800098a <__udivmoddi4+0x2e>
 8000978:	fa02 fc03 	lsl.w	ip, r2, r3
 800097c:	f1c3 0220 	rsb	r2, r3, #32
 8000980:	409f      	lsls	r7, r3
 8000982:	fa20 f202 	lsr.w	r2, r0, r2
 8000986:	4317      	orrs	r7, r2
 8000988:	409c      	lsls	r4, r3
 800098a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800098e:	fa1f f58c 	uxth.w	r5, ip
 8000992:	fbb7 f1fe 	udiv	r1, r7, lr
 8000996:	0c22      	lsrs	r2, r4, #16
 8000998:	fb0e 7711 	mls	r7, lr, r1, r7
 800099c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009a0:	fb01 f005 	mul.w	r0, r1, r5
 80009a4:	4290      	cmp	r0, r2
 80009a6:	d90a      	bls.n	80009be <__udivmoddi4+0x62>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f101 37ff 	add.w	r7, r1, #4294967295
 80009b0:	f080 811c 	bcs.w	8000bec <__udivmoddi4+0x290>
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f240 8119 	bls.w	8000bec <__udivmoddi4+0x290>
 80009ba:	3902      	subs	r1, #2
 80009bc:	4462      	add	r2, ip
 80009be:	1a12      	subs	r2, r2, r0
 80009c0:	b2a4      	uxth	r4, r4
 80009c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ce:	fb00 f505 	mul.w	r5, r0, r5
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	d90a      	bls.n	80009ec <__udivmoddi4+0x90>
 80009d6:	eb1c 0404 	adds.w	r4, ip, r4
 80009da:	f100 32ff 	add.w	r2, r0, #4294967295
 80009de:	f080 8107 	bcs.w	8000bf0 <__udivmoddi4+0x294>
 80009e2:	42a5      	cmp	r5, r4
 80009e4:	f240 8104 	bls.w	8000bf0 <__udivmoddi4+0x294>
 80009e8:	4464      	add	r4, ip
 80009ea:	3802      	subs	r0, #2
 80009ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009f0:	1b64      	subs	r4, r4, r5
 80009f2:	2100      	movs	r1, #0
 80009f4:	b11e      	cbz	r6, 80009fe <__udivmoddi4+0xa2>
 80009f6:	40dc      	lsrs	r4, r3
 80009f8:	2300      	movs	r3, #0
 80009fa:	e9c6 4300 	strd	r4, r3, [r6]
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0xbc>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	f000 80ed 	beq.w	8000be6 <__udivmoddi4+0x28a>
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a12:	4608      	mov	r0, r1
 8000a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a18:	fab3 f183 	clz	r1, r3
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d149      	bne.n	8000ab4 <__udivmoddi4+0x158>
 8000a20:	42ab      	cmp	r3, r5
 8000a22:	d302      	bcc.n	8000a2a <__udivmoddi4+0xce>
 8000a24:	4282      	cmp	r2, r0
 8000a26:	f200 80f8 	bhi.w	8000c1a <__udivmoddi4+0x2be>
 8000a2a:	1a84      	subs	r4, r0, r2
 8000a2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a30:	2001      	movs	r0, #1
 8000a32:	4617      	mov	r7, r2
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d0e2      	beq.n	80009fe <__udivmoddi4+0xa2>
 8000a38:	e9c6 4700 	strd	r4, r7, [r6]
 8000a3c:	e7df      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a3e:	b902      	cbnz	r2, 8000a42 <__udivmoddi4+0xe6>
 8000a40:	deff      	udf	#255	; 0xff
 8000a42:	fab2 f382 	clz	r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8090 	bne.w	8000b6c <__udivmoddi4+0x210>
 8000a4c:	1a8a      	subs	r2, r1, r2
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f fe8c 	uxth.w	lr, ip
 8000a56:	2101      	movs	r1, #1
 8000a58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a60:	0c22      	lsrs	r2, r4, #16
 8000a62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a66:	fb0e f005 	mul.w	r0, lr, r5
 8000a6a:	4290      	cmp	r0, r2
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x124>
 8000a6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a76:	d202      	bcs.n	8000a7e <__udivmoddi4+0x122>
 8000a78:	4290      	cmp	r0, r2
 8000a7a:	f200 80cb 	bhi.w	8000c14 <__udivmoddi4+0x2b8>
 8000a7e:	4645      	mov	r5, r8
 8000a80:	1a12      	subs	r2, r2, r0
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a88:	fb07 2210 	mls	r2, r7, r0, r2
 8000a8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a90:	fb0e fe00 	mul.w	lr, lr, r0
 8000a94:	45a6      	cmp	lr, r4
 8000a96:	d908      	bls.n	8000aaa <__udivmoddi4+0x14e>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa0:	d202      	bcs.n	8000aa8 <__udivmoddi4+0x14c>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f200 80bb 	bhi.w	8000c1e <__udivmoddi4+0x2c2>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	eba4 040e 	sub.w	r4, r4, lr
 8000aae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ab2:	e79f      	b.n	80009f4 <__udivmoddi4+0x98>
 8000ab4:	f1c1 0720 	rsb	r7, r1, #32
 8000ab8:	408b      	lsls	r3, r1
 8000aba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000abe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ac2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ac6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aca:	40fd      	lsrs	r5, r7
 8000acc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ad0:	4323      	orrs	r3, r4
 8000ad2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ad6:	fa1f fe8c 	uxth.w	lr, ip
 8000ada:	fb09 5518 	mls	r5, r9, r8, r5
 8000ade:	0c1c      	lsrs	r4, r3, #16
 8000ae0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ae4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ae8:	42a5      	cmp	r5, r4
 8000aea:	fa02 f201 	lsl.w	r2, r2, r1
 8000aee:	fa00 f001 	lsl.w	r0, r0, r1
 8000af2:	d90b      	bls.n	8000b0c <__udivmoddi4+0x1b0>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000afc:	f080 8088 	bcs.w	8000c10 <__udivmoddi4+0x2b4>
 8000b00:	42a5      	cmp	r5, r4
 8000b02:	f240 8085 	bls.w	8000c10 <__udivmoddi4+0x2b4>
 8000b06:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0a:	4464      	add	r4, ip
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	b29d      	uxth	r5, r3
 8000b10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b14:	fb09 4413 	mls	r4, r9, r3, r4
 8000b18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x1da>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b2c:	d26c      	bcs.n	8000c08 <__udivmoddi4+0x2ac>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	d96a      	bls.n	8000c08 <__udivmoddi4+0x2ac>
 8000b32:	3b02      	subs	r3, #2
 8000b34:	4464      	add	r4, ip
 8000b36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b3e:	eba4 040e 	sub.w	r4, r4, lr
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	46c8      	mov	r8, r9
 8000b46:	46ae      	mov	lr, r5
 8000b48:	d356      	bcc.n	8000bf8 <__udivmoddi4+0x29c>
 8000b4a:	d053      	beq.n	8000bf4 <__udivmoddi4+0x298>
 8000b4c:	b156      	cbz	r6, 8000b64 <__udivmoddi4+0x208>
 8000b4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b52:	eb64 040e 	sbc.w	r4, r4, lr
 8000b56:	fa04 f707 	lsl.w	r7, r4, r7
 8000b5a:	40ca      	lsrs	r2, r1
 8000b5c:	40cc      	lsrs	r4, r1
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	e9c6 7400 	strd	r7, r4, [r6]
 8000b64:	4618      	mov	r0, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	f1c3 0120 	rsb	r1, r3, #32
 8000b70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b74:	fa20 f201 	lsr.w	r2, r0, r1
 8000b78:	fa25 f101 	lsr.w	r1, r5, r1
 8000b7c:	409d      	lsls	r5, r3
 8000b7e:	432a      	orrs	r2, r5
 8000b80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b90:	0c11      	lsrs	r1, r2, #16
 8000b92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b96:	fb00 f50e 	mul.w	r5, r0, lr
 8000b9a:	428d      	cmp	r5, r1
 8000b9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x258>
 8000ba2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000baa:	d22f      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bac:	428d      	cmp	r5, r1
 8000bae:	d92d      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1b49      	subs	r1, r1, r5
 8000bb6:	b292      	uxth	r2, r2
 8000bb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000bc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bc8:	4291      	cmp	r1, r2
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x282>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd4:	d216      	bcs.n	8000c04 <__udivmoddi4+0x2a8>
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d914      	bls.n	8000c04 <__udivmoddi4+0x2a8>
 8000bda:	3d02      	subs	r5, #2
 8000bdc:	4462      	add	r2, ip
 8000bde:	1a52      	subs	r2, r2, r1
 8000be0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000be4:	e738      	b.n	8000a58 <__udivmoddi4+0xfc>
 8000be6:	4631      	mov	r1, r6
 8000be8:	4630      	mov	r0, r6
 8000bea:	e708      	b.n	80009fe <__udivmoddi4+0xa2>
 8000bec:	4639      	mov	r1, r7
 8000bee:	e6e6      	b.n	80009be <__udivmoddi4+0x62>
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	e6fb      	b.n	80009ec <__udivmoddi4+0x90>
 8000bf4:	4548      	cmp	r0, r9
 8000bf6:	d2a9      	bcs.n	8000b4c <__udivmoddi4+0x1f0>
 8000bf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c00:	3b01      	subs	r3, #1
 8000c02:	e7a3      	b.n	8000b4c <__udivmoddi4+0x1f0>
 8000c04:	4645      	mov	r5, r8
 8000c06:	e7ea      	b.n	8000bde <__udivmoddi4+0x282>
 8000c08:	462b      	mov	r3, r5
 8000c0a:	e794      	b.n	8000b36 <__udivmoddi4+0x1da>
 8000c0c:	4640      	mov	r0, r8
 8000c0e:	e7d1      	b.n	8000bb4 <__udivmoddi4+0x258>
 8000c10:	46d0      	mov	r8, sl
 8000c12:	e77b      	b.n	8000b0c <__udivmoddi4+0x1b0>
 8000c14:	3d02      	subs	r5, #2
 8000c16:	4462      	add	r2, ip
 8000c18:	e732      	b.n	8000a80 <__udivmoddi4+0x124>
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	e70a      	b.n	8000a34 <__udivmoddi4+0xd8>
 8000c1e:	4464      	add	r4, ip
 8000c20:	3802      	subs	r0, #2
 8000c22:	e742      	b.n	8000aaa <__udivmoddi4+0x14e>

08000c24 <__aeabi_idiv0>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <hmc5883l_init>:
 *      Author: Gustavo da Silva Gomes
 */

#include "HMC5883L.h"

HAL_StatusTypeDef hmc5883l_init(HMC5883LConfig_t config) {
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af04      	add	r7, sp, #16
 8000c2e:	463c      	mov	r4, r7
 8000c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t registerA = CRA7;
 8000c34:	2300      	movs	r3, #0
 8000c36:	75bb      	strb	r3, [r7, #22]
	registerA <<= 2;
 8000c38:	7dbb      	ldrb	r3, [r7, #22]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	75bb      	strb	r3, [r7, #22]
	registerA |= config.samplesNum;
 8000c40:	793a      	ldrb	r2, [r7, #4]
 8000c42:	7dbb      	ldrb	r3, [r7, #22]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	75bb      	strb	r3, [r7, #22]
	registerA <<= 3;
 8000c4a:	7dbb      	ldrb	r3, [r7, #22]
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	75bb      	strb	r3, [r7, #22]
	registerA |= config.dataOutputRate;
 8000c52:	797a      	ldrb	r2, [r7, #5]
 8000c54:	7dbb      	ldrb	r3, [r7, #22]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	75bb      	strb	r3, [r7, #22]
	registerA <<= 2;
 8000c5c:	7dbb      	ldrb	r3, [r7, #22]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	75bb      	strb	r3, [r7, #22]
	registerA |= config.measurementMode;
 8000c64:	79ba      	ldrb	r2, [r7, #6]
 8000c66:	7dbb      	ldrb	r3, [r7, #22]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	75bb      	strb	r3, [r7, #22]

	uint8_t registerB = config.gain;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	757b      	strb	r3, [r7, #21]
	registerB <<= 5;
 8000c72:	7d7b      	ldrb	r3, [r7, #21]
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	757b      	strb	r3, [r7, #21]

	uint8_t registerMode = 0x00;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	753b      	strb	r3, [r7, #20]
	registerMode |= config.operatingMode;
 8000c7e:	7a3a      	ldrb	r2, [r7, #8]
 8000c80:	7d3b      	ldrb	r3, [r7, #20]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	753b      	strb	r3, [r7, #20]

	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Write(config.handle, HMC5883L_WRITE_ADDR, REGISTER_A_ADDR, I2C_MEMADD_SIZE_8BIT, &registerA, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000c88:	6838      	ldr	r0, [r7, #0]
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	2301      	movs	r3, #1
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	f107 0316 	add.w	r3, r7, #22
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	213c      	movs	r1, #60	; 0x3c
 8000ca0:	f001 fa02 	bl	80020a8 <HAL_I2C_Mem_Write>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <hmc5883l_init+0x8a>
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
 8000cb0:	e025      	b.n	8000cfe <hmc5883l_init+0xd6>

	status = HAL_I2C_Mem_Write(config.handle, HMC5883L_WRITE_ADDR, REGISTER_B_ADDR, I2C_MEMADD_SIZE_8BIT, &registerB, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000cb2:	6838      	ldr	r0, [r7, #0]
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	f107 0315 	add.w	r3, r7, #21
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	213c      	movs	r1, #60	; 0x3c
 8000cca:	f001 f9ed 	bl	80020a8 <HAL_I2C_Mem_Write>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <hmc5883l_init+0xb4>
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	e010      	b.n	8000cfe <hmc5883l_init+0xd6>

	status = HAL_I2C_Mem_Write(config.handle, HMC5883L_WRITE_ADDR, REGISTER_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &registerMode, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000cdc:	6838      	ldr	r0, [r7, #0]
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	9302      	str	r3, [sp, #8]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	213c      	movs	r1, #60	; 0x3c
 8000cf4:	f001 f9d8 	bl	80020a8 <HAL_I2C_Mem_Write>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	75fb      	strb	r3, [r7, #23]
	return status;
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}
	...

08000d08 <hmc5883l_read>:

HAL_StatusTypeDef hmc5883l_read(HMC5883LConfig_t config, HMC5883LData_t *data) {
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b091      	sub	sp, #68	; 0x44
 8000d0c:	af04      	add	r7, sp, #16
 8000d0e:	463c      	mov	r4, r7
 8000d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	Status_t readyOrLocked = LOCKED;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// wait until data registers are unlocked
	while(readyOrLocked == LOCKED) {
 8000d1a:	e017      	b.n	8000d4c <hmc5883l_read+0x44>
		status = __getStatus(config, &readyOrLocked);
 8000d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	463b      	mov	r3, r7
 8000d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d26:	f000 f95f 	bl	8000fe8 <__getStatus>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(status != HAL_OK) return status;
 8000d30:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <hmc5883l_read+0x36>
 8000d38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d3c:	e0a6      	b.n	8000e8c <hmc5883l_read+0x184>
		if(readyOrLocked == LOCKED) HAL_Delay(10);
 8000d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d102      	bne.n	8000d4c <hmc5883l_read+0x44>
 8000d46:	200a      	movs	r0, #10
 8000d48:	f000 fdb2 	bl	80018b0 <HAL_Delay>
	while(readyOrLocked == LOCKED) {
 8000d4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d0e3      	beq.n	8000d1c <hmc5883l_read+0x14>
	}

	uint8_t addrsLow[3] = {DOX_L_ADDR, DOY_L_ADDR, DOZ_L_ADDR};
 8000d54:	4a4f      	ldr	r2, [pc, #316]	; (8000e94 <hmc5883l_read+0x18c>)
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	8019      	strh	r1, [r3, #0]
 8000d60:	3302      	adds	r3, #2
 8000d62:	0c12      	lsrs	r2, r2, #16
 8000d64:	701a      	strb	r2, [r3, #0]
	uint8_t addrsHigh[3] = {DOX_H_ADDR, DOY_H_ADDR, DOZ_H_ADDR};
 8000d66:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <hmc5883l_read+0x190>)
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	6812      	ldr	r2, [r2, #0]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	8019      	strh	r1, [r3, #0]
 8000d72:	3302      	adds	r3, #2
 8000d74:	0c12      	lsrs	r2, r2, #16
 8000d76:	701a      	strb	r2, [r3, #0]
	uint8_t axisArr[3] = {__X,__Y,__Z};
 8000d78:	4a48      	ldr	r2, [pc, #288]	; (8000e9c <hmc5883l_read+0x194>)
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	4611      	mov	r1, r2
 8000d82:	8019      	strh	r1, [r3, #0]
 8000d84:	3302      	adds	r3, #2
 8000d86:	0c12      	lsrs	r2, r2, #16
 8000d88:	701a      	strb	r2, [r3, #0]

	uint8_t dataHigh = 0, dataLow = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	76fb      	strb	r3, [r7, #27]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	76bb      	strb	r3, [r7, #26]
	int16_t axisData = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t offsetData[3] = {config.calibration.x_offset, config.calibration.y_offset, config.calibration.z_offset};
 8000d96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d9a:	82bb      	strh	r3, [r7, #20]
 8000d9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000da0:	82fb      	strh	r3, [r7, #22]
 8000da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000da6:	833b      	strh	r3, [r7, #24]

	for(int i=0; i<3; i++) {
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dac:	e067      	b.n	8000e7e <hmc5883l_read+0x176>
		// get most significant bits
		status = HAL_I2C_Mem_Read(config.handle, HMC5883L_READ_ADDR, addrsHigh[i], I2C_MEMADD_SIZE_8BIT, &dataHigh, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000dae:	6838      	ldr	r0, [r7, #0]
 8000db0:	f107 0220 	add.w	r2, r7, #32
 8000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	9302      	str	r3, [sp, #8]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	f107 031b 	add.w	r3, r7, #27
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	213c      	movs	r1, #60	; 0x3c
 8000dd0:	f001 fa64 	bl	800229c <HAL_I2C_Mem_Read>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(status != HAL_OK) return status;
 8000dda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <hmc5883l_read+0xe0>
 8000de2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000de6:	e051      	b.n	8000e8c <hmc5883l_read+0x184>
		// get less significant bits
		status = HAL_I2C_Mem_Read(config.handle, HMC5883L_READ_ADDR, addrsLow[i], I2C_MEMADD_SIZE_8BIT, &dataLow, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	f107 031a 	add.w	r3, r7, #26
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2301      	movs	r3, #1
 8000e08:	213c      	movs	r1, #60	; 0x3c
 8000e0a:	f001 fa47 	bl	800229c <HAL_I2C_Mem_Read>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(status != HAL_OK) return status;
 8000e14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <hmc5883l_read+0x11a>
 8000e1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e20:	e034      	b.n	8000e8c <hmc5883l_read+0x184>

		axisData = dataHigh;
 8000e22:	7efb      	ldrb	r3, [r7, #27]
 8000e24:	857b      	strh	r3, [r7, #42]	; 0x2a
		axisData <<= 8;
 8000e26:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	857b      	strh	r3, [r7, #42]	; 0x2a
		axisData |= dataLow;
 8000e2e:	7ebb      	ldrb	r3, [r7, #26]
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e34:	4313      	orrs	r3, r2
 8000e36:	857b      	strh	r3, [r7, #42]	; 0x2a

		axisData += offsetData[i];
 8000e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	3330      	adds	r3, #48	; 0x30
 8000e3e:	443b      	add	r3, r7
 8000e40:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	857b      	strh	r3, [r7, #42]	; 0x2a

		status = __setDataAxis(data, axisArr[i], axisData);
 8000e4e:	f107 021c 	add.w	r2, r7, #28
 8000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e60:	f000 f860 	bl	8000f24 <__setDataAxis>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(status != HAL_OK) return status;
 8000e6a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <hmc5883l_read+0x170>
 8000e72:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e76:	e009      	b.n	8000e8c <hmc5883l_read+0x184>
	for(int i=0; i<3; i++) {
 8000e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	dd94      	ble.n	8000dae <hmc5883l_read+0xa6>
	}

	__setDataAngles(data);
 8000e84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e86:	f000 f877 	bl	8000f78 <__setDataAngles>

	return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3734      	adds	r7, #52	; 0x34
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	08005400 	.word	0x08005400
 8000e98:	08005404 	.word	0x08005404
 8000e9c:	08005408 	.word	0x08005408

08000ea0 <hmc5883l_getCalibrationData>:

void hmc5883l_getCalibrationData(HMC5883LConfig_t config, UART_HandleTypeDef *huart) {
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b093      	sub	sp, #76	; 0x4c
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	463c      	mov	r4, r7
 8000ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	volatile int32_t num_collected = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
	HMC5883LData_t data = {0,0,0,0,0};
 8000eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
	char transmitStr[22];

	while(num_collected < 2000) {
 8000ebe:	e026      	b.n	8000f0e <hmc5883l_getCalibrationData+0x6e>
		hmc5883l_read(config, &data);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eca:	f7ff ff1d 	bl	8000d08 <hmc5883l_read>
		sprintf(transmitStr,"%i, %i, %i\n", data.x, data.y, data.z);
 8000ece:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000ed8:	f107 0014 	add.w	r0, r7, #20
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	490f      	ldr	r1, [pc, #60]	; (8000f20 <hmc5883l_getCalibrationData+0x80>)
 8000ee2:	f003 fd0b 	bl	80048fc <siprintf>

		HAL_UART_Transmit(huart, (uint8_t*)transmitStr, strlen(transmitStr), HAL_MAX_DELAY);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff f990 	bl	8000210 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f107 0114 	add.w	r1, r7, #20
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000efe:	f003 f8dc 	bl	80040ba <HAL_UART_Transmit>
		HAL_Delay(20);
 8000f02:	2014      	movs	r0, #20
 8000f04:	f000 fcd4 	bl	80018b0 <HAL_Delay>
		num_collected++;
 8000f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(num_collected < 2000) {
 8000f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f14:	dbd4      	blt.n	8000ec0 <hmc5883l_getCalibrationData+0x20>
	}
}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	3744      	adds	r7, #68	; 0x44
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	0800540c 	.word	0x0800540c

08000f24 <__setDataAxis>:


HAL_StatusTypeDef __setDataAxis(HMC5883LData_t *data, uint8_t axis, int16_t axisData) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
 8000f30:	4613      	mov	r3, r2
 8000f32:	803b      	strh	r3, [r7, #0]
	switch(axis) {
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d010      	beq.n	8000f5c <__setDataAxis+0x38>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	dc13      	bgt.n	8000f66 <__setDataAxis+0x42>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <__setDataAxis+0x24>
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <__setDataAxis+0x2e>
 8000f46:	e00e      	b.n	8000f66 <__setDataAxis+0x42>
		case __X:
			data->x = axisData;
 8000f48:	883a      	ldrh	r2, [r7, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	801a      	strh	r2, [r3, #0]
			return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e00a      	b.n	8000f68 <__setDataAxis+0x44>
		case __Y:
			data->y = axisData;
 8000f52:	883a      	ldrh	r2, [r7, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	805a      	strh	r2, [r3, #2]
			return HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e005      	b.n	8000f68 <__setDataAxis+0x44>
		case __Z:
			data->z = axisData;
 8000f5c:	883a      	ldrh	r2, [r7, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	809a      	strh	r2, [r3, #4]
			return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <__setDataAxis+0x44>
		default:
			return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
	}
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	0000      	movs	r0, r0
	...

08000f78 <__setDataAngles>:

void __setDataAngles(HMC5883LData_t *data) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	data->radians = atan2f(data->x, data->y);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	885b      	ldrh	r3, [r3, #2]
 8000f90:	ee07 3a10 	vmov	s14, r3
 8000f94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000f98:	eef0 0a47 	vmov.f32	s1, s14
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	f004 f8a3 	bl	80050ea <atan2f>
 8000fa4:	eef0 7a40 	vmov.f32	s15, s0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edc3 7a03 	vstr	s15, [r3, #12]
	data->degrees = data->radians * (180.0/M_PI);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fc12 	bl	80007dc <__aeabi_f2d>
 8000fb8:	a309      	add	r3, pc, #36	; (adr r3, 8000fe0 <__setDataAngles+0x68>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff f97f 	bl	80002c0 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fc5f 	bl	800088c <__aeabi_d2f>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	1a63c1f8 	.word	0x1a63c1f8
 8000fe4:	404ca5dc 	.word	0x404ca5dc

08000fe8 <__getStatus>:

HAL_StatusTypeDef __getStatus(HMC5883LConfig_t config, Status_t *registerStatus) {
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	463c      	mov	r4, r7
 8000ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t statusRegisterData = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Read(config.handle, HMC5883L_READ_ADDR, STATUS_REGISTER_ADDR, I2C_MEMADD_SIZE_8BIT, &statusRegisterData, 1, HAL_MAX_DELAY);
 8000ff8:	6838      	ldr	r0, [r7, #0]
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	9302      	str	r3, [sp, #8]
 8001000:	2301      	movs	r3, #1
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	f107 0316 	add.w	r3, r7, #22
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	2209      	movs	r2, #9
 800100e:	213c      	movs	r1, #60	; 0x3c
 8001010:	f001 f944 	bl	800229c <HAL_I2C_Mem_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <__getStatus+0x3a>
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	e011      	b.n	8001046 <__getStatus+0x5e>

	// clear the six most significant bits, since they are not used
	statusRegisterData &= 0b00000011;
 8001022:	7dbb      	ldrb	r3, [r7, #22]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	75bb      	strb	r3, [r7, #22]

	*registerStatus = statusRegisterData;
 800102c:	7dba      	ldrb	r2, [r7, #22]
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	701a      	strb	r2, [r3, #0]

	// the only possible values read are READY and LOCKED, otherwise an error occurred in the communication
	return (statusRegisterData == READY || statusRegisterData == LOCKED) ? HAL_OK : HAL_ERROR;
 8001032:	7dbb      	ldrb	r3, [r7, #22]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d004      	beq.n	8001042 <__getStatus+0x5a>
 8001038:	7dbb      	ldrb	r3, [r7, #22]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d001      	beq.n	8001042 <__getStatus+0x5a>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <__getStatus+0x5c>
 8001042:	2300      	movs	r3, #0
 8001044:	b2db      	uxtb	r3, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}
	...

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0be      	sub	sp, #248	; 0xf8
 8001054:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f000 fbb9 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f879 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f000 f989 	bl	8001374 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001062:	f000 f903 	bl	800126c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001066:	f000 f8d3 	bl	8001210 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800106a:	f000 f959 	bl	8001320 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ServoTimerConfig_t servoPWMConfig;
  servoPWMConfig.handle = htim3;
 800106e:	4a31      	ldr	r2, [pc, #196]	; (8001134 <main+0xe4>)
 8001070:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001074:	4611      	mov	r1, r2
 8001076:	2248      	movs	r2, #72	; 0x48
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fca3 	bl	80049c4 <memcpy>
  servoPWMConfig.channel = TIM_CHANNEL_2;
 800107e:	2304      	movs	r3, #4
 8001080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  servoPWMConfig.period = SERVO_PERIOD;
 8001084:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  servoPWMConfig.minDutyCyclePercentage = SERVO_MIN_DUTY_CICLE;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <main+0xe8>)
 800108e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  servoPWMConfig.maxDutyCyclePercentage = SERVO_MAX_DUTY_CICLE;
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <main+0xec>)
 8001094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  ServoCalibration_t servoCalibration;
  servoCalibration.gain = SERVO_CALIBRATION_GAIN;
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <main+0xf0>)
 800109a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  servoCalibration.offset = SERVO_CALIBRATION_OFFSET;
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <main+0xf4>)
 80010a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  ServoConfig_t servoConfig;
  servoConfig.timerConfig = servoPWMConfig;
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80010ac:	2258      	movs	r2, #88	; 0x58
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 fc88 	bl	80049c4 <memcpy>
  servoConfig.calibration = servoCalibration;
 80010b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80010bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c0:	e883 0003 	stmia.w	r3, {r0, r1}

  HMC5883LConfig_t magnetometerConfig;
  magnetometerConfig.dataOutputRate = DOR_15;
 80010c4:	2304      	movs	r3, #4
 80010c6:	757b      	strb	r3, [r7, #21]
  magnetometerConfig.gain = GAIN_0_88;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
  magnetometerConfig.measurementMode = MESUAREMENT_NORMAL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	75bb      	strb	r3, [r7, #22]
  magnetometerConfig.operatingMode = CONTINUOUS_MODE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	763b      	strb	r3, [r7, #24]
  magnetometerConfig.samplesNum = SAMPLES_8;
 80010d4:	2303      	movs	r3, #3
 80010d6:	753b      	strb	r3, [r7, #20]
  magnetometerConfig.handle = &hi2c1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <main+0xf8>)
 80010da:	613b      	str	r3, [r7, #16]
  hmc5883l_init(magnetometerConfig);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e2:	f7ff fda1 	bl	8000c28 <hmc5883l_init>
  hmc5883l_getCalibrationData(magnetometerConfig, &huart2);
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <main+0xfc>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f0:	f7ff fed6 	bl	8000ea0 <hmc5883l_getCalibrationData>

  HMC5883LData_t magnetometerData = {0,0,0,0,0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]

  const int servoMin = SERVO_MIN_ANGLE;
 8001100:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8001104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  const int servoMax = SERVO_MAX_ANGLE;
 8001108:	235a      	movs	r3, #90	; 0x5a
 800110a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  int pwmServoIncrement = 5;
 800110e:	2305      	movs	r3, #5
 8001110:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  int pwmServoValue = servoMin;
 8001114:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
//	if((pwmServoValue <= servoMin) || (pwmServoValue >= servoMax)) pwmServoIncrement = -pwmServoIncrement;
//
//	setServoPWMAngle(servoConfig, pwmServoValue);
//	HAL_Delay(500);

	hmc5883l_read(magnetometerConfig, &magnetometerData);
 800111c:	463b      	mov	r3, r7
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001126:	f7ff fdef 	bl	8000d08 <hmc5883l_read>
	HAL_Delay(500);
 800112a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112e:	f000 fbbf 	bl	80018b0 <HAL_Delay>
	hmc5883l_read(magnetometerConfig, &magnetometerData);
 8001132:	e7f3      	b.n	800111c <main+0xcc>
 8001134:	200000cc 	.word	0x200000cc
 8001138:	3d4ccccd 	.word	0x3d4ccccd
 800113c:	3deb851f 	.word	0x3deb851f
 8001140:	3fbc28f6 	.word	0x3fbc28f6
 8001144:	c149999a 	.word	0xc149999a
 8001148:	20000078 	.word	0x20000078
 800114c:	20000114 	.word	0x20000114

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	; 0x50
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	2234      	movs	r2, #52	; 0x34
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fbec 	bl	800493c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <SystemClock_Config+0xb8>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <SystemClock_Config+0xb8>)
 800117e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <SystemClock_Config+0xb8>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <SystemClock_Config+0xbc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800119c:	4a1b      	ldr	r2, [pc, #108]	; (800120c <SystemClock_Config+0xbc>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <SystemClock_Config+0xbc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 f8af 	bl	8003328 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011d0:	f000 f946 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80011dc:	23a0      	movs	r3, #160	; 0xa0
 80011de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80011e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fdd5 	bl	8002da0 <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011fc:	f000 f930 	bl	8001460 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3750      	adds	r7, #80	; 0x50
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f000 fde7 	bl	8001e20 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 f902 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000078 	.word	0x20000078
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	615a      	str	r2, [r3, #20]
 800128c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128e:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_TIM3_Init+0xac>)
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <MX_TIM3_Init+0xb0>)
 8001292:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_TIM3_Init+0xac>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_TIM3_Init+0xac>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_TIM3_Init+0xac>)
 80012a2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80012a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_TIM3_Init+0xac>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_TIM3_Init+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b4:	4818      	ldr	r0, [pc, #96]	; (8001318 <MX_TIM3_Init+0xac>)
 80012b6:	f002 fad5 	bl	8003864 <HAL_TIM_PWM_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012c0:	f000 f8ce 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4619      	mov	r1, r3
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_TIM3_Init+0xac>)
 80012d4:	f002 fe28 	bl	8003f28 <HAL_TIMEx_MasterConfigSynchronization>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012de:	f000 f8bf 	bl	8001460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e2:	2360      	movs	r3, #96	; 0x60
 80012e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 94;
 80012e6:	235e      	movs	r3, #94	; 0x5e
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2204      	movs	r2, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <MX_TIM3_Init+0xac>)
 80012fa:	f002 fb03 	bl	8003904 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001304:	f000 f8ac 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <MX_TIM3_Init+0xac>)
 800130a:	f000 f941 	bl	8001590 <HAL_TIM_MspPostInit>

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200000cc 	.word	0x200000cc
 800131c:	40000400 	.word	0x40000400

08001320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_USART2_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART2_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001358:	f002 fe62 	bl	8004020 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 f87d 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000114 	.word	0x20000114
 8001370:	40004400 	.word	0x40004400

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <MX_GPIO_Init+0xdc>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <MX_GPIO_Init+0xdc>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_GPIO_Init+0xdc>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <MX_GPIO_Init+0xdc>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a28      	ldr	r2, [pc, #160]	; (8001450 <MX_GPIO_Init+0xdc>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <MX_GPIO_Init+0xdc>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <MX_GPIO_Init+0xdc>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a21      	ldr	r2, [pc, #132]	; (8001450 <MX_GPIO_Init+0xdc>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_GPIO_Init+0xdc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2120      	movs	r1, #32
 80013e2:	481c      	ldr	r0, [pc, #112]	; (8001454 <MX_GPIO_Init+0xe0>)
 80013e4:	f000 fd02 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013e8:	2320      	movs	r3, #32
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4619      	mov	r1, r3
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_GPIO_Init+0xe0>)
 8001400:	f000 fb60 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001404:	2320      	movs	r3, #32
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001414:	2307      	movs	r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <MX_GPIO_Init+0xe4>)
 8001420:	f000 fb50 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001436:	2307      	movs	r3, #7
 8001438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4619      	mov	r1, r3
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_GPIO_Init+0xe8>)
 8001442:	f000 fb3f 	bl	8001ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020800 	.word	0x40020800
 800145c:	40020400 	.word	0x40020400

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_I2C_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12c      	bne.n	8001538 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150c:	2304      	movs	r3, #4
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	480c      	ldr	r0, [pc, #48]	; (8001548 <HAL_I2C_MspInit+0x8c>)
 8001518:	f000 fad4 	bl	8001ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_I2C_MspInit+0x88>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_I2C_MspInit+0x88>)
 8001526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_I2C_MspInit+0x88>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40005400 	.word	0x40005400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400

0800154c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <HAL_TIM_PWM_MspInit+0x3c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10d      	bne.n	800157a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_TIM_PWM_MspInit+0x40>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_TIM_PWM_MspInit+0x40>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_TIM_PWM_MspInit+0x40>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40000400 	.word	0x40000400
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <HAL_TIM_MspPostInit+0x68>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d11d      	bne.n	80015ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_TIM_MspPostInit+0x6c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_TIM_MspPostInit+0x6c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_TIM_MspPostInit+0x6c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015de:	2302      	movs	r3, #2
 80015e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_TIM_MspPostInit+0x70>)
 80015ea:	f000 fa6b 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40000400 	.word	0x40000400
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_UART_MspInit+0x84>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12b      	bne.n	800167e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_UART_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_UART_MspInit+0x88>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_UART_MspInit+0x88>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_UART_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_UART_MspInit+0x88>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_UART_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800165e:	230c      	movs	r3, #12
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166e:	2307      	movs	r3, #7
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_UART_MspInit+0x8c>)
 800167a:	f000 fa23 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40004400 	.word	0x40004400
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 f8c6 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f003 f928 	bl	800496c <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20020000 	.word	0x20020000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000158 	.word	0x20000158
 8001750:	200002a8 	.word	0x200002a8

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001780:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001794:	4c0b      	ldr	r4, [pc, #44]	; (80017c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a2:	f7ff ffd7 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f003 f8e7 	bl	8004978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7ff fc51 	bl	8001050 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017bc:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 80017c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017c4:	200002a8 	.word	0x200002a8

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_Init+0x40>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_Init+0x40>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x40>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f931 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	200f      	movs	r0, #15
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fe34 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f93b 	bl	8001aaa <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 f911 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000000 	.word	0x20000000
 8001868:	20000008 	.word	0x20000008
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000008 	.word	0x20000008
 8001894:	2000015c 	.word	0x2000015c

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	2000015c 	.word	0x2000015c

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000008 	.word	0x20000008

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff47 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff5c 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffb0 	bl	8001a18 <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	e165      	b.n	8001dac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8154 	bne.w	8001da6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d005      	beq.n	8001b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d130      	bne.n	8001b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 0201 	and.w	r2, r3, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d017      	beq.n	8001bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d123      	bne.n	8001c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	69b9      	ldr	r1, [r7, #24]
 8001c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80ae 	beq.w	8001da6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_GPIO_Init+0x300>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a5c      	ldr	r2, [pc, #368]	; (8001dc4 <HAL_GPIO_Init+0x300>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <HAL_GPIO_Init+0x300>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c66:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <HAL_GPIO_Init+0x308>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d025      	beq.n	8001cde <HAL_GPIO_Init+0x21a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <HAL_GPIO_Init+0x30c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01f      	beq.n	8001cda <HAL_GPIO_Init+0x216>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4d      	ldr	r2, [pc, #308]	; (8001dd4 <HAL_GPIO_Init+0x310>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4c      	ldr	r2, [pc, #304]	; (8001dd8 <HAL_GPIO_Init+0x314>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x20e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <HAL_GPIO_Init+0x318>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x20a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <HAL_GPIO_Init+0x31c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x206>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x202>
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	e00c      	b.n	8001ce0 <HAL_GPIO_Init+0x21c>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e00a      	b.n	8001ce0 <HAL_GPIO_Init+0x21c>
 8001cca:	2305      	movs	r3, #5
 8001ccc:	e008      	b.n	8001ce0 <HAL_GPIO_Init+0x21c>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x21c>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e004      	b.n	8001ce0 <HAL_GPIO_Init+0x21c>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e002      	b.n	8001ce0 <HAL_GPIO_Init+0x21c>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_GPIO_Init+0x21c>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	f002 0203 	and.w	r2, r2, #3
 8001ce6:	0092      	lsls	r2, r2, #2
 8001ce8:	4093      	lsls	r3, r2
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf0:	4935      	ldr	r1, [pc, #212]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d22:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d4c:	4a26      	ldr	r2, [pc, #152]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d76:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3301      	adds	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b0f      	cmp	r3, #15
 8001db0:	f67f ae96 	bls.w	8001ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020c00 	.word	0x40020c00
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40021400 	.word	0x40021400
 8001de4:	40021800 	.word	0x40021800
 8001de8:	40013c00 	.word	0x40013c00

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e08:	e003      	b.n	8001e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e12b      	b.n	800208a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fb38 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e84:	f001 f87e 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8001e88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a81      	ldr	r2, [pc, #516]	; (8002094 <HAL_I2C_Init+0x274>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d807      	bhi.n	8001ea4 <HAL_I2C_Init+0x84>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a80      	ldr	r2, [pc, #512]	; (8002098 <HAL_I2C_Init+0x278>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	bf94      	ite	ls
 8001e9c:	2301      	movls	r3, #1
 8001e9e:	2300      	movhi	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e006      	b.n	8001eb2 <HAL_I2C_Init+0x92>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a7d      	ldr	r2, [pc, #500]	; (800209c <HAL_I2C_Init+0x27c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	bf94      	ite	ls
 8001eac:	2301      	movls	r3, #1
 8001eae:	2300      	movhi	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0e7      	b.n	800208a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4a78      	ldr	r2, [pc, #480]	; (80020a0 <HAL_I2C_Init+0x280>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a6a      	ldr	r2, [pc, #424]	; (8002094 <HAL_I2C_Init+0x274>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d802      	bhi.n	8001ef4 <HAL_I2C_Init+0xd4>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	e009      	b.n	8001f08 <HAL_I2C_Init+0xe8>
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	4a69      	ldr	r2, [pc, #420]	; (80020a4 <HAL_I2C_Init+0x284>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	099b      	lsrs	r3, r3, #6
 8001f06:	3301      	adds	r3, #1
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	495c      	ldr	r1, [pc, #368]	; (8002094 <HAL_I2C_Init+0x274>)
 8001f24:	428b      	cmp	r3, r1
 8001f26:	d819      	bhi.n	8001f5c <HAL_I2C_Init+0x13c>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e59      	subs	r1, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f36:	1c59      	adds	r1, r3, #1
 8001f38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_I2C_Init+0x138>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1e59      	subs	r1, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f50:	3301      	adds	r3, #1
 8001f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f56:	e051      	b.n	8001ffc <HAL_I2C_Init+0x1dc>
 8001f58:	2304      	movs	r3, #4
 8001f5a:	e04f      	b.n	8001ffc <HAL_I2C_Init+0x1dc>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d111      	bne.n	8001f88 <HAL_I2C_Init+0x168>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e58      	subs	r0, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	440b      	add	r3, r1
 8001f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e012      	b.n	8001fae <HAL_I2C_Init+0x18e>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1e58      	subs	r0, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	0099      	lsls	r1, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Init+0x196>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e022      	b.n	8001ffc <HAL_I2C_Init+0x1dc>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10e      	bne.n	8001fdc <HAL_I2C_Init+0x1bc>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1e58      	subs	r0, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6859      	ldr	r1, [r3, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	440b      	add	r3, r1
 8001fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	e00f      	b.n	8001ffc <HAL_I2C_Init+0x1dc>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e58      	subs	r0, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	0099      	lsls	r1, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	6809      	ldr	r1, [r1, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69da      	ldr	r2, [r3, #28]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800202a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6911      	ldr	r1, [r2, #16]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68d2      	ldr	r2, [r2, #12]
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	430b      	orrs	r3, r1
 800203e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	000186a0 	.word	0x000186a0
 8002098:	001e847f 	.word	0x001e847f
 800209c:	003d08ff 	.word	0x003d08ff
 80020a0:	431bde83 	.word	0x431bde83
 80020a4:	10624dd3 	.word	0x10624dd3

080020a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	460b      	mov	r3, r1
 80020bc:	813b      	strh	r3, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020c2:	f7ff fbe9 	bl	8001898 <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	f040 80d9 	bne.w	8002288 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2319      	movs	r3, #25
 80020dc:	2201      	movs	r2, #1
 80020de:	496d      	ldr	r1, [pc, #436]	; (8002294 <HAL_I2C_Mem_Write+0x1ec>)
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fc7f 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
 80020ee:	e0cc      	b.n	800228a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Mem_Write+0x56>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0c5      	b.n	800228a <HAL_I2C_Mem_Write+0x1e2>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d007      	beq.n	8002124 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2221      	movs	r2, #33	; 0x21
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a3a      	ldr	r2, [r7, #32]
 800214e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a4d      	ldr	r2, [pc, #308]	; (8002298 <HAL_I2C_Mem_Write+0x1f0>)
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002166:	88f8      	ldrh	r0, [r7, #6]
 8002168:	893a      	ldrh	r2, [r7, #8]
 800216a:	8979      	ldrh	r1, [r7, #10]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4603      	mov	r3, r0
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fab6 	bl	80026e8 <I2C_RequestMemoryWrite>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d052      	beq.n	8002228 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e081      	b.n	800228a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fd00 	bl	8002b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00d      	beq.n	80021b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b04      	cmp	r3, #4
 800219c:	d107      	bne.n	80021ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06b      	b.n	800228a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d11b      	bne.n	8002228 <HAL_I2C_Mem_Write+0x180>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d017      	beq.n	8002228 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1aa      	bne.n	8002186 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fcec 	bl	8002c12 <I2C_WaitOnBTFFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b04      	cmp	r3, #4
 8002246:	d107      	bne.n	8002258 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e016      	b.n	800228a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	00100002 	.word	0x00100002
 8002298:	ffff0000 	.word	0xffff0000

0800229c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	817b      	strh	r3, [r7, #10]
 80022ae:	460b      	mov	r3, r1
 80022b0:	813b      	strh	r3, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022b6:	f7ff faef 	bl	8001898 <HAL_GetTick>
 80022ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	f040 8208 	bne.w	80026da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2319      	movs	r3, #25
 80022d0:	2201      	movs	r2, #1
 80022d2:	497b      	ldr	r1, [pc, #492]	; (80024c0 <HAL_I2C_Mem_Read+0x224>)
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fb85 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
 80022e2:	e1fb      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_I2C_Mem_Read+0x56>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e1f4      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d007      	beq.n	8002318 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2222      	movs	r2, #34	; 0x22
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4a5b      	ldr	r2, [pc, #364]	; (80024c4 <HAL_I2C_Mem_Read+0x228>)
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800235a:	88f8      	ldrh	r0, [r7, #6]
 800235c:	893a      	ldrh	r2, [r7, #8]
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4603      	mov	r3, r0
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fa52 	bl	8002814 <I2C_RequestMemoryRead>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1b0      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	d113      	bne.n	80023aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e184      	b.n	80026b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d11b      	bne.n	80023ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e164      	b.n	80026b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d11b      	bne.n	800242a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002400:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	e144      	b.n	80026b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002440:	e138      	b.n	80026b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	2b03      	cmp	r3, #3
 8002448:	f200 80f1 	bhi.w	800262e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	2b01      	cmp	r3, #1
 8002452:	d123      	bne.n	800249c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fc1b 	bl	8002c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e139      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	; 0x2a
 800249a:	e10b      	b.n	80026b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d14e      	bne.n	8002542 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	2200      	movs	r2, #0
 80024ac:	4906      	ldr	r1, [pc, #24]	; (80024c8 <HAL_I2C_Mem_Read+0x22c>)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fa98 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e10e      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
 80024be:	bf00      	nop
 80024c0:	00100002 	.word	0x00100002
 80024c4:	ffff0000 	.word	0xffff0000
 80024c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002540:	e0b8      	b.n	80026b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002548:	2200      	movs	r2, #0
 800254a:	4966      	ldr	r1, [pc, #408]	; (80026e4 <HAL_I2C_Mem_Read+0x448>)
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fa49 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0bf      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	2200      	movs	r2, #0
 80025a6:	494f      	ldr	r1, [pc, #316]	; (80026e4 <HAL_I2C_Mem_Read+0x448>)
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fa1b 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e091      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800262c:	e042      	b.n	80026b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fb2e 	bl	8002c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e04c      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d118      	bne.n	80026b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f aec2 	bne.w	8002442 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026da:	2302      	movs	r3, #2
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	00010004 	.word	0x00010004

080026e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2200      	movs	r2, #0
 800271a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f960 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002738:	d103      	bne.n	8002742 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e05f      	b.n	8002806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	6a3a      	ldr	r2, [r7, #32]
 800275a:	492d      	ldr	r1, [pc, #180]	; (8002810 <I2C_RequestMemoryWrite+0x128>)
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f998 	bl	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e04c      	b.n	8002806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	6a39      	ldr	r1, [r7, #32]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fa02 	bl	8002b90 <I2C_WaitOnTXEFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00d      	beq.n	80027ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	2b04      	cmp	r3, #4
 8002798:	d107      	bne.n	80027aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e02b      	b.n	8002806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027b4:	893b      	ldrh	r3, [r7, #8]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	611a      	str	r2, [r3, #16]
 80027be:	e021      	b.n	8002804 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027c0:	893b      	ldrh	r3, [r7, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	6a39      	ldr	r1, [r7, #32]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f9dc 	bl	8002b90 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d107      	bne.n	80027f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e005      	b.n	8002806 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027fa:	893b      	ldrh	r3, [r7, #8]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	00010002 	.word	0x00010002

08002814 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	817b      	strh	r3, [r7, #10]
 8002826:	460b      	mov	r3, r1
 8002828:	813b      	strh	r3, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800283c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800284c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2200      	movs	r2, #0
 8002856:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f8c2 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002874:	d103      	bne.n	800287e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0aa      	b.n	80029d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	6a3a      	ldr	r2, [r7, #32]
 8002896:	4952      	ldr	r1, [pc, #328]	; (80029e0 <I2C_RequestMemoryRead+0x1cc>)
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f8fa 	bl	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e097      	b.n	80029d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f964 	bl	8002b90 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d107      	bne.n	80028e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e076      	b.n	80029d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028f0:	893b      	ldrh	r3, [r7, #8]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e021      	b.n	8002940 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	b29b      	uxth	r3, r3
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f93e 	bl	8002b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b04      	cmp	r3, #4
 8002920:	d107      	bne.n	8002932 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e050      	b.n	80029d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002936:	893b      	ldrh	r3, [r7, #8]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002942:	6a39      	ldr	r1, [r7, #32]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f923 	bl	8002b90 <I2C_WaitOnTXEFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b04      	cmp	r3, #4
 8002956:	d107      	bne.n	8002968 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002966:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e035      	b.n	80029d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	2200      	movs	r2, #0
 8002984:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f82b 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a2:	d103      	bne.n	80029ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e013      	b.n	80029d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	6a3a      	ldr	r2, [r7, #32]
 80029c4:	4906      	ldr	r1, [pc, #24]	; (80029e0 <I2C_RequestMemoryRead+0x1cc>)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f863 	bl	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	00010002 	.word	0x00010002

080029e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f4:	e025      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d021      	beq.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fe ff4b 	bl	8001898 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d116      	bne.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f043 0220 	orr.w	r2, r3, #32
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e023      	b.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	0c1b      	lsrs	r3, r3, #16
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10d      	bne.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	e00c      	b.n	8002a82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d0b6      	beq.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa0:	e051      	b.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d123      	bne.n	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f043 0204 	orr.w	r2, r3, #4
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e046      	b.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d021      	beq.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b02:	f7fe fec9 	bl	8001898 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d116      	bne.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e020      	b.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10c      	bne.n	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	e00b      	b.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d18d      	bne.n	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b9c:	e02d      	b.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f8ce 	bl	8002d40 <I2C_IsAcknowledgeFailed>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e02d      	b.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d021      	beq.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe fe6f 	bl	8001898 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e007      	b.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d1ca      	bne.n	8002b9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c1e:	e02d      	b.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f88d 	bl	8002d40 <I2C_IsAcknowledgeFailed>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e02d      	b.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d021      	beq.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fe fe2e 	bl	8001898 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e007      	b.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d1ca      	bne.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ca0:	e042      	b.n	8002d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d119      	bne.n	8002ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0210 	mvn.w	r2, #16
 8002cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e029      	b.n	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce4:	f7fe fdd8 	bl	8001898 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d302      	bcc.n	8002cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e007      	b.n	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d1b5      	bne.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d56:	d11b      	bne.n	8002d90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0cc      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d90c      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d044      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d119      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e067      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4934      	ldr	r1, [pc, #208]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fd02 	bl	8001898 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fcfe 	bl	8001898 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d20c      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f855 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fc62 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08005418 	.word	0x08005418
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000

08002f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f88:	f7ff fff0 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0a9b      	lsrs	r3, r3, #10
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	4903      	ldr	r1, [pc, #12]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	08005428 	.word	0x08005428

08002fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb0:	f7ff ffdc 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	0b5b      	lsrs	r3, r3, #13
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4903      	ldr	r1, [pc, #12]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	08005428 	.word	0x08005428

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd8:	b0a6      	sub	sp, #152	; 0x98
 8002fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ffa:	4bc8      	ldr	r3, [pc, #800]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b0c      	cmp	r3, #12
 8003004:	f200 817e 	bhi.w	8003304 <HAL_RCC_GetSysClockFreq+0x330>
 8003008:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_RCC_GetSysClockFreq+0x3c>)
 800300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300e:	bf00      	nop
 8003010:	08003045 	.word	0x08003045
 8003014:	08003305 	.word	0x08003305
 8003018:	08003305 	.word	0x08003305
 800301c:	08003305 	.word	0x08003305
 8003020:	0800304d 	.word	0x0800304d
 8003024:	08003305 	.word	0x08003305
 8003028:	08003305 	.word	0x08003305
 800302c:	08003305 	.word	0x08003305
 8003030:	08003055 	.word	0x08003055
 8003034:	08003305 	.word	0x08003305
 8003038:	08003305 	.word	0x08003305
 800303c:	08003305 	.word	0x08003305
 8003040:	080031bf 	.word	0x080031bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4bb6      	ldr	r3, [pc, #728]	; (8003320 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800304a:	e15f      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304c:	4bb5      	ldr	r3, [pc, #724]	; (8003324 <HAL_RCC_GetSysClockFreq+0x350>)
 800304e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003052:	e15b      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003054:	4bb1      	ldr	r3, [pc, #708]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800305c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003060:	4bae      	ldr	r3, [pc, #696]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d031      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306c:	4bab      	ldr	r3, [pc, #684]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	2200      	movs	r2, #0
 8003074:	66bb      	str	r3, [r7, #104]	; 0x68
 8003076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	663b      	str	r3, [r7, #96]	; 0x60
 8003080:	2300      	movs	r3, #0
 8003082:	667b      	str	r3, [r7, #100]	; 0x64
 8003084:	4ba7      	ldr	r3, [pc, #668]	; (8003324 <HAL_RCC_GetSysClockFreq+0x350>)
 8003086:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800308a:	462a      	mov	r2, r5
 800308c:	fb03 f202 	mul.w	r2, r3, r2
 8003090:	2300      	movs	r3, #0
 8003092:	4621      	mov	r1, r4
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	4aa2      	ldr	r2, [pc, #648]	; (8003324 <HAL_RCC_GetSysClockFreq+0x350>)
 800309c:	4621      	mov	r1, r4
 800309e:	fba1 1202 	umull	r1, r2, r1, r2
 80030a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030a4:	460a      	mov	r2, r1
 80030a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80030a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80030aa:	4413      	add	r3, r2
 80030ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030b2:	2200      	movs	r2, #0
 80030b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80030c0:	f7fd fc34 	bl	800092c <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030ce:	e064      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4b92      	ldr	r3, [pc, #584]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	2200      	movs	r2, #0
 80030d8:	653b      	str	r3, [r7, #80]	; 0x50
 80030da:	657a      	str	r2, [r7, #84]	; 0x54
 80030dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e4:	2300      	movs	r3, #0
 80030e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80030ec:	4622      	mov	r2, r4
 80030ee:	462b      	mov	r3, r5
 80030f0:	f04f 0000 	mov.w	r0, #0
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	0159      	lsls	r1, r3, #5
 80030fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fe:	0150      	lsls	r0, r2, #5
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4621      	mov	r1, r4
 8003106:	1a51      	subs	r1, r2, r1
 8003108:	6139      	str	r1, [r7, #16]
 800310a:	4629      	mov	r1, r5
 800310c:	eb63 0301 	sbc.w	r3, r3, r1
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800311e:	4659      	mov	r1, fp
 8003120:	018b      	lsls	r3, r1, #6
 8003122:	4651      	mov	r1, sl
 8003124:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003128:	4651      	mov	r1, sl
 800312a:	018a      	lsls	r2, r1, #6
 800312c:	4651      	mov	r1, sl
 800312e:	ebb2 0801 	subs.w	r8, r2, r1
 8003132:	4659      	mov	r1, fp
 8003134:	eb63 0901 	sbc.w	r9, r3, r1
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003144:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003148:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800314c:	4690      	mov	r8, r2
 800314e:	4699      	mov	r9, r3
 8003150:	4623      	mov	r3, r4
 8003152:	eb18 0303 	adds.w	r3, r8, r3
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	462b      	mov	r3, r5
 800315a:	eb49 0303 	adc.w	r3, r9, r3
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800316c:	4629      	mov	r1, r5
 800316e:	028b      	lsls	r3, r1, #10
 8003170:	4621      	mov	r1, r4
 8003172:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003176:	4621      	mov	r1, r4
 8003178:	028a      	lsls	r2, r1, #10
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003182:	2200      	movs	r2, #0
 8003184:	643b      	str	r3, [r7, #64]	; 0x40
 8003186:	647a      	str	r2, [r7, #68]	; 0x44
 8003188:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800318c:	f7fd fbce 	bl	800092c <__aeabi_uldivmod>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4613      	mov	r3, r2
 8003196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800319a:	4b60      	ldr	r3, [pc, #384]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0c1b      	lsrs	r3, r3, #16
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	3301      	adds	r3, #1
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80031ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80031bc:	e0a6      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031be:	4b57      	ldr	r3, [pc, #348]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ca:	4b54      	ldr	r3, [pc, #336]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02a      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d6:	4b51      	ldr	r3, [pc, #324]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	099b      	lsrs	r3, r3, #6
 80031dc:	2200      	movs	r2, #0
 80031de:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031e8:	2100      	movs	r1, #0
 80031ea:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_RCC_GetSysClockFreq+0x350>)
 80031ec:	fb03 f201 	mul.w	r2, r3, r1
 80031f0:	2300      	movs	r3, #0
 80031f2:	fb00 f303 	mul.w	r3, r0, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	4a4a      	ldr	r2, [pc, #296]	; (8003324 <HAL_RCC_GetSysClockFreq+0x350>)
 80031fa:	fba0 1202 	umull	r1, r2, r0, r2
 80031fe:	677a      	str	r2, [r7, #116]	; 0x74
 8003200:	460a      	mov	r2, r1
 8003202:	673a      	str	r2, [r7, #112]	; 0x70
 8003204:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003206:	4413      	add	r3, r2
 8003208:	677b      	str	r3, [r7, #116]	; 0x74
 800320a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320e:	2200      	movs	r2, #0
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
 8003212:	637a      	str	r2, [r7, #52]	; 0x34
 8003214:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003218:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800321c:	f7fd fb86 	bl	800092c <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800322a:	e05b      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	2200      	movs	r2, #0
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
 8003236:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
 8003244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003248:	4642      	mov	r2, r8
 800324a:	464b      	mov	r3, r9
 800324c:	f04f 0000 	mov.w	r0, #0
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	0159      	lsls	r1, r3, #5
 8003256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800325a:	0150      	lsls	r0, r2, #5
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4641      	mov	r1, r8
 8003262:	ebb2 0a01 	subs.w	sl, r2, r1
 8003266:	4649      	mov	r1, r9
 8003268:	eb63 0b01 	sbc.w	fp, r3, r1
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800327c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003280:	ebb2 040a 	subs.w	r4, r2, sl
 8003284:	eb63 050b 	sbc.w	r5, r3, fp
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	00eb      	lsls	r3, r5, #3
 8003292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003296:	00e2      	lsls	r2, r4, #3
 8003298:	4614      	mov	r4, r2
 800329a:	461d      	mov	r5, r3
 800329c:	4643      	mov	r3, r8
 800329e:	18e3      	adds	r3, r4, r3
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	464b      	mov	r3, r9
 80032a4:	eb45 0303 	adc.w	r3, r5, r3
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b6:	4629      	mov	r1, r5
 80032b8:	028b      	lsls	r3, r1, #10
 80032ba:	4621      	mov	r1, r4
 80032bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c0:	4621      	mov	r1, r4
 80032c2:	028a      	lsls	r2, r1, #10
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032cc:	2200      	movs	r2, #0
 80032ce:	61bb      	str	r3, [r7, #24]
 80032d0:	61fa      	str	r2, [r7, #28]
 80032d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d6:	f7fd fb29 	bl	800092c <__aeabi_uldivmod>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4613      	mov	r3, r2
 80032e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_RCC_GetSysClockFreq+0x348>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0f1b      	lsrs	r3, r3, #28
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80032f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003302:	e003      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800330a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003310:	4618      	mov	r0, r3
 8003312:	3798      	adds	r7, #152	; 0x98
 8003314:	46bd      	mov	sp, r7
 8003316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	00f42400 	.word	0x00f42400
 8003324:	017d7840 	.word	0x017d7840

08003328 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e28d      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8083 	beq.w	800344e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003348:	4b94      	ldr	r3, [pc, #592]	; (800359c <HAL_RCC_OscConfig+0x274>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b04      	cmp	r3, #4
 8003352:	d019      	beq.n	8003388 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003354:	4b91      	ldr	r3, [pc, #580]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800335c:	2b08      	cmp	r3, #8
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003360:	4b8e      	ldr	r3, [pc, #568]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336c:	d00c      	beq.n	8003388 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4b8b      	ldr	r3, [pc, #556]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d112      	bne.n	80033a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b88      	ldr	r3, [pc, #544]	; (800359c <HAL_RCC_OscConfig+0x274>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b84      	ldr	r3, [pc, #528]	; (800359c <HAL_RCC_OscConfig+0x274>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05b      	beq.n	800344c <HAL_RCC_OscConfig+0x124>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d157      	bne.n	800344c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e25a      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x90>
 80033aa:	4b7c      	ldr	r3, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7b      	ldr	r2, [pc, #492]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xcc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0xb4>
 80033c2:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a75      	ldr	r2, [pc, #468]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b73      	ldr	r3, [pc, #460]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a72      	ldr	r2, [pc, #456]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xcc>
 80033dc:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b6c      	ldr	r3, [pc, #432]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6b      	ldr	r2, [pc, #428]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fa4c 	bl	8001898 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fa48 	bl	8001898 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e21f      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xdc>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fa38 	bl	8001898 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fa34 	bl	8001898 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e20b      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b57      	ldr	r3, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x104>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d06f      	beq.n	800353a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800345a:	4b50      	ldr	r3, [pc, #320]	; (800359c <HAL_RCC_OscConfig+0x274>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d017      	beq.n	8003496 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003466:	4b4d      	ldr	r3, [pc, #308]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800346e:	2b08      	cmp	r3, #8
 8003470:	d105      	bne.n	800347e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003472:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d11c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348a:	4b44      	ldr	r3, [pc, #272]	; (800359c <HAL_RCC_OscConfig+0x274>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	4b41      	ldr	r3, [pc, #260]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x186>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e1d3      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4b3b      	ldr	r3, [pc, #236]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4937      	ldr	r1, [pc, #220]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	e03a      	b.n	800353a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034cc:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_OscConfig+0x278>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fe f9e1 	bl	8001898 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034da:	f7fe f9dd 	bl	8001898 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e1b4      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	4b28      	ldr	r3, [pc, #160]	; (800359c <HAL_RCC_OscConfig+0x274>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4925      	ldr	r1, [pc, #148]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
 800350c:	e015      	b.n	800353a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x278>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f9c0 	bl	8001898 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800351c:	f7fe f9bc 	bl	8001898 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e193      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d036      	beq.n	80035b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d016      	beq.n	800357c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe f9a0 	bl	8001898 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355c:	f7fe f99c 	bl	8001898 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e173      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x234>
 800357a:	e01b      	b.n	80035b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fe f989 	bl	8001898 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003588:	e00e      	b.n	80035a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358a:	f7fe f985 	bl	8001898 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d907      	bls.n	80035a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e15c      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
 800359c:	40023800 	.word	0x40023800
 80035a0:	42470000 	.word	0x42470000
 80035a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a8:	4b8a      	ldr	r3, [pc, #552]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ea      	bne.n	800358a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8097 	beq.w	80036f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c6:	4b83      	ldr	r3, [pc, #524]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10f      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	4b7f      	ldr	r3, [pc, #508]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4a7e      	ldr	r2, [pc, #504]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6413      	str	r3, [r2, #64]	; 0x40
 80035e2:	4b7c      	ldr	r3, [pc, #496]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b79      	ldr	r3, [pc, #484]	; (80037d8 <HAL_RCC_OscConfig+0x4b0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d118      	bne.n	8003630 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x4b0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	; (80037d8 <HAL_RCC_OscConfig+0x4b0>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360a:	f7fe f945 	bl	8001898 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003612:	f7fe f941 	bl	8001898 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e118      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x4b0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d106      	bne.n	8003646 <HAL_RCC_OscConfig+0x31e>
 8003638:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a65      	ldr	r2, [pc, #404]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	e01c      	b.n	8003680 <HAL_RCC_OscConfig+0x358>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b05      	cmp	r3, #5
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x340>
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a60      	ldr	r2, [pc, #384]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
 800365a:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a5d      	ldr	r2, [pc, #372]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0x358>
 8003668:	4b5a      	ldr	r3, [pc, #360]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a59      	ldr	r2, [pc, #356]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	4b57      	ldr	r3, [pc, #348]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a56      	ldr	r2, [pc, #344]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800367a:	f023 0304 	bic.w	r3, r3, #4
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe f906 	bl	8001898 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fe f902 	bl	8001898 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e0d7      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0ee      	beq.n	8003690 <HAL_RCC_OscConfig+0x368>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fe f8f0 	bl	8001898 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fe f8ec 	bl	8001898 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e0c1      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d2:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1ee      	bne.n	80036bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d105      	bne.n	80036f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e4:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	4a3a      	ldr	r2, [pc, #232]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80ad 	beq.w	8003854 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036fa:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b08      	cmp	r3, #8
 8003704:	d060      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d145      	bne.n	800379a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b33      	ldr	r3, [pc, #204]	; (80037dc <HAL_RCC_OscConfig+0x4b4>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe f8c0 	bl	8001898 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe f8bc 	bl	8001898 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e093      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	3b01      	subs	r3, #1
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	071b      	lsls	r3, r3, #28
 8003766:	491b      	ldr	r1, [pc, #108]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x4b4>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fe f891 	bl	8001898 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe f88d 	bl	8001898 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e064      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x452>
 8003798:	e05c      	b.n	8003854 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_RCC_OscConfig+0x4b4>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe f87a 	bl	8001898 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe f876 	bl	8001898 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e04d      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x480>
 80037c6:	e045      	b.n	8003854 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e040      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_RCC_OscConfig+0x538>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d030      	beq.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d129      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d122      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d119      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d10f      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e041      	b.n	80038fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fe5e 	bl	800154c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 f8f0 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800391e:	2302      	movs	r3, #2
 8003920:	e0ae      	b.n	8003a80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	f200 809f 	bhi.w	8003a70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	0800396d 	.word	0x0800396d
 800393c:	08003a71 	.word	0x08003a71
 8003940:	08003a71 	.word	0x08003a71
 8003944:	08003a71 	.word	0x08003a71
 8003948:	080039ad 	.word	0x080039ad
 800394c:	08003a71 	.word	0x08003a71
 8003950:	08003a71 	.word	0x08003a71
 8003954:	08003a71 	.word	0x08003a71
 8003958:	080039ef 	.word	0x080039ef
 800395c:	08003a71 	.word	0x08003a71
 8003960:	08003a71 	.word	0x08003a71
 8003964:	08003a71 	.word	0x08003a71
 8003968:	08003a2f 	.word	0x08003a2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f928 	bl	8003bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0204 	bic.w	r2, r2, #4
 8003996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6999      	ldr	r1, [r3, #24]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	619a      	str	r2, [r3, #24]
      break;
 80039aa:	e064      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f978 	bl	8003ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6999      	ldr	r1, [r3, #24]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	021a      	lsls	r2, r3, #8
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	619a      	str	r2, [r3, #24]
      break;
 80039ec:	e043      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f9cd 	bl	8003d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0208 	orr.w	r2, r2, #8
 8003a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0204 	bic.w	r2, r2, #4
 8003a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69d9      	ldr	r1, [r3, #28]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	61da      	str	r2, [r3, #28]
      break;
 8003a2c:	e023      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fa21 	bl	8003e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69d9      	ldr	r1, [r3, #28]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	021a      	lsls	r2, r3, #8
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	61da      	str	r2, [r3, #28]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
      break;
 8003a74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a40      	ldr	r2, [pc, #256]	; (8003b9c <TIM_Base_SetConfig+0x114>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d00f      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a3d      	ldr	r2, [pc, #244]	; (8003ba0 <TIM_Base_SetConfig+0x118>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3c      	ldr	r2, [pc, #240]	; (8003ba4 <TIM_Base_SetConfig+0x11c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <TIM_Base_SetConfig+0x120>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3a      	ldr	r2, [pc, #232]	; (8003bac <TIM_Base_SetConfig+0x124>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2f      	ldr	r2, [pc, #188]	; (8003b9c <TIM_Base_SetConfig+0x114>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02b      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d027      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2c      	ldr	r2, [pc, #176]	; (8003ba0 <TIM_Base_SetConfig+0x118>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d023      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	; (8003ba4 <TIM_Base_SetConfig+0x11c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01f      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <TIM_Base_SetConfig+0x120>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01b      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a29      	ldr	r2, [pc, #164]	; (8003bac <TIM_Base_SetConfig+0x124>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d017      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <TIM_Base_SetConfig+0x128>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00f      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a26      	ldr	r2, [pc, #152]	; (8003bb8 <TIM_Base_SetConfig+0x130>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a25      	ldr	r2, [pc, #148]	; (8003bbc <TIM_Base_SetConfig+0x134>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <TIM_Base_SetConfig+0x138>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <TIM_Base_SetConfig+0x13c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d108      	bne.n	8003b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <TIM_Base_SetConfig+0x114>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <TIM_Base_SetConfig+0x124>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d103      	bne.n	8003b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	615a      	str	r2, [r3, #20]
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40010400 	.word	0x40010400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800
 8003bbc:	40001800 	.word	0x40001800
 8003bc0:	40001c00 	.word	0x40001c00
 8003bc4:	40002000 	.word	0x40002000

08003bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f023 0201 	bic.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f023 0302 	bic.w	r3, r3, #2
 8003c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <TIM_OC1_SetConfig+0xd8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_OC1_SetConfig+0x64>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <TIM_OC1_SetConfig+0xdc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10c      	bne.n	8003c46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0308 	bic.w	r3, r3, #8
 8003c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <TIM_OC1_SetConfig+0xd8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_OC1_SetConfig+0x8e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <TIM_OC1_SetConfig+0xdc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d111      	bne.n	8003c7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	621a      	str	r2, [r3, #32]
}
 8003c94:	bf00      	nop
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f023 0210 	bic.w	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0320 	bic.w	r3, r3, #32
 8003cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <TIM_OC2_SetConfig+0xe4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_OC2_SetConfig+0x68>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <TIM_OC2_SetConfig+0xe8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d10d      	bne.n	8003d2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <TIM_OC2_SetConfig+0xe4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC2_SetConfig+0x94>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <TIM_OC2_SetConfig+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d113      	bne.n	8003d64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40010400 	.word	0x40010400

08003d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <TIM_OC3_SetConfig+0xe0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC3_SetConfig+0x66>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <TIM_OC3_SetConfig+0xe4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10d      	bne.n	8003e16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <TIM_OC3_SetConfig+0xe0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_OC3_SetConfig+0x92>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <TIM_OC3_SetConfig+0xe4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d113      	bne.n	8003e4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40010400 	.word	0x40010400

08003e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	031b      	lsls	r3, r3, #12
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <TIM_OC4_SetConfig+0xa4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_OC4_SetConfig+0x68>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <TIM_OC4_SetConfig+0xa8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d109      	bne.n	8003ef8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	019b      	lsls	r3, r3, #6
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40010400 	.word	0x40010400

08003f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e05a      	b.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a21      	ldr	r2, [pc, #132]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8c:	d01d      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a15      	ldr	r2, [pc, #84]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40010400 	.word	0x40010400
 8004018:	40014000 	.word	0x40014000
 800401c:	40001800 	.word	0x40001800

08004020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e03f      	b.n	80040b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fadc 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	; 0x24
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f929 	bl	80042bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b08a      	sub	sp, #40	; 0x28
 80040be:	af02      	add	r7, sp, #8
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d17c      	bne.n	80041d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_Transmit+0x2c>
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e075      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Transmit+0x3e>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e06e      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	; 0x21
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410e:	f7fd fbc3 	bl	8001898 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d108      	bne.n	800413c <HAL_UART_Transmit+0x82>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e003      	b.n	8004144 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800414c:	e02a      	b.n	80041a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f840 	bl	80041de <UART_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e036      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800417c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	3302      	adds	r3, #2
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e007      	b.n	8004196 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	3301      	adds	r3, #1
 8004194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1cf      	bne.n	800414e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2140      	movs	r1, #64	; 0x40
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f810 	bl	80041de <UART_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e006      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b090      	sub	sp, #64	; 0x40
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ee:	e050      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d04c      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0x30>
 80041fe:	f7fd fb4b 	bl	8001898 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800420a:	429a      	cmp	r2, r3
 800420c:	d241      	bcs.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800422e:	637a      	str	r2, [r7, #52]	; 0x34
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e5      	bne.n	800420e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	63bb      	str	r3, [r7, #56]	; 0x38
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004262:	623a      	str	r2, [r7, #32]
 8004264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	69f9      	ldr	r1, [r7, #28]
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e5      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00f      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	429a      	cmp	r2, r3
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d09f      	beq.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3740      	adds	r7, #64	; 0x40
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b0c0      	sub	sp, #256	; 0x100
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	68d9      	ldr	r1, [r3, #12]
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	ea40 0301 	orr.w	r3, r0, r1
 80042e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004314:	f021 010c 	bic.w	r1, r1, #12
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004336:	6999      	ldr	r1, [r3, #24]
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	ea40 0301 	orr.w	r3, r0, r1
 8004342:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b8f      	ldr	r3, [pc, #572]	; (8004588 <UART_SetConfig+0x2cc>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d005      	beq.n	800435c <UART_SetConfig+0xa0>
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b8d      	ldr	r3, [pc, #564]	; (800458c <UART_SetConfig+0x2d0>)
 8004358:	429a      	cmp	r2, r3
 800435a:	d104      	bne.n	8004366 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe fe26 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 8004360:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004364:	e003      	b.n	800436e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004366:	f7fe fe0d 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 800436a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004378:	f040 810c 	bne.w	8004594 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800437c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004386:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800438a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	1891      	adds	r1, r2, r2
 8004394:	65b9      	str	r1, [r7, #88]	; 0x58
 8004396:	415b      	adcs	r3, r3
 8004398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800439e:	4621      	mov	r1, r4
 80043a0:	eb12 0801 	adds.w	r8, r2, r1
 80043a4:	4629      	mov	r1, r5
 80043a6:	eb43 0901 	adc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043cc:	462b      	mov	r3, r5
 80043ce:	eb49 0303 	adc.w	r3, r9, r3
 80043d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043ea:	460b      	mov	r3, r1
 80043ec:	18db      	adds	r3, r3, r3
 80043ee:	653b      	str	r3, [r7, #80]	; 0x50
 80043f0:	4613      	mov	r3, r2
 80043f2:	eb42 0303 	adc.w	r3, r2, r3
 80043f6:	657b      	str	r3, [r7, #84]	; 0x54
 80043f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004400:	f7fc fa94 	bl	800092c <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b61      	ldr	r3, [pc, #388]	; (8004590 <UART_SetConfig+0x2d4>)
 800440a:	fba3 2302 	umull	r2, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	011c      	lsls	r4, r3, #4
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800441c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004420:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	1891      	adds	r1, r2, r2
 800442a:	64b9      	str	r1, [r7, #72]	; 0x48
 800442c:	415b      	adcs	r3, r3
 800442e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004434:	4641      	mov	r1, r8
 8004436:	eb12 0a01 	adds.w	sl, r2, r1
 800443a:	4649      	mov	r1, r9
 800443c:	eb43 0b01 	adc.w	fp, r3, r1
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800444c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004454:	4692      	mov	sl, r2
 8004456:	469b      	mov	fp, r3
 8004458:	4643      	mov	r3, r8
 800445a:	eb1a 0303 	adds.w	r3, sl, r3
 800445e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004462:	464b      	mov	r3, r9
 8004464:	eb4b 0303 	adc.w	r3, fp, r3
 8004468:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004478:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800447c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004480:	460b      	mov	r3, r1
 8004482:	18db      	adds	r3, r3, r3
 8004484:	643b      	str	r3, [r7, #64]	; 0x40
 8004486:	4613      	mov	r3, r2
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	647b      	str	r3, [r7, #68]	; 0x44
 800448e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004492:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004496:	f7fc fa49 	bl	800092c <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <UART_SetConfig+0x2d4>)
 80044a2:	fba3 2301 	umull	r2, r3, r3, r1
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2264      	movs	r2, #100	; 0x64
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	1acb      	subs	r3, r1, r3
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044b6:	4b36      	ldr	r3, [pc, #216]	; (8004590 <UART_SetConfig+0x2d4>)
 80044b8:	fba3 2302 	umull	r2, r3, r3, r2
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044c4:	441c      	add	r4, r3
 80044c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	63b9      	str	r1, [r7, #56]	; 0x38
 80044e0:	415b      	adcs	r3, r3
 80044e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044e8:	4641      	mov	r1, r8
 80044ea:	1851      	adds	r1, r2, r1
 80044ec:	6339      	str	r1, [r7, #48]	; 0x30
 80044ee:	4649      	mov	r1, r9
 80044f0:	414b      	adcs	r3, r1
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004500:	4659      	mov	r1, fp
 8004502:	00cb      	lsls	r3, r1, #3
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450a:	4651      	mov	r1, sl
 800450c:	00ca      	lsls	r2, r1, #3
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	4603      	mov	r3, r0
 8004514:	4642      	mov	r2, r8
 8004516:	189b      	adds	r3, r3, r2
 8004518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800451c:	464b      	mov	r3, r9
 800451e:	460a      	mov	r2, r1
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004534:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800453c:	460b      	mov	r3, r1
 800453e:	18db      	adds	r3, r3, r3
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
 8004542:	4613      	mov	r3, r2
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800454e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004552:	f7fc f9eb 	bl	800092c <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <UART_SetConfig+0x2d4>)
 800455c:	fba3 1302 	umull	r1, r3, r3, r2
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	2164      	movs	r1, #100	; 0x64
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	3332      	adds	r3, #50	; 0x32
 800456e:	4a08      	ldr	r2, [pc, #32]	; (8004590 <UART_SetConfig+0x2d4>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	f003 0207 	and.w	r2, r3, #7
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4422      	add	r2, r4
 8004582:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004584:	e106      	b.n	8004794 <UART_SetConfig+0x4d8>
 8004586:	bf00      	nop
 8004588:	40011000 	.word	0x40011000
 800458c:	40011400 	.word	0x40011400
 8004590:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004598:	2200      	movs	r2, #0
 800459a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800459e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045a6:	4642      	mov	r2, r8
 80045a8:	464b      	mov	r3, r9
 80045aa:	1891      	adds	r1, r2, r2
 80045ac:	6239      	str	r1, [r7, #32]
 80045ae:	415b      	adcs	r3, r3
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045b6:	4641      	mov	r1, r8
 80045b8:	1854      	adds	r4, r2, r1
 80045ba:	4649      	mov	r1, r9
 80045bc:	eb43 0501 	adc.w	r5, r3, r1
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	00eb      	lsls	r3, r5, #3
 80045ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ce:	00e2      	lsls	r2, r4, #3
 80045d0:	4614      	mov	r4, r2
 80045d2:	461d      	mov	r5, r3
 80045d4:	4643      	mov	r3, r8
 80045d6:	18e3      	adds	r3, r4, r3
 80045d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045dc:	464b      	mov	r3, r9
 80045de:	eb45 0303 	adc.w	r3, r5, r3
 80045e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004602:	4629      	mov	r1, r5
 8004604:	008b      	lsls	r3, r1, #2
 8004606:	4621      	mov	r1, r4
 8004608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460c:	4621      	mov	r1, r4
 800460e:	008a      	lsls	r2, r1, #2
 8004610:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004614:	f7fc f98a 	bl	800092c <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4b60      	ldr	r3, [pc, #384]	; (80047a0 <UART_SetConfig+0x4e4>)
 800461e:	fba3 2302 	umull	r2, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	011c      	lsls	r4, r3, #4
 8004626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004630:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004634:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	1891      	adds	r1, r2, r2
 800463e:	61b9      	str	r1, [r7, #24]
 8004640:	415b      	adcs	r3, r3
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004648:	4641      	mov	r1, r8
 800464a:	1851      	adds	r1, r2, r1
 800464c:	6139      	str	r1, [r7, #16]
 800464e:	4649      	mov	r1, r9
 8004650:	414b      	adcs	r3, r1
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004660:	4659      	mov	r1, fp
 8004662:	00cb      	lsls	r3, r1, #3
 8004664:	4651      	mov	r1, sl
 8004666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466a:	4651      	mov	r1, sl
 800466c:	00ca      	lsls	r2, r1, #3
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	4603      	mov	r3, r0
 8004674:	4642      	mov	r2, r8
 8004676:	189b      	adds	r3, r3, r2
 8004678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800467c:	464b      	mov	r3, r9
 800467e:	460a      	mov	r2, r1
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	67bb      	str	r3, [r7, #120]	; 0x78
 8004692:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046a0:	4649      	mov	r1, r9
 80046a2:	008b      	lsls	r3, r1, #2
 80046a4:	4641      	mov	r1, r8
 80046a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046aa:	4641      	mov	r1, r8
 80046ac:	008a      	lsls	r2, r1, #2
 80046ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046b2:	f7fc f93b 	bl	800092c <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	4b38      	ldr	r3, [pc, #224]	; (80047a0 <UART_SetConfig+0x4e4>)
 80046be:	fba3 2301 	umull	r2, r3, r3, r1
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2264      	movs	r2, #100	; 0x64
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	1acb      	subs	r3, r1, r3
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	3332      	adds	r3, #50	; 0x32
 80046d0:	4a33      	ldr	r2, [pc, #204]	; (80047a0 <UART_SetConfig+0x4e4>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046dc:	441c      	add	r4, r3
 80046de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e2:	2200      	movs	r2, #0
 80046e4:	673b      	str	r3, [r7, #112]	; 0x70
 80046e6:	677a      	str	r2, [r7, #116]	; 0x74
 80046e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046ec:	4642      	mov	r2, r8
 80046ee:	464b      	mov	r3, r9
 80046f0:	1891      	adds	r1, r2, r2
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	415b      	adcs	r3, r3
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046fc:	4641      	mov	r1, r8
 80046fe:	1851      	adds	r1, r2, r1
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	4649      	mov	r1, r9
 8004704:	414b      	adcs	r3, r1
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004714:	4659      	mov	r1, fp
 8004716:	00cb      	lsls	r3, r1, #3
 8004718:	4651      	mov	r1, sl
 800471a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800471e:	4651      	mov	r1, sl
 8004720:	00ca      	lsls	r2, r1, #3
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	4603      	mov	r3, r0
 8004728:	4642      	mov	r2, r8
 800472a:	189b      	adds	r3, r3, r2
 800472c:	66bb      	str	r3, [r7, #104]	; 0x68
 800472e:	464b      	mov	r3, r9
 8004730:	460a      	mov	r2, r1
 8004732:	eb42 0303 	adc.w	r3, r2, r3
 8004736:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	663b      	str	r3, [r7, #96]	; 0x60
 8004742:	667a      	str	r2, [r7, #100]	; 0x64
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004750:	4649      	mov	r1, r9
 8004752:	008b      	lsls	r3, r1, #2
 8004754:	4641      	mov	r1, r8
 8004756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800475a:	4641      	mov	r1, r8
 800475c:	008a      	lsls	r2, r1, #2
 800475e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004762:	f7fc f8e3 	bl	800092c <__aeabi_uldivmod>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <UART_SetConfig+0x4e4>)
 800476c:	fba3 1302 	umull	r1, r3, r3, r2
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	2164      	movs	r1, #100	; 0x64
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	3332      	adds	r3, #50	; 0x32
 800477e:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <UART_SetConfig+0x4e4>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4422      	add	r2, r4
 8004792:	609a      	str	r2, [r3, #8]
}
 8004794:	bf00      	nop
 8004796:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a0:	51eb851f 	.word	0x51eb851f

080047a4 <sbrk_aligned>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	4e0e      	ldr	r6, [pc, #56]	; (80047e0 <sbrk_aligned+0x3c>)
 80047a8:	460c      	mov	r4, r1
 80047aa:	6831      	ldr	r1, [r6, #0]
 80047ac:	4605      	mov	r5, r0
 80047ae:	b911      	cbnz	r1, 80047b6 <sbrk_aligned+0x12>
 80047b0:	f000 f8cc 	bl	800494c <_sbrk_r>
 80047b4:	6030      	str	r0, [r6, #0]
 80047b6:	4621      	mov	r1, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 f8c7 	bl	800494c <_sbrk_r>
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	d00a      	beq.n	80047d8 <sbrk_aligned+0x34>
 80047c2:	1cc4      	adds	r4, r0, #3
 80047c4:	f024 0403 	bic.w	r4, r4, #3
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d007      	beq.n	80047dc <sbrk_aligned+0x38>
 80047cc:	1a21      	subs	r1, r4, r0
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f8bc 	bl	800494c <_sbrk_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d101      	bne.n	80047dc <sbrk_aligned+0x38>
 80047d8:	f04f 34ff 	mov.w	r4, #4294967295
 80047dc:	4620      	mov	r0, r4
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	20000164 	.word	0x20000164

080047e4 <_malloc_r>:
 80047e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e8:	1ccd      	adds	r5, r1, #3
 80047ea:	f025 0503 	bic.w	r5, r5, #3
 80047ee:	3508      	adds	r5, #8
 80047f0:	2d0c      	cmp	r5, #12
 80047f2:	bf38      	it	cc
 80047f4:	250c      	movcc	r5, #12
 80047f6:	2d00      	cmp	r5, #0
 80047f8:	4607      	mov	r7, r0
 80047fa:	db01      	blt.n	8004800 <_malloc_r+0x1c>
 80047fc:	42a9      	cmp	r1, r5
 80047fe:	d905      	bls.n	800480c <_malloc_r+0x28>
 8004800:	230c      	movs	r3, #12
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	2600      	movs	r6, #0
 8004806:	4630      	mov	r0, r6
 8004808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800480c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80048e0 <_malloc_r+0xfc>
 8004810:	f000 f868 	bl	80048e4 <__malloc_lock>
 8004814:	f8d8 3000 	ldr.w	r3, [r8]
 8004818:	461c      	mov	r4, r3
 800481a:	bb5c      	cbnz	r4, 8004874 <_malloc_r+0x90>
 800481c:	4629      	mov	r1, r5
 800481e:	4638      	mov	r0, r7
 8004820:	f7ff ffc0 	bl	80047a4 <sbrk_aligned>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	4604      	mov	r4, r0
 8004828:	d155      	bne.n	80048d6 <_malloc_r+0xf2>
 800482a:	f8d8 4000 	ldr.w	r4, [r8]
 800482e:	4626      	mov	r6, r4
 8004830:	2e00      	cmp	r6, #0
 8004832:	d145      	bne.n	80048c0 <_malloc_r+0xdc>
 8004834:	2c00      	cmp	r4, #0
 8004836:	d048      	beq.n	80048ca <_malloc_r+0xe6>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	4631      	mov	r1, r6
 800483c:	4638      	mov	r0, r7
 800483e:	eb04 0903 	add.w	r9, r4, r3
 8004842:	f000 f883 	bl	800494c <_sbrk_r>
 8004846:	4581      	cmp	r9, r0
 8004848:	d13f      	bne.n	80048ca <_malloc_r+0xe6>
 800484a:	6821      	ldr	r1, [r4, #0]
 800484c:	1a6d      	subs	r5, r5, r1
 800484e:	4629      	mov	r1, r5
 8004850:	4638      	mov	r0, r7
 8004852:	f7ff ffa7 	bl	80047a4 <sbrk_aligned>
 8004856:	3001      	adds	r0, #1
 8004858:	d037      	beq.n	80048ca <_malloc_r+0xe6>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	442b      	add	r3, r5
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	f8d8 3000 	ldr.w	r3, [r8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d038      	beq.n	80048da <_malloc_r+0xf6>
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	42a2      	cmp	r2, r4
 800486c:	d12b      	bne.n	80048c6 <_malloc_r+0xe2>
 800486e:	2200      	movs	r2, #0
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	e00f      	b.n	8004894 <_malloc_r+0xb0>
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	1b52      	subs	r2, r2, r5
 8004878:	d41f      	bmi.n	80048ba <_malloc_r+0xd6>
 800487a:	2a0b      	cmp	r2, #11
 800487c:	d917      	bls.n	80048ae <_malloc_r+0xca>
 800487e:	1961      	adds	r1, r4, r5
 8004880:	42a3      	cmp	r3, r4
 8004882:	6025      	str	r5, [r4, #0]
 8004884:	bf18      	it	ne
 8004886:	6059      	strne	r1, [r3, #4]
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	bf08      	it	eq
 800488c:	f8c8 1000 	streq.w	r1, [r8]
 8004890:	5162      	str	r2, [r4, r5]
 8004892:	604b      	str	r3, [r1, #4]
 8004894:	4638      	mov	r0, r7
 8004896:	f104 060b 	add.w	r6, r4, #11
 800489a:	f000 f829 	bl	80048f0 <__malloc_unlock>
 800489e:	f026 0607 	bic.w	r6, r6, #7
 80048a2:	1d23      	adds	r3, r4, #4
 80048a4:	1af2      	subs	r2, r6, r3
 80048a6:	d0ae      	beq.n	8004806 <_malloc_r+0x22>
 80048a8:	1b9b      	subs	r3, r3, r6
 80048aa:	50a3      	str	r3, [r4, r2]
 80048ac:	e7ab      	b.n	8004806 <_malloc_r+0x22>
 80048ae:	42a3      	cmp	r3, r4
 80048b0:	6862      	ldr	r2, [r4, #4]
 80048b2:	d1dd      	bne.n	8004870 <_malloc_r+0x8c>
 80048b4:	f8c8 2000 	str.w	r2, [r8]
 80048b8:	e7ec      	b.n	8004894 <_malloc_r+0xb0>
 80048ba:	4623      	mov	r3, r4
 80048bc:	6864      	ldr	r4, [r4, #4]
 80048be:	e7ac      	b.n	800481a <_malloc_r+0x36>
 80048c0:	4634      	mov	r4, r6
 80048c2:	6876      	ldr	r6, [r6, #4]
 80048c4:	e7b4      	b.n	8004830 <_malloc_r+0x4c>
 80048c6:	4613      	mov	r3, r2
 80048c8:	e7cc      	b.n	8004864 <_malloc_r+0x80>
 80048ca:	230c      	movs	r3, #12
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4638      	mov	r0, r7
 80048d0:	f000 f80e 	bl	80048f0 <__malloc_unlock>
 80048d4:	e797      	b.n	8004806 <_malloc_r+0x22>
 80048d6:	6025      	str	r5, [r4, #0]
 80048d8:	e7dc      	b.n	8004894 <_malloc_r+0xb0>
 80048da:	605b      	str	r3, [r3, #4]
 80048dc:	deff      	udf	#255	; 0xff
 80048de:	bf00      	nop
 80048e0:	20000160 	.word	0x20000160

080048e4 <__malloc_lock>:
 80048e4:	4801      	ldr	r0, [pc, #4]	; (80048ec <__malloc_lock+0x8>)
 80048e6:	f000 b86b 	b.w	80049c0 <__retarget_lock_acquire_recursive>
 80048ea:	bf00      	nop
 80048ec:	200002a4 	.word	0x200002a4

080048f0 <__malloc_unlock>:
 80048f0:	4801      	ldr	r0, [pc, #4]	; (80048f8 <__malloc_unlock+0x8>)
 80048f2:	f000 b866 	b.w	80049c2 <__retarget_lock_release_recursive>
 80048f6:	bf00      	nop
 80048f8:	200002a4 	.word	0x200002a4

080048fc <siprintf>:
 80048fc:	b40e      	push	{r1, r2, r3}
 80048fe:	b500      	push	{lr}
 8004900:	b09c      	sub	sp, #112	; 0x70
 8004902:	ab1d      	add	r3, sp, #116	; 0x74
 8004904:	9002      	str	r0, [sp, #8]
 8004906:	9006      	str	r0, [sp, #24]
 8004908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800490c:	4809      	ldr	r0, [pc, #36]	; (8004934 <siprintf+0x38>)
 800490e:	9107      	str	r1, [sp, #28]
 8004910:	9104      	str	r1, [sp, #16]
 8004912:	4909      	ldr	r1, [pc, #36]	; (8004938 <siprintf+0x3c>)
 8004914:	f853 2b04 	ldr.w	r2, [r3], #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	6800      	ldr	r0, [r0, #0]
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	a902      	add	r1, sp, #8
 8004920:	f000 f904 	bl	8004b2c <_svfiprintf_r>
 8004924:	9b02      	ldr	r3, [sp, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	b01c      	add	sp, #112	; 0x70
 800492c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004930:	b003      	add	sp, #12
 8004932:	4770      	bx	lr
 8004934:	20000058 	.word	0x20000058
 8004938:	ffff0208 	.word	0xffff0208

0800493c <memset>:
 800493c:	4402      	add	r2, r0
 800493e:	4603      	mov	r3, r0
 8004940:	4293      	cmp	r3, r2
 8004942:	d100      	bne.n	8004946 <memset+0xa>
 8004944:	4770      	bx	lr
 8004946:	f803 1b01 	strb.w	r1, [r3], #1
 800494a:	e7f9      	b.n	8004940 <memset+0x4>

0800494c <_sbrk_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d06      	ldr	r5, [pc, #24]	; (8004968 <_sbrk_r+0x1c>)
 8004950:	2300      	movs	r3, #0
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	f7fc fec6 	bl	80016e8 <_sbrk>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_sbrk_r+0x1a>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_sbrk_r+0x1a>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	200002a0 	.word	0x200002a0

0800496c <__errno>:
 800496c:	4b01      	ldr	r3, [pc, #4]	; (8004974 <__errno+0x8>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000058 	.word	0x20000058

08004978 <__libc_init_array>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4d0d      	ldr	r5, [pc, #52]	; (80049b0 <__libc_init_array+0x38>)
 800497c:	4c0d      	ldr	r4, [pc, #52]	; (80049b4 <__libc_init_array+0x3c>)
 800497e:	1b64      	subs	r4, r4, r5
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	2600      	movs	r6, #0
 8004984:	42a6      	cmp	r6, r4
 8004986:	d109      	bne.n	800499c <__libc_init_array+0x24>
 8004988:	4d0b      	ldr	r5, [pc, #44]	; (80049b8 <__libc_init_array+0x40>)
 800498a:	4c0c      	ldr	r4, [pc, #48]	; (80049bc <__libc_init_array+0x44>)
 800498c:	f000 fd2c 	bl	80053e8 <_init>
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	2600      	movs	r6, #0
 8004996:	42a6      	cmp	r6, r4
 8004998:	d105      	bne.n	80049a6 <__libc_init_array+0x2e>
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a0:	4798      	blx	r3
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7ee      	b.n	8004984 <__libc_init_array+0xc>
 80049a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049aa:	4798      	blx	r3
 80049ac:	3601      	adds	r6, #1
 80049ae:	e7f2      	b.n	8004996 <__libc_init_array+0x1e>
 80049b0:	080054a4 	.word	0x080054a4
 80049b4:	080054a4 	.word	0x080054a4
 80049b8:	080054a4 	.word	0x080054a4
 80049bc:	080054a8 	.word	0x080054a8

080049c0 <__retarget_lock_acquire_recursive>:
 80049c0:	4770      	bx	lr

080049c2 <__retarget_lock_release_recursive>:
 80049c2:	4770      	bx	lr

080049c4 <memcpy>:
 80049c4:	440a      	add	r2, r1
 80049c6:	4291      	cmp	r1, r2
 80049c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80049cc:	d100      	bne.n	80049d0 <memcpy+0xc>
 80049ce:	4770      	bx	lr
 80049d0:	b510      	push	{r4, lr}
 80049d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049da:	4291      	cmp	r1, r2
 80049dc:	d1f9      	bne.n	80049d2 <memcpy+0xe>
 80049de:	bd10      	pop	{r4, pc}

080049e0 <_free_r>:
 80049e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049e2:	2900      	cmp	r1, #0
 80049e4:	d044      	beq.n	8004a70 <_free_r+0x90>
 80049e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ea:	9001      	str	r0, [sp, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f1a1 0404 	sub.w	r4, r1, #4
 80049f2:	bfb8      	it	lt
 80049f4:	18e4      	addlt	r4, r4, r3
 80049f6:	f7ff ff75 	bl	80048e4 <__malloc_lock>
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <_free_r+0x94>)
 80049fc:	9801      	ldr	r0, [sp, #4]
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	b933      	cbnz	r3, 8004a10 <_free_r+0x30>
 8004a02:	6063      	str	r3, [r4, #4]
 8004a04:	6014      	str	r4, [r2, #0]
 8004a06:	b003      	add	sp, #12
 8004a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a0c:	f7ff bf70 	b.w	80048f0 <__malloc_unlock>
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d908      	bls.n	8004a26 <_free_r+0x46>
 8004a14:	6825      	ldr	r5, [r4, #0]
 8004a16:	1961      	adds	r1, r4, r5
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	bf01      	itttt	eq
 8004a1c:	6819      	ldreq	r1, [r3, #0]
 8004a1e:	685b      	ldreq	r3, [r3, #4]
 8004a20:	1949      	addeq	r1, r1, r5
 8004a22:	6021      	streq	r1, [r4, #0]
 8004a24:	e7ed      	b.n	8004a02 <_free_r+0x22>
 8004a26:	461a      	mov	r2, r3
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b10b      	cbz	r3, 8004a30 <_free_r+0x50>
 8004a2c:	42a3      	cmp	r3, r4
 8004a2e:	d9fa      	bls.n	8004a26 <_free_r+0x46>
 8004a30:	6811      	ldr	r1, [r2, #0]
 8004a32:	1855      	adds	r5, r2, r1
 8004a34:	42a5      	cmp	r5, r4
 8004a36:	d10b      	bne.n	8004a50 <_free_r+0x70>
 8004a38:	6824      	ldr	r4, [r4, #0]
 8004a3a:	4421      	add	r1, r4
 8004a3c:	1854      	adds	r4, r2, r1
 8004a3e:	42a3      	cmp	r3, r4
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	d1e0      	bne.n	8004a06 <_free_r+0x26>
 8004a44:	681c      	ldr	r4, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	6053      	str	r3, [r2, #4]
 8004a4a:	440c      	add	r4, r1
 8004a4c:	6014      	str	r4, [r2, #0]
 8004a4e:	e7da      	b.n	8004a06 <_free_r+0x26>
 8004a50:	d902      	bls.n	8004a58 <_free_r+0x78>
 8004a52:	230c      	movs	r3, #12
 8004a54:	6003      	str	r3, [r0, #0]
 8004a56:	e7d6      	b.n	8004a06 <_free_r+0x26>
 8004a58:	6825      	ldr	r5, [r4, #0]
 8004a5a:	1961      	adds	r1, r4, r5
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	bf04      	itt	eq
 8004a60:	6819      	ldreq	r1, [r3, #0]
 8004a62:	685b      	ldreq	r3, [r3, #4]
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	bf04      	itt	eq
 8004a68:	1949      	addeq	r1, r1, r5
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	6054      	str	r4, [r2, #4]
 8004a6e:	e7ca      	b.n	8004a06 <_free_r+0x26>
 8004a70:	b003      	add	sp, #12
 8004a72:	bd30      	pop	{r4, r5, pc}
 8004a74:	20000160 	.word	0x20000160

08004a78 <__ssputs_r>:
 8004a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7c:	688e      	ldr	r6, [r1, #8]
 8004a7e:	461f      	mov	r7, r3
 8004a80:	42be      	cmp	r6, r7
 8004a82:	680b      	ldr	r3, [r1, #0]
 8004a84:	4682      	mov	sl, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	4690      	mov	r8, r2
 8004a8a:	d82c      	bhi.n	8004ae6 <__ssputs_r+0x6e>
 8004a8c:	898a      	ldrh	r2, [r1, #12]
 8004a8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a92:	d026      	beq.n	8004ae2 <__ssputs_r+0x6a>
 8004a94:	6965      	ldr	r5, [r4, #20]
 8004a96:	6909      	ldr	r1, [r1, #16]
 8004a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a9c:	eba3 0901 	sub.w	r9, r3, r1
 8004aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aa4:	1c7b      	adds	r3, r7, #1
 8004aa6:	444b      	add	r3, r9
 8004aa8:	106d      	asrs	r5, r5, #1
 8004aaa:	429d      	cmp	r5, r3
 8004aac:	bf38      	it	cc
 8004aae:	461d      	movcc	r5, r3
 8004ab0:	0553      	lsls	r3, r2, #21
 8004ab2:	d527      	bpl.n	8004b04 <__ssputs_r+0x8c>
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	f7ff fe95 	bl	80047e4 <_malloc_r>
 8004aba:	4606      	mov	r6, r0
 8004abc:	b360      	cbz	r0, 8004b18 <__ssputs_r+0xa0>
 8004abe:	6921      	ldr	r1, [r4, #16]
 8004ac0:	464a      	mov	r2, r9
 8004ac2:	f7ff ff7f 	bl	80049c4 <memcpy>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	6126      	str	r6, [r4, #16]
 8004ad4:	6165      	str	r5, [r4, #20]
 8004ad6:	444e      	add	r6, r9
 8004ad8:	eba5 0509 	sub.w	r5, r5, r9
 8004adc:	6026      	str	r6, [r4, #0]
 8004ade:	60a5      	str	r5, [r4, #8]
 8004ae0:	463e      	mov	r6, r7
 8004ae2:	42be      	cmp	r6, r7
 8004ae4:	d900      	bls.n	8004ae8 <__ssputs_r+0x70>
 8004ae6:	463e      	mov	r6, r7
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	4632      	mov	r2, r6
 8004aec:	4641      	mov	r1, r8
 8004aee:	f000 faab 	bl	8005048 <memmove>
 8004af2:	68a3      	ldr	r3, [r4, #8]
 8004af4:	1b9b      	subs	r3, r3, r6
 8004af6:	60a3      	str	r3, [r4, #8]
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	4433      	add	r3, r6
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	2000      	movs	r0, #0
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b04:	462a      	mov	r2, r5
 8004b06:	f000 fab9 	bl	800507c <_realloc_r>
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d1e0      	bne.n	8004ad2 <__ssputs_r+0x5a>
 8004b10:	6921      	ldr	r1, [r4, #16]
 8004b12:	4650      	mov	r0, sl
 8004b14:	f7ff ff64 	bl	80049e0 <_free_r>
 8004b18:	230c      	movs	r3, #12
 8004b1a:	f8ca 3000 	str.w	r3, [sl]
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2a:	e7e9      	b.n	8004b00 <__ssputs_r+0x88>

08004b2c <_svfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	4698      	mov	r8, r3
 8004b32:	898b      	ldrh	r3, [r1, #12]
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	b09d      	sub	sp, #116	; 0x74
 8004b38:	4607      	mov	r7, r0
 8004b3a:	460d      	mov	r5, r1
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	d50e      	bpl.n	8004b5e <_svfiprintf_r+0x32>
 8004b40:	690b      	ldr	r3, [r1, #16]
 8004b42:	b963      	cbnz	r3, 8004b5e <_svfiprintf_r+0x32>
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	f7ff fe4d 	bl	80047e4 <_malloc_r>
 8004b4a:	6028      	str	r0, [r5, #0]
 8004b4c:	6128      	str	r0, [r5, #16]
 8004b4e:	b920      	cbnz	r0, 8004b5a <_svfiprintf_r+0x2e>
 8004b50:	230c      	movs	r3, #12
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	e0d0      	b.n	8004cfc <_svfiprintf_r+0x1d0>
 8004b5a:	2340      	movs	r3, #64	; 0x40
 8004b5c:	616b      	str	r3, [r5, #20]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9309      	str	r3, [sp, #36]	; 0x24
 8004b62:	2320      	movs	r3, #32
 8004b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b6c:	2330      	movs	r3, #48	; 0x30
 8004b6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d14 <_svfiprintf_r+0x1e8>
 8004b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b76:	f04f 0901 	mov.w	r9, #1
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b82:	b10a      	cbz	r2, 8004b88 <_svfiprintf_r+0x5c>
 8004b84:	2a25      	cmp	r2, #37	; 0x25
 8004b86:	d1f9      	bne.n	8004b7c <_svfiprintf_r+0x50>
 8004b88:	ebba 0b04 	subs.w	fp, sl, r4
 8004b8c:	d00b      	beq.n	8004ba6 <_svfiprintf_r+0x7a>
 8004b8e:	465b      	mov	r3, fp
 8004b90:	4622      	mov	r2, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff ff6f 	bl	8004a78 <__ssputs_r>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f000 80a9 	beq.w	8004cf2 <_svfiprintf_r+0x1c6>
 8004ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba2:	445a      	add	r2, fp
 8004ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80a1 	beq.w	8004cf2 <_svfiprintf_r+0x1c6>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bba:	f10a 0a01 	add.w	sl, sl, #1
 8004bbe:	9304      	str	r3, [sp, #16]
 8004bc0:	9307      	str	r3, [sp, #28]
 8004bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc8:	4654      	mov	r4, sl
 8004bca:	2205      	movs	r2, #5
 8004bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd0:	4850      	ldr	r0, [pc, #320]	; (8004d14 <_svfiprintf_r+0x1e8>)
 8004bd2:	f7fb fb25 	bl	8000220 <memchr>
 8004bd6:	9a04      	ldr	r2, [sp, #16]
 8004bd8:	b9d8      	cbnz	r0, 8004c12 <_svfiprintf_r+0xe6>
 8004bda:	06d0      	lsls	r0, r2, #27
 8004bdc:	bf44      	itt	mi
 8004bde:	2320      	movmi	r3, #32
 8004be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be4:	0711      	lsls	r1, r2, #28
 8004be6:	bf44      	itt	mi
 8004be8:	232b      	movmi	r3, #43	; 0x2b
 8004bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf4:	d015      	beq.n	8004c22 <_svfiprintf_r+0xf6>
 8004bf6:	9a07      	ldr	r2, [sp, #28]
 8004bf8:	4654      	mov	r4, sl
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f04f 0c0a 	mov.w	ip, #10
 8004c00:	4621      	mov	r1, r4
 8004c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c06:	3b30      	subs	r3, #48	; 0x30
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	d94d      	bls.n	8004ca8 <_svfiprintf_r+0x17c>
 8004c0c:	b1b0      	cbz	r0, 8004c3c <_svfiprintf_r+0x110>
 8004c0e:	9207      	str	r2, [sp, #28]
 8004c10:	e014      	b.n	8004c3c <_svfiprintf_r+0x110>
 8004c12:	eba0 0308 	sub.w	r3, r0, r8
 8004c16:	fa09 f303 	lsl.w	r3, r9, r3
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	9304      	str	r3, [sp, #16]
 8004c1e:	46a2      	mov	sl, r4
 8004c20:	e7d2      	b.n	8004bc8 <_svfiprintf_r+0x9c>
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	1d19      	adds	r1, r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	9103      	str	r1, [sp, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bfbb      	ittet	lt
 8004c2e:	425b      	neglt	r3, r3
 8004c30:	f042 0202 	orrlt.w	r2, r2, #2
 8004c34:	9307      	strge	r3, [sp, #28]
 8004c36:	9307      	strlt	r3, [sp, #28]
 8004c38:	bfb8      	it	lt
 8004c3a:	9204      	strlt	r2, [sp, #16]
 8004c3c:	7823      	ldrb	r3, [r4, #0]
 8004c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c40:	d10c      	bne.n	8004c5c <_svfiprintf_r+0x130>
 8004c42:	7863      	ldrb	r3, [r4, #1]
 8004c44:	2b2a      	cmp	r3, #42	; 0x2a
 8004c46:	d134      	bne.n	8004cb2 <_svfiprintf_r+0x186>
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	9203      	str	r2, [sp, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bfb8      	it	lt
 8004c54:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c58:	3402      	adds	r4, #2
 8004c5a:	9305      	str	r3, [sp, #20]
 8004c5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004d24 <_svfiprintf_r+0x1f8>
 8004c60:	7821      	ldrb	r1, [r4, #0]
 8004c62:	2203      	movs	r2, #3
 8004c64:	4650      	mov	r0, sl
 8004c66:	f7fb fadb 	bl	8000220 <memchr>
 8004c6a:	b138      	cbz	r0, 8004c7c <_svfiprintf_r+0x150>
 8004c6c:	9b04      	ldr	r3, [sp, #16]
 8004c6e:	eba0 000a 	sub.w	r0, r0, sl
 8004c72:	2240      	movs	r2, #64	; 0x40
 8004c74:	4082      	lsls	r2, r0
 8004c76:	4313      	orrs	r3, r2
 8004c78:	3401      	adds	r4, #1
 8004c7a:	9304      	str	r3, [sp, #16]
 8004c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c80:	4825      	ldr	r0, [pc, #148]	; (8004d18 <_svfiprintf_r+0x1ec>)
 8004c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c86:	2206      	movs	r2, #6
 8004c88:	f7fb faca 	bl	8000220 <memchr>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d038      	beq.n	8004d02 <_svfiprintf_r+0x1d6>
 8004c90:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <_svfiprintf_r+0x1f0>)
 8004c92:	bb1b      	cbnz	r3, 8004cdc <_svfiprintf_r+0x1b0>
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	3307      	adds	r3, #7
 8004c98:	f023 0307 	bic.w	r3, r3, #7
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	9303      	str	r3, [sp, #12]
 8004ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca2:	4433      	add	r3, r6
 8004ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca6:	e768      	b.n	8004b7a <_svfiprintf_r+0x4e>
 8004ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cac:	460c      	mov	r4, r1
 8004cae:	2001      	movs	r0, #1
 8004cb0:	e7a6      	b.n	8004c00 <_svfiprintf_r+0xd4>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	3401      	adds	r4, #1
 8004cb6:	9305      	str	r3, [sp, #20]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f04f 0c0a 	mov.w	ip, #10
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc4:	3a30      	subs	r2, #48	; 0x30
 8004cc6:	2a09      	cmp	r2, #9
 8004cc8:	d903      	bls.n	8004cd2 <_svfiprintf_r+0x1a6>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0c6      	beq.n	8004c5c <_svfiprintf_r+0x130>
 8004cce:	9105      	str	r1, [sp, #20]
 8004cd0:	e7c4      	b.n	8004c5c <_svfiprintf_r+0x130>
 8004cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e7f0      	b.n	8004cbe <_svfiprintf_r+0x192>
 8004cdc:	ab03      	add	r3, sp, #12
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <_svfiprintf_r+0x1f4>)
 8004ce4:	a904      	add	r1, sp, #16
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	f3af 8000 	nop.w
 8004cec:	1c42      	adds	r2, r0, #1
 8004cee:	4606      	mov	r6, r0
 8004cf0:	d1d6      	bne.n	8004ca0 <_svfiprintf_r+0x174>
 8004cf2:	89ab      	ldrh	r3, [r5, #12]
 8004cf4:	065b      	lsls	r3, r3, #25
 8004cf6:	f53f af2d 	bmi.w	8004b54 <_svfiprintf_r+0x28>
 8004cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cfc:	b01d      	add	sp, #116	; 0x74
 8004cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d02:	ab03      	add	r3, sp, #12
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	462a      	mov	r2, r5
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <_svfiprintf_r+0x1f4>)
 8004d0a:	a904      	add	r1, sp, #16
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f000 f879 	bl	8004e04 <_printf_i>
 8004d12:	e7eb      	b.n	8004cec <_svfiprintf_r+0x1c0>
 8004d14:	08005430 	.word	0x08005430
 8004d18:	0800543a 	.word	0x0800543a
 8004d1c:	00000000 	.word	0x00000000
 8004d20:	08004a79 	.word	0x08004a79
 8004d24:	08005436 	.word	0x08005436

08004d28 <_printf_common>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	4699      	mov	r9, r3
 8004d30:	688a      	ldr	r2, [r1, #8]
 8004d32:	690b      	ldr	r3, [r1, #16]
 8004d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	bfb8      	it	lt
 8004d3c:	4613      	movlt	r3, r2
 8004d3e:	6033      	str	r3, [r6, #0]
 8004d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d44:	4607      	mov	r7, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b10a      	cbz	r2, 8004d4e <_printf_common+0x26>
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	0699      	lsls	r1, r3, #26
 8004d52:	bf42      	ittt	mi
 8004d54:	6833      	ldrmi	r3, [r6, #0]
 8004d56:	3302      	addmi	r3, #2
 8004d58:	6033      	strmi	r3, [r6, #0]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	f015 0506 	ands.w	r5, r5, #6
 8004d60:	d106      	bne.n	8004d70 <_printf_common+0x48>
 8004d62:	f104 0a19 	add.w	sl, r4, #25
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	6832      	ldr	r2, [r6, #0]
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	dc26      	bgt.n	8004dbe <_printf_common+0x96>
 8004d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d74:	1e13      	subs	r3, r2, #0
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	bf18      	it	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	0692      	lsls	r2, r2, #26
 8004d7e:	d42b      	bmi.n	8004dd8 <_printf_common+0xb0>
 8004d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d84:	4649      	mov	r1, r9
 8004d86:	4638      	mov	r0, r7
 8004d88:	47c0      	blx	r8
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d01e      	beq.n	8004dcc <_printf_common+0xa4>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	6922      	ldr	r2, [r4, #16]
 8004d92:	f003 0306 	and.w	r3, r3, #6
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	bf02      	ittt	eq
 8004d9a:	68e5      	ldreq	r5, [r4, #12]
 8004d9c:	6833      	ldreq	r3, [r6, #0]
 8004d9e:	1aed      	subeq	r5, r5, r3
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	bf0c      	ite	eq
 8004da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da8:	2500      	movne	r5, #0
 8004daa:	4293      	cmp	r3, r2
 8004dac:	bfc4      	itt	gt
 8004dae:	1a9b      	subgt	r3, r3, r2
 8004db0:	18ed      	addgt	r5, r5, r3
 8004db2:	2600      	movs	r6, #0
 8004db4:	341a      	adds	r4, #26
 8004db6:	42b5      	cmp	r5, r6
 8004db8:	d11a      	bne.n	8004df0 <_printf_common+0xc8>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e008      	b.n	8004dd0 <_printf_common+0xa8>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d103      	bne.n	8004dd4 <_printf_common+0xac>
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	e7c6      	b.n	8004d66 <_printf_common+0x3e>
 8004dd8:	18e1      	adds	r1, r4, r3
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	2030      	movs	r0, #48	; 0x30
 8004dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de2:	4422      	add	r2, r4
 8004de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dec:	3302      	adds	r3, #2
 8004dee:	e7c7      	b.n	8004d80 <_printf_common+0x58>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4622      	mov	r2, r4
 8004df4:	4649      	mov	r1, r9
 8004df6:	4638      	mov	r0, r7
 8004df8:	47c0      	blx	r8
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d0e6      	beq.n	8004dcc <_printf_common+0xa4>
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7d9      	b.n	8004db6 <_printf_common+0x8e>
	...

08004e04 <_printf_i>:
 8004e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	7e0f      	ldrb	r7, [r1, #24]
 8004e0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e0c:	2f78      	cmp	r7, #120	; 0x78
 8004e0e:	4691      	mov	r9, r2
 8004e10:	4680      	mov	r8, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	469a      	mov	sl, r3
 8004e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e1a:	d807      	bhi.n	8004e2c <_printf_i+0x28>
 8004e1c:	2f62      	cmp	r7, #98	; 0x62
 8004e1e:	d80a      	bhi.n	8004e36 <_printf_i+0x32>
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	f000 80d4 	beq.w	8004fce <_printf_i+0x1ca>
 8004e26:	2f58      	cmp	r7, #88	; 0x58
 8004e28:	f000 80c0 	beq.w	8004fac <_printf_i+0x1a8>
 8004e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e34:	e03a      	b.n	8004eac <_printf_i+0xa8>
 8004e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e3a:	2b15      	cmp	r3, #21
 8004e3c:	d8f6      	bhi.n	8004e2c <_printf_i+0x28>
 8004e3e:	a101      	add	r1, pc, #4	; (adr r1, 8004e44 <_printf_i+0x40>)
 8004e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	08004e2d 	.word	0x08004e2d
 8004e50:	08004e2d 	.word	0x08004e2d
 8004e54:	08004e2d 	.word	0x08004e2d
 8004e58:	08004e2d 	.word	0x08004e2d
 8004e5c:	08004eb1 	.word	0x08004eb1
 8004e60:	08004e2d 	.word	0x08004e2d
 8004e64:	08004e2d 	.word	0x08004e2d
 8004e68:	08004e2d 	.word	0x08004e2d
 8004e6c:	08004e2d 	.word	0x08004e2d
 8004e70:	08004fb5 	.word	0x08004fb5
 8004e74:	08004edd 	.word	0x08004edd
 8004e78:	08004f6f 	.word	0x08004f6f
 8004e7c:	08004e2d 	.word	0x08004e2d
 8004e80:	08004e2d 	.word	0x08004e2d
 8004e84:	08004fd7 	.word	0x08004fd7
 8004e88:	08004e2d 	.word	0x08004e2d
 8004e8c:	08004edd 	.word	0x08004edd
 8004e90:	08004e2d 	.word	0x08004e2d
 8004e94:	08004e2d 	.word	0x08004e2d
 8004e98:	08004f77 	.word	0x08004f77
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	602a      	str	r2, [r5, #0]
 8004ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eac:	2301      	movs	r3, #1
 8004eae:	e09f      	b.n	8004ff0 <_printf_i+0x1ec>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	682b      	ldr	r3, [r5, #0]
 8004eb4:	0607      	lsls	r7, r0, #24
 8004eb6:	f103 0104 	add.w	r1, r3, #4
 8004eba:	6029      	str	r1, [r5, #0]
 8004ebc:	d501      	bpl.n	8004ec2 <_printf_i+0xbe>
 8004ebe:	681e      	ldr	r6, [r3, #0]
 8004ec0:	e003      	b.n	8004eca <_printf_i+0xc6>
 8004ec2:	0646      	lsls	r6, r0, #25
 8004ec4:	d5fb      	bpl.n	8004ebe <_printf_i+0xba>
 8004ec6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	da03      	bge.n	8004ed6 <_printf_i+0xd2>
 8004ece:	232d      	movs	r3, #45	; 0x2d
 8004ed0:	4276      	negs	r6, r6
 8004ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed6:	485a      	ldr	r0, [pc, #360]	; (8005040 <_printf_i+0x23c>)
 8004ed8:	230a      	movs	r3, #10
 8004eda:	e012      	b.n	8004f02 <_printf_i+0xfe>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	1d19      	adds	r1, r3, #4
 8004ee2:	6029      	str	r1, [r5, #0]
 8004ee4:	0605      	lsls	r5, r0, #24
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0xe8>
 8004ee8:	681e      	ldr	r6, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0xee>
 8004eec:	0641      	lsls	r1, r0, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0xe4>
 8004ef0:	881e      	ldrh	r6, [r3, #0]
 8004ef2:	4853      	ldr	r0, [pc, #332]	; (8005040 <_printf_i+0x23c>)
 8004ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2308      	moveq	r3, #8
 8004efa:	230a      	movne	r3, #10
 8004efc:	2100      	movs	r1, #0
 8004efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f02:	6865      	ldr	r5, [r4, #4]
 8004f04:	60a5      	str	r5, [r4, #8]
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	bfa2      	ittt	ge
 8004f0a:	6821      	ldrge	r1, [r4, #0]
 8004f0c:	f021 0104 	bicge.w	r1, r1, #4
 8004f10:	6021      	strge	r1, [r4, #0]
 8004f12:	b90e      	cbnz	r6, 8004f18 <_printf_i+0x114>
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	d04b      	beq.n	8004fb0 <_printf_i+0x1ac>
 8004f18:	4615      	mov	r5, r2
 8004f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f22:	5dc7      	ldrb	r7, [r0, r7]
 8004f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f28:	4637      	mov	r7, r6
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	460e      	mov	r6, r1
 8004f2e:	d9f4      	bls.n	8004f1a <_printf_i+0x116>
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d10b      	bne.n	8004f4c <_printf_i+0x148>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	07de      	lsls	r6, r3, #31
 8004f38:	d508      	bpl.n	8004f4c <_printf_i+0x148>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	6861      	ldr	r1, [r4, #4]
 8004f3e:	4299      	cmp	r1, r3
 8004f40:	bfde      	ittt	le
 8004f42:	2330      	movle	r3, #48	; 0x30
 8004f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f4c:	1b52      	subs	r2, r2, r5
 8004f4e:	6122      	str	r2, [r4, #16]
 8004f50:	f8cd a000 	str.w	sl, [sp]
 8004f54:	464b      	mov	r3, r9
 8004f56:	aa03      	add	r2, sp, #12
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7ff fee4 	bl	8004d28 <_printf_common>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d14a      	bne.n	8004ffa <_printf_i+0x1f6>
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	b004      	add	sp, #16
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	f043 0320 	orr.w	r3, r3, #32
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	4833      	ldr	r0, [pc, #204]	; (8005044 <_printf_i+0x240>)
 8004f78:	2778      	movs	r7, #120	; 0x78
 8004f7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	6829      	ldr	r1, [r5, #0]
 8004f82:	061f      	lsls	r7, r3, #24
 8004f84:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f88:	d402      	bmi.n	8004f90 <_printf_i+0x18c>
 8004f8a:	065f      	lsls	r7, r3, #25
 8004f8c:	bf48      	it	mi
 8004f8e:	b2b6      	uxthmi	r6, r6
 8004f90:	07df      	lsls	r7, r3, #31
 8004f92:	bf48      	it	mi
 8004f94:	f043 0320 	orrmi.w	r3, r3, #32
 8004f98:	6029      	str	r1, [r5, #0]
 8004f9a:	bf48      	it	mi
 8004f9c:	6023      	strmi	r3, [r4, #0]
 8004f9e:	b91e      	cbnz	r6, 8004fa8 <_printf_i+0x1a4>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	f023 0320 	bic.w	r3, r3, #32
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	2310      	movs	r3, #16
 8004faa:	e7a7      	b.n	8004efc <_printf_i+0xf8>
 8004fac:	4824      	ldr	r0, [pc, #144]	; (8005040 <_printf_i+0x23c>)
 8004fae:	e7e4      	b.n	8004f7a <_printf_i+0x176>
 8004fb0:	4615      	mov	r5, r2
 8004fb2:	e7bd      	b.n	8004f30 <_printf_i+0x12c>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	6826      	ldr	r6, [r4, #0]
 8004fb8:	6961      	ldr	r1, [r4, #20]
 8004fba:	1d18      	adds	r0, r3, #4
 8004fbc:	6028      	str	r0, [r5, #0]
 8004fbe:	0635      	lsls	r5, r6, #24
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	d501      	bpl.n	8004fc8 <_printf_i+0x1c4>
 8004fc4:	6019      	str	r1, [r3, #0]
 8004fc6:	e002      	b.n	8004fce <_printf_i+0x1ca>
 8004fc8:	0670      	lsls	r0, r6, #25
 8004fca:	d5fb      	bpl.n	8004fc4 <_printf_i+0x1c0>
 8004fcc:	8019      	strh	r1, [r3, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6123      	str	r3, [r4, #16]
 8004fd2:	4615      	mov	r5, r2
 8004fd4:	e7bc      	b.n	8004f50 <_printf_i+0x14c>
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	1d1a      	adds	r2, r3, #4
 8004fda:	602a      	str	r2, [r5, #0]
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	6862      	ldr	r2, [r4, #4]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f7fb f91c 	bl	8000220 <memchr>
 8004fe8:	b108      	cbz	r0, 8004fee <_printf_i+0x1ea>
 8004fea:	1b40      	subs	r0, r0, r5
 8004fec:	6060      	str	r0, [r4, #4]
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff8:	e7aa      	b.n	8004f50 <_printf_i+0x14c>
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	4649      	mov	r1, r9
 8005000:	4640      	mov	r0, r8
 8005002:	47d0      	blx	sl
 8005004:	3001      	adds	r0, #1
 8005006:	d0ad      	beq.n	8004f64 <_printf_i+0x160>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	079b      	lsls	r3, r3, #30
 800500c:	d413      	bmi.n	8005036 <_printf_i+0x232>
 800500e:	68e0      	ldr	r0, [r4, #12]
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	4298      	cmp	r0, r3
 8005014:	bfb8      	it	lt
 8005016:	4618      	movlt	r0, r3
 8005018:	e7a6      	b.n	8004f68 <_printf_i+0x164>
 800501a:	2301      	movs	r3, #1
 800501c:	4632      	mov	r2, r6
 800501e:	4649      	mov	r1, r9
 8005020:	4640      	mov	r0, r8
 8005022:	47d0      	blx	sl
 8005024:	3001      	adds	r0, #1
 8005026:	d09d      	beq.n	8004f64 <_printf_i+0x160>
 8005028:	3501      	adds	r5, #1
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	9903      	ldr	r1, [sp, #12]
 800502e:	1a5b      	subs	r3, r3, r1
 8005030:	42ab      	cmp	r3, r5
 8005032:	dcf2      	bgt.n	800501a <_printf_i+0x216>
 8005034:	e7eb      	b.n	800500e <_printf_i+0x20a>
 8005036:	2500      	movs	r5, #0
 8005038:	f104 0619 	add.w	r6, r4, #25
 800503c:	e7f5      	b.n	800502a <_printf_i+0x226>
 800503e:	bf00      	nop
 8005040:	08005441 	.word	0x08005441
 8005044:	08005452 	.word	0x08005452

08005048 <memmove>:
 8005048:	4288      	cmp	r0, r1
 800504a:	b510      	push	{r4, lr}
 800504c:	eb01 0402 	add.w	r4, r1, r2
 8005050:	d902      	bls.n	8005058 <memmove+0x10>
 8005052:	4284      	cmp	r4, r0
 8005054:	4623      	mov	r3, r4
 8005056:	d807      	bhi.n	8005068 <memmove+0x20>
 8005058:	1e43      	subs	r3, r0, #1
 800505a:	42a1      	cmp	r1, r4
 800505c:	d008      	beq.n	8005070 <memmove+0x28>
 800505e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005066:	e7f8      	b.n	800505a <memmove+0x12>
 8005068:	4402      	add	r2, r0
 800506a:	4601      	mov	r1, r0
 800506c:	428a      	cmp	r2, r1
 800506e:	d100      	bne.n	8005072 <memmove+0x2a>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800507a:	e7f7      	b.n	800506c <memmove+0x24>

0800507c <_realloc_r>:
 800507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005080:	4680      	mov	r8, r0
 8005082:	4614      	mov	r4, r2
 8005084:	460e      	mov	r6, r1
 8005086:	b921      	cbnz	r1, 8005092 <_realloc_r+0x16>
 8005088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800508c:	4611      	mov	r1, r2
 800508e:	f7ff bba9 	b.w	80047e4 <_malloc_r>
 8005092:	b92a      	cbnz	r2, 80050a0 <_realloc_r+0x24>
 8005094:	f7ff fca4 	bl	80049e0 <_free_r>
 8005098:	4625      	mov	r5, r4
 800509a:	4628      	mov	r0, r5
 800509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a0:	f000 f81b 	bl	80050da <_malloc_usable_size_r>
 80050a4:	4284      	cmp	r4, r0
 80050a6:	4607      	mov	r7, r0
 80050a8:	d802      	bhi.n	80050b0 <_realloc_r+0x34>
 80050aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050ae:	d812      	bhi.n	80050d6 <_realloc_r+0x5a>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4640      	mov	r0, r8
 80050b4:	f7ff fb96 	bl	80047e4 <_malloc_r>
 80050b8:	4605      	mov	r5, r0
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d0ed      	beq.n	800509a <_realloc_r+0x1e>
 80050be:	42bc      	cmp	r4, r7
 80050c0:	4622      	mov	r2, r4
 80050c2:	4631      	mov	r1, r6
 80050c4:	bf28      	it	cs
 80050c6:	463a      	movcs	r2, r7
 80050c8:	f7ff fc7c 	bl	80049c4 <memcpy>
 80050cc:	4631      	mov	r1, r6
 80050ce:	4640      	mov	r0, r8
 80050d0:	f7ff fc86 	bl	80049e0 <_free_r>
 80050d4:	e7e1      	b.n	800509a <_realloc_r+0x1e>
 80050d6:	4635      	mov	r5, r6
 80050d8:	e7df      	b.n	800509a <_realloc_r+0x1e>

080050da <_malloc_usable_size_r>:
 80050da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050de:	1f18      	subs	r0, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bfbc      	itt	lt
 80050e4:	580b      	ldrlt	r3, [r1, r0]
 80050e6:	18c0      	addlt	r0, r0, r3
 80050e8:	4770      	bx	lr

080050ea <atan2f>:
 80050ea:	f000 b801 	b.w	80050f0 <__ieee754_atan2f>
	...

080050f0 <__ieee754_atan2f>:
 80050f0:	ee10 2a90 	vmov	r2, s1
 80050f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80050f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80050fc:	b510      	push	{r4, lr}
 80050fe:	eef0 7a40 	vmov.f32	s15, s0
 8005102:	dc06      	bgt.n	8005112 <__ieee754_atan2f+0x22>
 8005104:	ee10 0a10 	vmov	r0, s0
 8005108:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800510c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005110:	dd04      	ble.n	800511c <__ieee754_atan2f+0x2c>
 8005112:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005116:	eeb0 0a67 	vmov.f32	s0, s15
 800511a:	bd10      	pop	{r4, pc}
 800511c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005120:	d103      	bne.n	800512a <__ieee754_atan2f+0x3a>
 8005122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005126:	f000 b883 	b.w	8005230 <atanf>
 800512a:	1794      	asrs	r4, r2, #30
 800512c:	f004 0402 	and.w	r4, r4, #2
 8005130:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005134:	b943      	cbnz	r3, 8005148 <__ieee754_atan2f+0x58>
 8005136:	2c02      	cmp	r4, #2
 8005138:	d05e      	beq.n	80051f8 <__ieee754_atan2f+0x108>
 800513a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800520c <__ieee754_atan2f+0x11c>
 800513e:	2c03      	cmp	r4, #3
 8005140:	bf08      	it	eq
 8005142:	eef0 7a47 	vmoveq.f32	s15, s14
 8005146:	e7e6      	b.n	8005116 <__ieee754_atan2f+0x26>
 8005148:	b941      	cbnz	r1, 800515c <__ieee754_atan2f+0x6c>
 800514a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005210 <__ieee754_atan2f+0x120>
 800514e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005214 <__ieee754_atan2f+0x124>
 8005152:	2800      	cmp	r0, #0
 8005154:	bfb8      	it	lt
 8005156:	eef0 7a47 	vmovlt.f32	s15, s14
 800515a:	e7dc      	b.n	8005116 <__ieee754_atan2f+0x26>
 800515c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005160:	d110      	bne.n	8005184 <__ieee754_atan2f+0x94>
 8005162:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005166:	f104 34ff 	add.w	r4, r4, #4294967295
 800516a:	d107      	bne.n	800517c <__ieee754_atan2f+0x8c>
 800516c:	2c02      	cmp	r4, #2
 800516e:	d846      	bhi.n	80051fe <__ieee754_atan2f+0x10e>
 8005170:	4b29      	ldr	r3, [pc, #164]	; (8005218 <__ieee754_atan2f+0x128>)
 8005172:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005176:	edd3 7a00 	vldr	s15, [r3]
 800517a:	e7cc      	b.n	8005116 <__ieee754_atan2f+0x26>
 800517c:	2c02      	cmp	r4, #2
 800517e:	d841      	bhi.n	8005204 <__ieee754_atan2f+0x114>
 8005180:	4b26      	ldr	r3, [pc, #152]	; (800521c <__ieee754_atan2f+0x12c>)
 8005182:	e7f6      	b.n	8005172 <__ieee754_atan2f+0x82>
 8005184:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005188:	d0df      	beq.n	800514a <__ieee754_atan2f+0x5a>
 800518a:	1a5b      	subs	r3, r3, r1
 800518c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8005190:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8005194:	da1a      	bge.n	80051cc <__ieee754_atan2f+0xdc>
 8005196:	2a00      	cmp	r2, #0
 8005198:	da01      	bge.n	800519e <__ieee754_atan2f+0xae>
 800519a:	313c      	adds	r1, #60	; 0x3c
 800519c:	db19      	blt.n	80051d2 <__ieee754_atan2f+0xe2>
 800519e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80051a2:	f000 f919 	bl	80053d8 <fabsf>
 80051a6:	f000 f843 	bl	8005230 <atanf>
 80051aa:	eef0 7a40 	vmov.f32	s15, s0
 80051ae:	2c01      	cmp	r4, #1
 80051b0:	d012      	beq.n	80051d8 <__ieee754_atan2f+0xe8>
 80051b2:	2c02      	cmp	r4, #2
 80051b4:	d017      	beq.n	80051e6 <__ieee754_atan2f+0xf6>
 80051b6:	2c00      	cmp	r4, #0
 80051b8:	d0ad      	beq.n	8005116 <__ieee754_atan2f+0x26>
 80051ba:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005220 <__ieee754_atan2f+0x130>
 80051be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051c2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005224 <__ieee754_atan2f+0x134>
 80051c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051ca:	e7a4      	b.n	8005116 <__ieee754_atan2f+0x26>
 80051cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8005210 <__ieee754_atan2f+0x120>
 80051d0:	e7ed      	b.n	80051ae <__ieee754_atan2f+0xbe>
 80051d2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005228 <__ieee754_atan2f+0x138>
 80051d6:	e7ea      	b.n	80051ae <__ieee754_atan2f+0xbe>
 80051d8:	ee17 3a90 	vmov	r3, s15
 80051dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	e797      	b.n	8005116 <__ieee754_atan2f+0x26>
 80051e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005220 <__ieee754_atan2f+0x130>
 80051ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005224 <__ieee754_atan2f+0x134>
 80051f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051f6:	e78e      	b.n	8005116 <__ieee754_atan2f+0x26>
 80051f8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8005224 <__ieee754_atan2f+0x134>
 80051fc:	e78b      	b.n	8005116 <__ieee754_atan2f+0x26>
 80051fe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800522c <__ieee754_atan2f+0x13c>
 8005202:	e788      	b.n	8005116 <__ieee754_atan2f+0x26>
 8005204:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005228 <__ieee754_atan2f+0x138>
 8005208:	e785      	b.n	8005116 <__ieee754_atan2f+0x26>
 800520a:	bf00      	nop
 800520c:	c0490fdb 	.word	0xc0490fdb
 8005210:	3fc90fdb 	.word	0x3fc90fdb
 8005214:	bfc90fdb 	.word	0xbfc90fdb
 8005218:	08005464 	.word	0x08005464
 800521c:	08005470 	.word	0x08005470
 8005220:	33bbbd2e 	.word	0x33bbbd2e
 8005224:	40490fdb 	.word	0x40490fdb
 8005228:	00000000 	.word	0x00000000
 800522c:	3f490fdb 	.word	0x3f490fdb

08005230 <atanf>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	ee10 5a10 	vmov	r5, s0
 8005236:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800523a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800523e:	eef0 7a40 	vmov.f32	s15, s0
 8005242:	db10      	blt.n	8005266 <atanf+0x36>
 8005244:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005248:	dd04      	ble.n	8005254 <atanf+0x24>
 800524a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800524e:	eeb0 0a67 	vmov.f32	s0, s15
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800538c <atanf+0x15c>
 8005258:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005390 <atanf+0x160>
 800525c:	2d00      	cmp	r5, #0
 800525e:	bfd8      	it	le
 8005260:	eef0 7a47 	vmovle.f32	s15, s14
 8005264:	e7f3      	b.n	800524e <atanf+0x1e>
 8005266:	4b4b      	ldr	r3, [pc, #300]	; (8005394 <atanf+0x164>)
 8005268:	429c      	cmp	r4, r3
 800526a:	dc10      	bgt.n	800528e <atanf+0x5e>
 800526c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005270:	da0a      	bge.n	8005288 <atanf+0x58>
 8005272:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005398 <atanf+0x168>
 8005276:	ee30 7a07 	vadd.f32	s14, s0, s14
 800527a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	dce2      	bgt.n	800524e <atanf+0x1e>
 8005288:	f04f 33ff 	mov.w	r3, #4294967295
 800528c:	e013      	b.n	80052b6 <atanf+0x86>
 800528e:	f000 f8a3 	bl	80053d8 <fabsf>
 8005292:	4b42      	ldr	r3, [pc, #264]	; (800539c <atanf+0x16c>)
 8005294:	429c      	cmp	r4, r3
 8005296:	dc4f      	bgt.n	8005338 <atanf+0x108>
 8005298:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800529c:	429c      	cmp	r4, r3
 800529e:	dc41      	bgt.n	8005324 <atanf+0xf4>
 80052a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80052a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80052a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80052ac:	2300      	movs	r3, #0
 80052ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80052bc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80053a0 <atanf+0x170>
 80052c0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80053a4 <atanf+0x174>
 80052c4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80053a8 <atanf+0x178>
 80052c8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80052cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80052d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80053ac <atanf+0x17c>
 80052d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80052d8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80053b0 <atanf+0x180>
 80052dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80052e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80053b4 <atanf+0x184>
 80052e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80052e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80053b8 <atanf+0x188>
 80052ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 80052f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80053bc <atanf+0x18c>
 80052f4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80052f8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80053c0 <atanf+0x190>
 80052fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005300:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80053c4 <atanf+0x194>
 8005304:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005308:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80053c8 <atanf+0x198>
 800530c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005310:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005314:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800531c:	d121      	bne.n	8005362 <atanf+0x132>
 800531e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005322:	e794      	b.n	800524e <atanf+0x1e>
 8005324:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005328:	ee30 7a67 	vsub.f32	s14, s0, s15
 800532c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005330:	2301      	movs	r3, #1
 8005332:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005336:	e7be      	b.n	80052b6 <atanf+0x86>
 8005338:	4b24      	ldr	r3, [pc, #144]	; (80053cc <atanf+0x19c>)
 800533a:	429c      	cmp	r4, r3
 800533c:	dc0b      	bgt.n	8005356 <atanf+0x126>
 800533e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005346:	eea0 7a27 	vfma.f32	s14, s0, s15
 800534a:	2302      	movs	r3, #2
 800534c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005354:	e7af      	b.n	80052b6 <atanf+0x86>
 8005356:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800535a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800535e:	2303      	movs	r3, #3
 8005360:	e7a9      	b.n	80052b6 <atanf+0x86>
 8005362:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <atanf+0x1a0>)
 8005364:	491b      	ldr	r1, [pc, #108]	; (80053d4 <atanf+0x1a4>)
 8005366:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800536a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800536e:	edd3 6a00 	vldr	s13, [r3]
 8005372:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005376:	2d00      	cmp	r5, #0
 8005378:	ee37 7a67 	vsub.f32	s14, s14, s15
 800537c:	edd2 7a00 	vldr	s15, [r2]
 8005380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005384:	bfb8      	it	lt
 8005386:	eef1 7a67 	vneglt.f32	s15, s15
 800538a:	e760      	b.n	800524e <atanf+0x1e>
 800538c:	3fc90fdb 	.word	0x3fc90fdb
 8005390:	bfc90fdb 	.word	0xbfc90fdb
 8005394:	3edfffff 	.word	0x3edfffff
 8005398:	7149f2ca 	.word	0x7149f2ca
 800539c:	3f97ffff 	.word	0x3f97ffff
 80053a0:	3c8569d7 	.word	0x3c8569d7
 80053a4:	3d4bda59 	.word	0x3d4bda59
 80053a8:	bd6ef16b 	.word	0xbd6ef16b
 80053ac:	3d886b35 	.word	0x3d886b35
 80053b0:	3dba2e6e 	.word	0x3dba2e6e
 80053b4:	3e124925 	.word	0x3e124925
 80053b8:	3eaaaaab 	.word	0x3eaaaaab
 80053bc:	bd15a221 	.word	0xbd15a221
 80053c0:	bd9d8795 	.word	0xbd9d8795
 80053c4:	bde38e38 	.word	0xbde38e38
 80053c8:	be4ccccd 	.word	0xbe4ccccd
 80053cc:	401bffff 	.word	0x401bffff
 80053d0:	0800547c 	.word	0x0800547c
 80053d4:	0800548c 	.word	0x0800548c

080053d8 <fabsf>:
 80053d8:	ee10 3a10 	vmov	r3, s0
 80053dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	ee00 3a10 	vmov	s0, r3
 80053e4:	4770      	bx	lr
	...

080053e8 <_init>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr

080053f4 <_fini>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr
