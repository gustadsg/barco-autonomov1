
Barco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800a080  0800a080  0001a080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e8  0800a5e8  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5f0  0800a5f0  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5f0  0800a5f0  0001a5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5f4  0800a5f4  0001a5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a5f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000200  0800a7f8  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800a7f8  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010270  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021be  00000000  00000000  000304e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  000326a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c74  00000000  00000000  00033668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233eb  00000000  00000000  000342dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013db5  00000000  00000000  000576c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6a16  00000000  00000000  0006b47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e90  00000000  00000000  00141e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00147d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a068 	.word	0x0800a068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800a068 	.word	0x0800a068

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <JDY18_Setup>:
		"ROLE", // JDY18_Command_SetRole
		"BAUD", // JDY18_Command_SetBaudRate
		"IQN" // JDY18_Command_Scan
		};

void JDY18_Setup(UART_HandleTypeDef *handle) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	husart = handle;
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <JDY18_Setup+0x1c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000021c 	.word	0x2000021c

08001050 <JDY18_SendCommand>:

void JDY18_SendCommand(JDY18_CommandPrefix_t commandIndex, char *commandParam) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
	const char *commandPrefix = JDY18_CommandPrefixStrings[commandIndex];
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <JDY18_SendCommand+0xa8>)
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	617b      	str	r3, [r7, #20]
	char *command = "AT+";
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <JDY18_SendCommand+0xac>)
 8001068:	613b      	str	r3, [r7, #16]

	int commandSize = strlen(command) + strlen(commandPrefix)
 800106a:	6938      	ldr	r0, [r7, #16]
 800106c:	f7ff f920 	bl	80002b0 <strlen>
 8001070:	4604      	mov	r4, r0
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff f91c 	bl	80002b0 <strlen>
 8001078:	4603      	mov	r3, r0
 800107a:	441c      	add	r4, r3
			+ strlen(commandParam) + 3;
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	f7ff f917 	bl	80002b0 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	4423      	add	r3, r4
 8001086:	3303      	adds	r3, #3
	int commandSize = strlen(command) + strlen(commandPrefix)
 8001088:	60fb      	str	r3, [r7, #12]
	command = malloc(commandSize);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f003 f833 	bl	80040f8 <malloc>
 8001092:	4603      	mov	r3, r0
 8001094:	613b      	str	r3, [r7, #16]
	memset(command, 0, commandSize);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	461a      	mov	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	6938      	ldr	r0, [r7, #16]
 800109e:	f004 f896 	bl	80051ce <memset>

	strcat(command, "AT+");
 80010a2:	6938      	ldr	r0, [r7, #16]
 80010a4:	f7ff f904 	bl	80002b0 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <JDY18_SendCommand+0xac>)
 80010b2:	6810      	ldr	r0, [r2, #0]
 80010b4:	6018      	str	r0, [r3, #0]
	strcat(command, commandPrefix);
 80010b6:	6979      	ldr	r1, [r7, #20]
 80010b8:	6938      	ldr	r0, [r7, #16]
 80010ba:	f004 f890 	bl	80051de <strcat>
	strcat(command, commandParam);
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	6938      	ldr	r0, [r7, #16]
 80010c2:	f004 f88c 	bl	80051de <strcat>
	strcat(command, "\r\n");
 80010c6:	6938      	ldr	r0, [r7, #16]
 80010c8:	f7ff f8f2 	bl	80002b0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <JDY18_SendCommand+0xb0>)
 80010d6:	8811      	ldrh	r1, [r2, #0]
 80010d8:	7892      	ldrb	r2, [r2, #2]
 80010da:	8019      	strh	r1, [r3, #0]
 80010dc:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(husart, (uint8_t*) command, commandSize, HAL_MAX_DELAY);
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <JDY18_SendCommand+0xb4>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	6939      	ldr	r1, [r7, #16]
 80010ec:	f002 fbed 	bl	80038ca <HAL_UART_Transmit>
}
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	20000000 	.word	0x20000000
 80010fc:	0800a0b4 	.word	0x0800a0b4
 8001100:	0800a0b8 	.word	0x0800a0b8
 8001104:	2000021c 	.word	0x2000021c

08001108 <JDY18_Scan>:
	itoa(baud, baudStr, 10);

	JDY18_SendCommand(JDY18_Command_SetBaudRate, baudStr);
}

void JDY18_Scan(JDY18_Device_t *devices) {
 8001108:	b580      	push	{r7, lr}
 800110a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800110e:	af00      	add	r7, sp, #0
 8001110:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001114:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001118:	6018      	str	r0, [r3, #0]
	char data[JDY18_BUFFER_SZ];
	memset(data, 0, JDY18_BUFFER_SZ);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f004 f852 	bl	80051ce <memset>

	JDY18_SendCommand(JDY18_Command_Scan, "");
 800112a:	4915      	ldr	r1, [pc, #84]	; (8001180 <JDY18_Scan+0x78>)
 800112c:	2006      	movs	r0, #6
 800112e:	f7ff ff8f 	bl	8001050 <JDY18_SendCommand>
	HAL_UART_Receive(husart, (uint8_t*) data, JDY18_BUFFER_SZ, 1000);
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <JDY18_Scan+0x7c>)
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f107 010c 	add.w	r1, r7, #12
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001142:	f002 fc54 	bl	80039ee <HAL_UART_Receive>

	int numDevices = __JDY18_GetDevicesFromScanStr(data, devices,
 8001146:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800114a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800114e:	f107 000c 	add.w	r0, r7, #12
 8001152:	2205      	movs	r2, #5
 8001154:	6819      	ldr	r1, [r3, #0]
 8001156:	f000 f859 	bl	800120c <__JDY18_GetDevicesFromScanStr>
 800115a:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	JDY18_MAX_DEVICES);
	__JDY18_GetDistanceFromRssi(devices, numDevices);
 800115e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001162:	b25a      	sxtb	r2, r3
 8001164:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001168:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800116c:	4611      	mov	r1, r2
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	f000 f80a 	bl	8001188 <__JDY18_GetDistanceFromRssi>
}
 8001174:	bf00      	nop
 8001176:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800a0bc 	.word	0x0800a0bc
 8001184:	2000021c 	.word	0x2000021c

08001188 <__JDY18_GetDistanceFromRssi>:

void __JDY18_GetDistanceFromRssi(JDY18_Device_t *devices, int8_t numDevices) {
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < numDevices; i++) {
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e025      	b.n	80011e6 <__JDY18_GetDistanceFromRssi+0x5e>
		devices[i].distance = pow(10,
				(JDY18_DEFAULT_POWER - devices[i].rssi) / (JDY18_N * 10));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	f06f 0344 	mvn.w	r3, #68	; 0x44
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <__JDY18_GetDistanceFromRssi+0x80>)
 80011ac:	fb82 1203 	smull	r1, r2, r2, r3
 80011b0:	10d2      	asrs	r2, r2, #3
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad3      	subs	r3, r2, r3
		devices[i].distance = pow(10,
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9d4 	bl	8000564 <__aeabi_i2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	ec43 2b11 	vmov	d1, r2, r3
 80011c4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001200 <__JDY18_GetDistanceFromRssi+0x78>
 80011c8:	f008 f814 	bl	80091f4 <pow>
 80011cc:	ec51 0b10 	vmov	r0, r1, d0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	18d4      	adds	r4, r2, r3
 80011d8:	f7ff fd26 	bl	8000c28 <__aeabi_d2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	61e3      	str	r3, [r4, #28]
	for (int i = 0; i < numDevices; i++) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbd4      	blt.n	800119a <__JDY18_GetDistanceFromRssi+0x12>
	}
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
 8001200:	00000000 	.word	0x00000000
 8001204:	40240000 	.word	0x40240000
 8001208:	66666667 	.word	0x66666667

0800120c <__JDY18_GetDevicesFromScanStr>:

int __JDY18_GetDevicesFromScanStr(char *str, JDY18_Device_t *devices,
		int8_t maxDevices) {
 800120c:	b580      	push	{r7, lr}
 800120e:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8001212:	af02      	add	r7, sp, #8
 8001214:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001218:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800121c:	6018      	str	r0, [r3, #0]
 800121e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001222:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8001226:	6019      	str	r1, [r3, #0]
 8001228:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800122c:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 8001230:	701a      	strb	r2, [r3, #0]
	char inputCopy[JDY18_BUFFER_SZ];
	strcpy(inputCopy, str);
 8001232:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001236:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800123a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	4610      	mov	r0, r2
 8001242:	f004 f8d3 	bl	80053ec <strcpy>

	const char *token = strtok(inputCopy, "\r\n");
 8001246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124a:	4945      	ldr	r1, [pc, #276]	; (8001360 <__JDY18_GetDevicesFromScanStr+0x154>)
 800124c:	4618      	mov	r0, r3
 800124e:	f003 ffd5 	bl	80051fc <strtok>
 8001252:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
	int deviceCount = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438

	while (token != NULL) {
 800125c:	e075      	b.n	800134a <__JDY18_GetDevicesFromScanStr+0x13e>
		int lineHasDeviceInfo = strstr(token, "+DEV:") != NULL;
 800125e:	4941      	ldr	r1, [pc, #260]	; (8001364 <__JDY18_GetDevicesFromScanStr+0x158>)
 8001260:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8001264:	f004 f826 	bl	80052b4 <strstr>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
		if (lineHasDeviceInfo) {
 8001278:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800127c:	2b00      	cmp	r3, #0
 800127e:	d05e      	beq.n	800133e <__JDY18_GetDevicesFromScanStr+0x132>
			int id, rssi;
			char name[18];

			char *deviceInfoRegex = "+DEV:%d=%*[^,],%d,%18[^\\r\\n]";
 8001280:	4b39      	ldr	r3, [pc, #228]	; (8001368 <__JDY18_GetDevicesFromScanStr+0x15c>)
 8001282:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430

			if (sscanf(token, deviceInfoRegex, &id, &rssi, name) == 3) {
 8001286:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800128a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	460b      	mov	r3, r1
 8001296:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 800129a:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 800129e:	f003 ff25 	bl	80050ec <siscanf>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d14a      	bne.n	800133e <__JDY18_GetDevicesFromScanStr+0x132>
				if (deviceCount < maxDevices) {
 80012a8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80012ac:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 80012b0:	f993 3000 	ldrsb.w	r3, [r3]
 80012b4:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80012b8:	429a      	cmp	r2, r3
 80012ba:	da40      	bge.n	800133e <__JDY18_GetDevicesFromScanStr+0x132>
					devices[deviceCount].id = id;
 80012bc:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80012c0:	015b      	lsls	r3, r3, #5
 80012c2:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80012c6:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80012d2:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	615a      	str	r2, [r3, #20]
					devices[deviceCount].rssi = rssi;
 80012da:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80012de:	015b      	lsls	r3, r3, #5
 80012e0:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80012e4:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80012f0:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	619a      	str	r2, [r3, #24]

					memset(devices[deviceCount].name, 0, 18);
 80012f8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80012fc:	015b      	lsls	r3, r3, #5
 80012fe:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8001302:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4413      	add	r3, r2
 800130a:	2212      	movs	r2, #18
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f003 ff5d 	bl	80051ce <memset>
					strcpy(devices[deviceCount].name, name);
 8001314:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001318:	015b      	lsls	r3, r3, #5
 800131a:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800131e:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	4413      	add	r3, r2
 8001326:	461a      	mov	r2, r3
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f004 f85c 	bl	80053ec <strcpy>
					deviceCount++;
 8001334:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001338:	3301      	adds	r3, #1
 800133a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
				}
			}
		}
		token = strtok(NULL, "\r\n");
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__JDY18_GetDevicesFromScanStr+0x154>)
 8001340:	2000      	movs	r0, #0
 8001342:	f003 ff5b 	bl	80051fc <strtok>
 8001346:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
	while (token != NULL) {
 800134a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800134e:	2b00      	cmp	r3, #0
 8001350:	d185      	bne.n	800125e <__JDY18_GetDevicesFromScanStr+0x52>
	}

	return deviceCount;
 8001352:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
}
 8001356:	4618      	mov	r0, r3
 8001358:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	0800a0b8 	.word	0x0800a0b8
 8001364:	0800a0c0 	.word	0x0800a0c0
 8001368:	0800a0c8 	.word	0x0800a0c8

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0dc      	sub	sp, #368	; 0x170
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001372:	f000 fcd3 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001376:	f000 f8a9 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137a:	f000 f9e3 	bl	8001744 <MX_GPIO_Init>
  MX_TIM3_Init();
 800137e:	f000 f933 	bl	80015e8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001382:	f000 f903 	bl	800158c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001386:	f000 f989 	bl	800169c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800138a:	f000 f9b1 	bl	80016f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	JDY18_Setup(&huart3);
 800138e:	4844      	ldr	r0, [pc, #272]	; (80014a0 <main+0x134>)
 8001390:	f7ff fe4e 	bl	8001030 <JDY18_Setup>


	SERVO_TimerConfig_t servoPWMConfig;
	servoPWMConfig.handle = htim3;
 8001394:	4a43      	ldr	r2, [pc, #268]	; (80014a4 <main+0x138>)
 8001396:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800139a:	4611      	mov	r1, r2
 800139c:	2248      	movs	r2, #72	; 0x48
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f82c 	bl	80053fc <memcpy>
	servoPWMConfig.channel = TIM_CHANNEL_2;
 80013a4:	2304      	movs	r3, #4
 80013a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	servoPWMConfig.period = SERVO_PERIOD
 80013aa:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80013ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	;
	servoPWMConfig.minDutyCyclePercentage = SERVO_MIN_DUTY_CICLE
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <main+0x13c>)
 80013b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	;
	servoPWMConfig.maxDutyCyclePercentage = SERVO_MAX_DUTY_CICLE
 80013b8:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <main+0x140>)
 80013ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	;

	SERVO_Calibration_t servoCalibration;
	servoCalibration.gain = SERVO_CALIBRATION_GAIN
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <main+0x144>)
 80013c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	;
	servoCalibration.offset = SERVO_CALIBRATION_OFFSET
 80013c4:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <main+0x148>)
 80013c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	;

	SERVO_Config_t servoConfig;
	servoConfig.timerConfig = servoPWMConfig;
 80013ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ce:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80013d2:	2258      	movs	r2, #88	; 0x58
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 f811 	bl	80053fc <memcpy>
	servoConfig.calibration = servoCalibration;
 80013da:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013de:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80013e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e6:	e883 0003 	stmia.w	r3, {r0, r1}
	//Device_t devices[MAX_DEVICES];
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		JDY18_Scan(devices);
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe8b 	bl	8001108 <JDY18_Scan>

		for(int i = 0; i<JDY18_MAX_DEVICES; i++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80013f8:	e04d      	b.n	8001496 <main+0x12a>
			char* msg = "";
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <main+0x14c>)
 80013fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			char* dist = "";
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <main+0x14c>)
 8001402:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

			sprintf(dist, "%f", devices[i].distance);
 8001406:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800140a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 800140e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	4413      	add	r3, r2
 8001416:	331c      	adds	r3, #28
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f8b4 	bl	8000588 <__aeabi_f2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4925      	ldr	r1, [pc, #148]	; (80014bc <main+0x150>)
 8001426:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 800142a:	f003 fe3f 	bl	80050ac <siprintf>

			strcat(msg, devices[i].name);
 800142e:	1d3a      	adds	r2, r7, #4
 8001430:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	4413      	add	r3, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800143e:	f003 fece 	bl	80051de <strcat>
			strcat(msg, ":\t");
 8001442:	2200      	movs	r2, #0
 8001444:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001448:	4413      	add	r3, r2
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <main+0x154>)
 800144c:	8811      	ldrh	r1, [r2, #0]
 800144e:	7892      	ldrb	r2, [r2, #2]
 8001450:	8019      	strh	r1, [r3, #0]
 8001452:	709a      	strb	r2, [r3, #2]
			strcat(msg, dist);
 8001454:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001458:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800145c:	f003 febf 	bl	80051de <strcat>
			strcat(msg, "\n");
 8001460:	2200      	movs	r2, #0
 8001462:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001466:	4413      	add	r3, r2
 8001468:	4916      	ldr	r1, [pc, #88]	; (80014c4 <main+0x158>)
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	8013      	strh	r3, [r2, #0]

			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001472:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8001476:	f7fe ff1b 	bl	80002b0 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8001486:	4810      	ldr	r0, [pc, #64]	; (80014c8 <main+0x15c>)
 8001488:	f002 fa1f 	bl	80038ca <HAL_UART_Transmit>
		for(int i = 0; i<JDY18_MAX_DEVICES; i++) {
 800148c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001490:	3301      	adds	r3, #1
 8001492:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001496:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800149a:	2b04      	cmp	r3, #4
 800149c:	ddad      	ble.n	80013fa <main+0x8e>
		JDY18_Scan(devices);
 800149e:	e7a4      	b.n	80013ea <main+0x7e>
 80014a0:	20000300 	.word	0x20000300
 80014a4:	20000274 	.word	0x20000274
 80014a8:	3d4ccccd 	.word	0x3d4ccccd
 80014ac:	3deb851f 	.word	0x3deb851f
 80014b0:	3fbc28f6 	.word	0x3fbc28f6
 80014b4:	c149999a 	.word	0xc149999a
 80014b8:	0800a0e8 	.word	0x0800a0e8
 80014bc:	0800a0ec 	.word	0x0800a0ec
 80014c0:	0800a0f0 	.word	0x0800a0f0
 80014c4:	0800a0f4 	.word	0x0800a0f4
 80014c8:	200002bc 	.word	0x200002bc

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	; 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	2234      	movs	r2, #52	; 0x34
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fe77 	bl	80051ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <SystemClock_Config+0xb8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <SystemClock_Config+0xb8>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <SystemClock_Config+0xb8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <SystemClock_Config+0xbc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <SystemClock_Config+0xbc>)
 800151a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <SystemClock_Config+0xbc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4618      	mov	r0, r3
 8001542:	f001 faf9 	bl	8002b38 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800154c:	f000 f94a 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	230f      	movs	r3, #15
 8001552:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001558:	23a0      	movs	r3, #160	; 0xa0
 800155a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001560:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001564:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f001 f81f 	bl	80025b0 <HAL_RCC_ClockConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001578:	f000 f934 	bl	80017e4 <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	; 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000

0800158c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C1_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C1_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C1_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C1_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C1_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C1_Init+0x50>)
 80015ca:	f000 fead 	bl	8002328 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 f906 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000220 	.word	0x20000220
 80015e0:	40005400 	.word	0x40005400
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <MX_TIM3_Init+0xac>)
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <MX_TIM3_Init+0xb0>)
 800160e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_TIM3_Init+0xac>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <MX_TIM3_Init+0xac>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <MX_TIM3_Init+0xac>)
 800161e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001622:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_TIM3_Init+0xac>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <MX_TIM3_Init+0xac>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001630:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_TIM3_Init+0xac>)
 8001632:	f001 fd1f 	bl	8003074 <HAL_TIM_PWM_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800163c:	f000 f8d2 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	4619      	mov	r1, r3
 800164e:	4811      	ldr	r0, [pc, #68]	; (8001694 <MX_TIM3_Init+0xac>)
 8001650:	f002 f872 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800165a:	f000 f8c3 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165e:	2360      	movs	r3, #96	; 0x60
 8001660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 94;
 8001662:	235e      	movs	r3, #94	; 0x5e
 8001664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2204      	movs	r2, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM3_Init+0xac>)
 8001676:	f001 fd4d 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001680:	f000 f8b0 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM3_Init+0xac>)
 8001686:	f000 f945 	bl	8001914 <HAL_TIM_MspPostInit>

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000274 	.word	0x20000274
 8001698:	40000400 	.word	0x40000400

0800169c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <MX_USART2_UART_Init+0x50>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016d4:	f002 f8ac 	bl	8003830 <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016de:	f000 f881 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200002bc 	.word	0x200002bc
 80016ec:	40004400 	.word	0x40004400

080016f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_USART3_UART_Init+0x4c>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <MX_USART3_UART_Init+0x50>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_USART3_UART_Init+0x4c>)
 80016fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_USART3_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_USART3_UART_Init+0x4c>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <MX_USART3_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_USART3_UART_Init+0x4c>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MX_USART3_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_USART3_UART_Init+0x4c>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_USART3_UART_Init+0x4c>)
 8001728:	f002 f882 	bl	8003830 <HAL_UART_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001732:	f000 f857 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000300 	.word	0x20000300
 8001740:	40004800 	.word	0x40004800

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_GPIO_Init+0x98>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <MX_GPIO_Init+0x98>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <MX_GPIO_Init+0x98>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_GPIO_Init+0x98>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <MX_GPIO_Init+0x98>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_GPIO_Init+0x98>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_GPIO_Init+0x98>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <MX_GPIO_Init+0x98>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_GPIO_Init+0x98>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2120      	movs	r1, #32
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <MX_GPIO_Init+0x9c>)
 80017b4:	f000 fd9e 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017b8:	2320      	movs	r3, #32
 80017ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4619      	mov	r1, r3
 80017ce:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_GPIO_Init+0x9c>)
 80017d0:	f000 fbfc 	bl	8001fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_MspInit+0x4c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x4c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_I2C_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12c      	bne.n	80018bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800187e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001884:	2312      	movs	r3, #18
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001890:	2304      	movs	r3, #4
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <HAL_I2C_MspInit+0x8c>)
 800189c:	f000 fb96 	bl	8001fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400

080018d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_TIM_PWM_MspInit+0x3c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10d      	bne.n	80018fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_TIM_PWM_MspInit+0x40>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_TIM_PWM_MspInit+0x40>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_TIM_PWM_MspInit+0x40>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40000400 	.word	0x40000400
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <HAL_TIM_MspPostInit+0x68>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d11d      	bne.n	8001972 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_TIM_MspPostInit+0x6c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_TIM_MspPostInit+0x6c>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_TIM_MspPostInit+0x6c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001962:	2302      	movs	r3, #2
 8001964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_TIM_MspPostInit+0x70>)
 800196e:	f000 fb2d 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40000400 	.word	0x40000400
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000

08001988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08c      	sub	sp, #48	; 0x30
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a41      	ldr	r2, [pc, #260]	; (8001aac <HAL_UART_MspInit+0x124>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12c      	bne.n	8001a04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a3f      	ldr	r2, [pc, #252]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e2:	230c      	movs	r3, #12
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f2:	2307      	movs	r3, #7
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <HAL_UART_MspInit+0x12c>)
 80019fe:	f000 fae5 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a02:	e04f      	b.n	8001aa4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2b      	ldr	r2, [pc, #172]	; (8001ab8 <HAL_UART_MspInit+0x130>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d14a      	bne.n	8001aa4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_UART_MspInit+0x128>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a62:	2320      	movs	r3, #32
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a72:	2307      	movs	r3, #7
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480f      	ldr	r0, [pc, #60]	; (8001abc <HAL_UART_MspInit+0x134>)
 8001a7e:	f000 faa5 	bl	8001fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a94:	2307      	movs	r3, #7
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <HAL_UART_MspInit+0x138>)
 8001aa0:	f000 fa94 	bl	8001fcc <HAL_GPIO_Init>
}
 8001aa4:	bf00      	nop
 8001aa6:	3730      	adds	r7, #48	; 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40004400 	.word	0x40004400
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40004800 	.word	0x40004800
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <NMI_Handler+0x4>

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f956 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_kill>:

int _kill(int pid, int sig)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b32:	f003 fc2f 	bl	8005394 <__errno>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2216      	movs	r2, #22
 8001b3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_exit>:

void _exit (int status)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffe7 	bl	8001b28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b5a:	e7fe      	b.n	8001b5a <_exit+0x12>

08001b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e00a      	b.n	8001b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b6e:	f3af 8000 	nop.w
 8001b72:	4601      	mov	r1, r0
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf0      	blt.n	8001b6e <_read+0x12>
  }

  return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e009      	b.n	8001bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf1      	blt.n	8001ba8 <_write+0x12>
  }
  return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f003 fb94 	bl	8005394 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20020000 	.word	0x20020000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	20000344 	.word	0x20000344
 8001ca0:	20000498 	.word	0x20000498

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cce:	490e      	ldr	r1, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce4:	4c0b      	ldr	r4, [pc, #44]	; (8001d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf2:	f7ff ffd7 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f003 fb53 	bl	80053a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff fb37 	bl	800136c <main>
  bx  lr    
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001d0c:	0800a5f8 	.word	0x0800a5f8
  ldr r2, =_sbss
 8001d10:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001d14:	20000498 	.word	0x20000498

08001d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_Init+0x40>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_Init+0x40>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_Init+0x40>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 f90d 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	200f      	movs	r0, #15
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff fd4e 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f917 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 f8ed 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000001c 	.word	0x2000001c
 8001db8:	20000024 	.word	0x20000024
 8001dbc:	20000020 	.word	0x20000020

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000024 	.word	0x20000024
 8001de4:	20000348 	.word	0x20000348

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000348 	.word	0x20000348

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff47 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff5c 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffb0 	bl	8001f20 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e165      	b.n	80022b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8154 	bne.w	80022ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d005      	beq.n	800201e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	2b02      	cmp	r3, #2
 800201c:	d130      	bne.n	8002080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b03      	cmp	r3, #3
 800208a:	d017      	beq.n	80020bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80ae 	beq.w	80022ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <HAL_GPIO_Init+0x300>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a5c      	ldr	r2, [pc, #368]	; (80022cc <HAL_GPIO_Init+0x300>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <HAL_GPIO_Init+0x300>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216e:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_GPIO_Init+0x304>)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4f      	ldr	r2, [pc, #316]	; (80022d4 <HAL_GPIO_Init+0x308>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d025      	beq.n	80021e6 <HAL_GPIO_Init+0x21a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <HAL_GPIO_Init+0x30c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <HAL_GPIO_Init+0x216>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <HAL_GPIO_Init+0x310>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d019      	beq.n	80021de <HAL_GPIO_Init+0x212>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4c      	ldr	r2, [pc, #304]	; (80022e0 <HAL_GPIO_Init+0x314>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_GPIO_Init+0x318>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <HAL_GPIO_Init+0x20a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4a      	ldr	r2, [pc, #296]	; (80022e8 <HAL_GPIO_Init+0x31c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x206>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a49      	ldr	r2, [pc, #292]	; (80022ec <HAL_GPIO_Init+0x320>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_GPIO_Init+0x202>
 80021ca:	2306      	movs	r3, #6
 80021cc:	e00c      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021ce:	2307      	movs	r3, #7
 80021d0:	e00a      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021e6:	2300      	movs	r3, #0
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4093      	lsls	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	4935      	ldr	r1, [pc, #212]	; (80022d0 <HAL_GPIO_Init+0x304>)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002206:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_GPIO_Init+0x324>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222a:	4a31      	ldr	r2, [pc, #196]	; (80022f0 <HAL_GPIO_Init+0x324>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002230:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_GPIO_Init+0x324>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_GPIO_Init+0x324>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_GPIO_Init+0x324>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227e:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_GPIO_Init+0x324>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_GPIO_Init+0x324>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a8:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <HAL_GPIO_Init+0x324>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f ae96 	bls.w	8001fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40021400 	.word	0x40021400
 80022ec:	40021800 	.word	0x40021800
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e12b      	b.n	8002592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fa76 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800237a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800238a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800238c:	f000 fa02 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a81      	ldr	r2, [pc, #516]	; (800259c <HAL_I2C_Init+0x274>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d807      	bhi.n	80023ac <HAL_I2C_Init+0x84>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a80      	ldr	r2, [pc, #512]	; (80025a0 <HAL_I2C_Init+0x278>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	bf94      	ite	ls
 80023a4:	2301      	movls	r3, #1
 80023a6:	2300      	movhi	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e006      	b.n	80023ba <HAL_I2C_Init+0x92>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a7d      	ldr	r2, [pc, #500]	; (80025a4 <HAL_I2C_Init+0x27c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0e7      	b.n	8002592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a78      	ldr	r2, [pc, #480]	; (80025a8 <HAL_I2C_Init+0x280>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9b      	lsrs	r3, r3, #18
 80023cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	; (800259c <HAL_I2C_Init+0x274>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d802      	bhi.n	80023fc <HAL_I2C_Init+0xd4>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	e009      	b.n	8002410 <HAL_I2C_Init+0xe8>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	4a69      	ldr	r2, [pc, #420]	; (80025ac <HAL_I2C_Init+0x284>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	3301      	adds	r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002422:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	495c      	ldr	r1, [pc, #368]	; (800259c <HAL_I2C_Init+0x274>)
 800242c:	428b      	cmp	r3, r1
 800242e:	d819      	bhi.n	8002464 <HAL_I2C_Init+0x13c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e59      	subs	r1, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fbb1 f3f3 	udiv	r3, r1, r3
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002444:	400b      	ands	r3, r1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_I2C_Init+0x138>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e59      	subs	r1, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	e051      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002460:	2304      	movs	r3, #4
 8002462:	e04f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_I2C_Init+0x168>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e012      	b.n	80024b6 <HAL_I2C_Init+0x18e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e58      	subs	r0, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	0099      	lsls	r1, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x196>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e022      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10e      	bne.n	80024e4 <HAL_I2C_Init+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e58      	subs	r0, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002532:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6911      	ldr	r1, [r2, #16]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	000186a0 	.word	0x000186a0
 80025a0:	001e847f 	.word	0x001e847f
 80025a4:	003d08ff 	.word	0x003d08ff
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0cc      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d90c      	bls.n	80025ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b65      	ldr	r3, [pc, #404]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b63      	ldr	r3, [pc, #396]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0b8      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a58      	ldr	r2, [pc, #352]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800260e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800261c:	4b53      	ldr	r3, [pc, #332]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002628:	4b50      	ldr	r3, [pc, #320]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	494d      	ldr	r1, [pc, #308]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d044      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d119      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e07f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d003      	beq.n	800266e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266a:	2b03      	cmp	r3, #3
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b3f      	ldr	r3, [pc, #252]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e067      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b37      	ldr	r3, [pc, #220]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4934      	ldr	r1, [pc, #208]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7ff fba2 	bl	8001de8 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7ff fb9e 	bl	8001de8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e04f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d20c      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e032      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4916      	ldr	r1, [pc, #88]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	490e      	ldr	r1, [pc, #56]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002736:	f000 f855 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	490a      	ldr	r1, [pc, #40]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fb02 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023c00 	.word	0x40023c00
 800276c:	40023800 	.word	0x40023800
 8002770:	0800a104 	.word	0x0800a104
 8002774:	2000001c 	.word	0x2000001c
 8002778:	20000020 	.word	0x20000020

0800277c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCC_GetHCLKFreq+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	2000001c 	.word	0x2000001c

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002798:	f7ff fff0 	bl	800277c <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0a9b      	lsrs	r3, r3, #10
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4903      	ldr	r1, [pc, #12]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	0800a114 	.word	0x0800a114

080027bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027c0:	f7ff ffdc 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0b5b      	lsrs	r3, r3, #13
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4903      	ldr	r1, [pc, #12]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	0800a114 	.word	0x0800a114

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e8:	b0a6      	sub	sp, #152	; 0x98
 80027ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280a:	4bc8      	ldr	r3, [pc, #800]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b0c      	cmp	r3, #12
 8002814:	f200 817e 	bhi.w	8002b14 <HAL_RCC_GetSysClockFreq+0x330>
 8002818:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <HAL_RCC_GetSysClockFreq+0x3c>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002855 	.word	0x08002855
 8002824:	08002b15 	.word	0x08002b15
 8002828:	08002b15 	.word	0x08002b15
 800282c:	08002b15 	.word	0x08002b15
 8002830:	0800285d 	.word	0x0800285d
 8002834:	08002b15 	.word	0x08002b15
 8002838:	08002b15 	.word	0x08002b15
 800283c:	08002b15 	.word	0x08002b15
 8002840:	08002865 	.word	0x08002865
 8002844:	08002b15 	.word	0x08002b15
 8002848:	08002b15 	.word	0x08002b15
 800284c:	08002b15 	.word	0x08002b15
 8002850:	080029cf 	.word	0x080029cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4bb6      	ldr	r3, [pc, #728]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800285a:	e15f      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285c:	4bb5      	ldr	r3, [pc, #724]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 800285e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002862:	e15b      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002864:	4bb1      	ldr	r3, [pc, #708]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002870:	4bae      	ldr	r3, [pc, #696]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d031      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287c:	4bab      	ldr	r3, [pc, #684]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	2200      	movs	r2, #0
 8002884:	66bb      	str	r3, [r7, #104]	; 0x68
 8002886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288e:	663b      	str	r3, [r7, #96]	; 0x60
 8002890:	2300      	movs	r3, #0
 8002892:	667b      	str	r3, [r7, #100]	; 0x64
 8002894:	4ba7      	ldr	r3, [pc, #668]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8002896:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800289a:	462a      	mov	r2, r5
 800289c:	fb03 f202 	mul.w	r2, r3, r2
 80028a0:	2300      	movs	r3, #0
 80028a2:	4621      	mov	r1, r4
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	4aa2      	ldr	r2, [pc, #648]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80028ac:	4621      	mov	r1, r4
 80028ae:	fba1 1202 	umull	r1, r2, r1, r2
 80028b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028b4:	460a      	mov	r2, r1
 80028b6:	67ba      	str	r2, [r7, #120]	; 0x78
 80028b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028ba:	4413      	add	r3, r2
 80028bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c2:	2200      	movs	r2, #0
 80028c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80028c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80028d0:	f7fe f9fa 	bl	8000cc8 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028de:	e064      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	653b      	str	r3, [r7, #80]	; 0x50
 80028ea:	657a      	str	r2, [r7, #84]	; 0x54
 80028ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f4:	2300      	movs	r3, #0
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80028fc:	4622      	mov	r2, r4
 80028fe:	462b      	mov	r3, r5
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0159      	lsls	r1, r3, #5
 800290a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290e:	0150      	lsls	r0, r2, #5
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4621      	mov	r1, r4
 8002916:	1a51      	subs	r1, r2, r1
 8002918:	6139      	str	r1, [r7, #16]
 800291a:	4629      	mov	r1, r5
 800291c:	eb63 0301 	sbc.w	r3, r3, r1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800292e:	4659      	mov	r1, fp
 8002930:	018b      	lsls	r3, r1, #6
 8002932:	4651      	mov	r1, sl
 8002934:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002938:	4651      	mov	r1, sl
 800293a:	018a      	lsls	r2, r1, #6
 800293c:	4651      	mov	r1, sl
 800293e:	ebb2 0801 	subs.w	r8, r2, r1
 8002942:	4659      	mov	r1, fp
 8002944:	eb63 0901 	sbc.w	r9, r3, r1
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002954:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002958:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800295c:	4690      	mov	r8, r2
 800295e:	4699      	mov	r9, r3
 8002960:	4623      	mov	r3, r4
 8002962:	eb18 0303 	adds.w	r3, r8, r3
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	462b      	mov	r3, r5
 800296a:	eb49 0303 	adc.w	r3, r9, r3
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800297c:	4629      	mov	r1, r5
 800297e:	028b      	lsls	r3, r1, #10
 8002980:	4621      	mov	r1, r4
 8002982:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002986:	4621      	mov	r1, r4
 8002988:	028a      	lsls	r2, r1, #10
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002992:	2200      	movs	r2, #0
 8002994:	643b      	str	r3, [r7, #64]	; 0x40
 8002996:	647a      	str	r2, [r7, #68]	; 0x44
 8002998:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800299c:	f7fe f994 	bl	8000cc8 <__aeabi_uldivmod>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4613      	mov	r3, r2
 80029a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029aa:	4b60      	ldr	r3, [pc, #384]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0c1b      	lsrs	r3, r3, #16
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	3301      	adds	r3, #1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80029bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80029cc:	e0a6      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ce:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029da:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d02a      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029f8:	2100      	movs	r1, #0
 80029fa:	4b4e      	ldr	r3, [pc, #312]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80029fc:	fb03 f201 	mul.w	r2, r3, r1
 8002a00:	2300      	movs	r3, #0
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	4a4a      	ldr	r2, [pc, #296]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a0e:	677a      	str	r2, [r7, #116]	; 0x74
 8002a10:	460a      	mov	r2, r1
 8002a12:	673a      	str	r2, [r7, #112]	; 0x70
 8002a14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a16:	4413      	add	r3, r2
 8002a18:	677b      	str	r3, [r7, #116]	; 0x74
 8002a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a1e:	2200      	movs	r2, #0
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	637a      	str	r2, [r7, #52]	; 0x34
 8002a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002a2c:	f7fe f94c 	bl	8000cc8 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a3a:	e05b      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	2200      	movs	r2, #0
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a58:	4642      	mov	r2, r8
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	f04f 0000 	mov.w	r0, #0
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	0159      	lsls	r1, r3, #5
 8002a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a6a:	0150      	lsls	r0, r2, #5
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4641      	mov	r1, r8
 8002a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a76:	4649      	mov	r1, r9
 8002a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a90:	ebb2 040a 	subs.w	r4, r2, sl
 8002a94:	eb63 050b 	sbc.w	r5, r3, fp
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	00eb      	lsls	r3, r5, #3
 8002aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aa6:	00e2      	lsls	r2, r4, #3
 8002aa8:	4614      	mov	r4, r2
 8002aaa:	461d      	mov	r5, r3
 8002aac:	4643      	mov	r3, r8
 8002aae:	18e3      	adds	r3, r4, r3
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	eb45 0303 	adc.w	r3, r5, r3
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	028b      	lsls	r3, r1, #10
 8002aca:	4621      	mov	r1, r4
 8002acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	028a      	lsls	r2, r1, #10
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002adc:	2200      	movs	r2, #0
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	61fa      	str	r2, [r7, #28]
 8002ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae6:	f7fe f8ef 	bl	8000cc8 <__aeabi_uldivmod>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4613      	mov	r3, r2
 8002af0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0f1b      	lsrs	r3, r3, #28
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b12:	e003      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3798      	adds	r7, #152	; 0x98
 8002b24:	46bd      	mov	sp, r7
 8002b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	017d7840 	.word	0x017d7840

08002b38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e28d      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8083 	beq.w	8002c5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b58:	4b94      	ldr	r3, [pc, #592]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d019      	beq.n	8002b98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b64:	4b91      	ldr	r3, [pc, #580]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b70:	4b8e      	ldr	r3, [pc, #568]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7c:	d00c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7e:	4b8b      	ldr	r3, [pc, #556]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d112      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8a:	4b88      	ldr	r3, [pc, #544]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b84      	ldr	r3, [pc, #528]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x124>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d157      	bne.n	8002c5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e25a      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x90>
 8002bba:	4b7c      	ldr	r3, [pc, #496]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7b      	ldr	r2, [pc, #492]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xcc>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xb4>
 8002bd2:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a75      	ldr	r2, [pc, #468]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b73      	ldr	r3, [pc, #460]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a72      	ldr	r2, [pc, #456]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xcc>
 8002bec:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b6c      	ldr	r3, [pc, #432]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6b      	ldr	r2, [pc, #428]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7ff f8ec 	bl	8001de8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c14:	f7ff f8e8 	bl	8001de8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e21f      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xdc>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7ff f8d8 	bl	8001de8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7ff f8d4 	bl	8001de8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e20b      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b57      	ldr	r3, [pc, #348]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x104>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06f      	beq.n	8002d4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c6a:	4b50      	ldr	r3, [pc, #320]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d017      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c76:	4b4d      	ldr	r3, [pc, #308]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c82:	4b4a      	ldr	r3, [pc, #296]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b44      	ldr	r3, [pc, #272]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x186>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1d3      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4937      	ldr	r1, [pc, #220]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	e03a      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0x278>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7ff f881 	bl	8001de8 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cea:	f7ff f87d 	bl	8001de8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1b4      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4925      	ldr	r1, [pc, #148]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_RCC_OscConfig+0x278>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7ff f860 	bl	8001de8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7ff f85c 	bl	8001de8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e193      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d036      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7ff f840 	bl	8001de8 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7ff f83c 	bl	8001de8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e173      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x234>
 8002d8a:	e01b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7ff f829 	bl	8001de8 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	e00e      	b.n	8002db8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7ff f825 	bl	8001de8 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d907      	bls.n	8002db8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e15c      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	42470000 	.word	0x42470000
 8002db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	4b8a      	ldr	r3, [pc, #552]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ea      	bne.n	8002d9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8097 	beq.w	8002f00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd6:	4b83      	ldr	r3, [pc, #524]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b7f      	ldr	r3, [pc, #508]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	4a7e      	ldr	r2, [pc, #504]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
 8002df2:	4b7c      	ldr	r3, [pc, #496]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d118      	bne.n	8002e40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0e:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	; (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe ffe5 	bl	8001de8 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fe ffe1 	bl	8001de8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e118      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	4b6c      	ldr	r3, [pc, #432]	; (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x31e>
 8002e48:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a65      	ldr	r2, [pc, #404]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x358>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x340>
 8002e5e:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a60      	ldr	r2, [pc, #384]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a5d      	ldr	r2, [pc, #372]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0x358>
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a59      	ldr	r2, [pc, #356]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe ffa6 	bl	8001de8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe ffa2 	bl	8001de8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0d7      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ee      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x368>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe ff90 	bl	8001de8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe ff8c 	bl	8001de8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0c1      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee2:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ee      	bne.n	8002ecc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80ad 	beq.w	8003064 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0a:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d060      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d145      	bne.n	8002faa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe ff60 	bl	8001de8 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe ff5c 	bl	8001de8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e093      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe ff31 	bl	8001de8 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe ff2d 	bl	8001de8 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e064      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x452>
 8002fa8:	e05c      	b.n	8003064 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe ff1a 	bl	8001de8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe ff16 	bl	8001de8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e04d      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x480>
 8002fd6:	e045      	b.n	8003064 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e040      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_RCC_OscConfig+0x538>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d030      	beq.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d129      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d122      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003028:	4293      	cmp	r3, r2
 800302a:	d119      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d10f      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d107      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800

08003074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e041      	b.n	800310a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe fc18 	bl	80018d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f000 f8f0 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800312e:	2302      	movs	r3, #2
 8003130:	e0ae      	b.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	f200 809f 	bhi.w	8003280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800317d 	.word	0x0800317d
 800314c:	08003281 	.word	0x08003281
 8003150:	08003281 	.word	0x08003281
 8003154:	08003281 	.word	0x08003281
 8003158:	080031bd 	.word	0x080031bd
 800315c:	08003281 	.word	0x08003281
 8003160:	08003281 	.word	0x08003281
 8003164:	08003281 	.word	0x08003281
 8003168:	080031ff 	.word	0x080031ff
 800316c:	08003281 	.word	0x08003281
 8003170:	08003281 	.word	0x08003281
 8003174:	08003281 	.word	0x08003281
 8003178:	0800323f 	.word	0x0800323f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f928 	bl	80033d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6999      	ldr	r1, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	619a      	str	r2, [r3, #24]
      break;
 80031ba:	e064      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f978 	bl	80034b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6999      	ldr	r1, [r3, #24]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
      break;
 80031fc:	e043      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f9cd 	bl	80035a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0208 	orr.w	r2, r2, #8
 8003218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0204 	bic.w	r2, r2, #4
 8003228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69d9      	ldr	r1, [r3, #28]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	61da      	str	r2, [r3, #28]
      break;
 800323c:	e023      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fa21 	bl	800368c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69d9      	ldr	r1, [r3, #28]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	61da      	str	r2, [r3, #28]
      break;
 800327e:	e002      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
      break;
 8003284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800328e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a40      	ldr	r2, [pc, #256]	; (80033ac <TIM_Base_SetConfig+0x114>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d00f      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3d      	ldr	r2, [pc, #244]	; (80033b0 <TIM_Base_SetConfig+0x118>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00b      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3c      	ldr	r2, [pc, #240]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3b      	ldr	r2, [pc, #236]	; (80033b8 <TIM_Base_SetConfig+0x120>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a3a      	ldr	r2, [pc, #232]	; (80033bc <TIM_Base_SetConfig+0x124>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <TIM_Base_SetConfig+0x114>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d02b      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d027      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <TIM_Base_SetConfig+0x118>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d023      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01f      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <TIM_Base_SetConfig+0x120>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01b      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a29      	ldr	r2, [pc, #164]	; (80033bc <TIM_Base_SetConfig+0x124>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d017      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <TIM_Base_SetConfig+0x128>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <TIM_Base_SetConfig+0x12c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00f      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <TIM_Base_SetConfig+0x130>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <TIM_Base_SetConfig+0x134>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <TIM_Base_SetConfig+0x138>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <TIM_Base_SetConfig+0x13c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <TIM_Base_SetConfig+0x114>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_Base_SetConfig+0xf8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <TIM_Base_SetConfig+0x124>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40010400 	.word	0x40010400
 80033c0:	40014000 	.word	0x40014000
 80033c4:	40014400 	.word	0x40014400
 80033c8:	40014800 	.word	0x40014800
 80033cc:	40001800 	.word	0x40001800
 80033d0:	40001c00 	.word	0x40001c00
 80033d4:	40002000 	.word	0x40002000

080033d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f023 0201 	bic.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 0302 	bic.w	r3, r3, #2
 8003420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <TIM_OC1_SetConfig+0xd8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC1_SetConfig+0x64>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <TIM_OC1_SetConfig+0xdc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d10c      	bne.n	8003456 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0308 	bic.w	r3, r3, #8
 8003442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <TIM_OC1_SetConfig+0xd8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <TIM_OC1_SetConfig+0x8e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <TIM_OC1_SetConfig+0xdc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d111      	bne.n	800348a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800346c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	621a      	str	r2, [r3, #32]
}
 80034a4:	bf00      	nop
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40010400 	.word	0x40010400

080034b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0210 	bic.w	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0320 	bic.w	r3, r3, #32
 8003502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a22      	ldr	r2, [pc, #136]	; (800359c <TIM_OC2_SetConfig+0xe4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_OC2_SetConfig+0x68>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <TIM_OC2_SetConfig+0xe8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d10d      	bne.n	800353c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <TIM_OC2_SetConfig+0xe4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_OC2_SetConfig+0x94>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <TIM_OC2_SetConfig+0xe8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d113      	bne.n	8003574 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40010000 	.word	0x40010000
 80035a0:	40010400 	.word	0x40010400

080035a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a21      	ldr	r2, [pc, #132]	; (8003684 <TIM_OC3_SetConfig+0xe0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_OC3_SetConfig+0x66>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a20      	ldr	r2, [pc, #128]	; (8003688 <TIM_OC3_SetConfig+0xe4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d10d      	bne.n	8003626 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a16      	ldr	r2, [pc, #88]	; (8003684 <TIM_OC3_SetConfig+0xe0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_OC3_SetConfig+0x92>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a15      	ldr	r2, [pc, #84]	; (8003688 <TIM_OC3_SetConfig+0xe4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d113      	bne.n	800365e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800363c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40010000 	.word	0x40010000
 8003688:	40010400 	.word	0x40010400

0800368c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <TIM_OC4_SetConfig+0xa4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_OC4_SetConfig+0x68>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a11      	ldr	r2, [pc, #68]	; (8003734 <TIM_OC4_SetConfig+0xa8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d109      	bne.n	8003708 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40010400 	.word	0x40010400

08003738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e05a      	b.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d022      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379c:	d01d      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d018      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10c      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40010000 	.word	0x40010000
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40010400 	.word	0x40010400
 8003828:	40014000 	.word	0x40014000
 800382c:	40001800 	.word	0x40001800

08003830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e03f      	b.n	80038c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe f896 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f9cb 	bl	8003c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b08a      	sub	sp, #40	; 0x28
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d17c      	bne.n	80039e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_Transmit+0x2c>
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e075      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_UART_Transmit+0x3e>
 8003904:	2302      	movs	r3, #2
 8003906:	e06e      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2221      	movs	r2, #33	; 0x21
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391e:	f7fe fa63 	bl	8001de8 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d108      	bne.n	800394c <HAL_UART_Transmit+0x82>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e003      	b.n	8003954 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800395c:	e02a      	b.n	80039b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f8e2 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e036      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3302      	adds	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e007      	b.n	80039a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cf      	bne.n	800395e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f8b2 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e006      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08a      	sub	sp, #40	; 0x28
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	f040 808c 	bne.w	8003b28 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Receive+0x2e>
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e084      	b.n	8003b2a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Receive+0x40>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e07d      	b.n	8003b2a <HAL_UART_Receive+0x13c>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2222      	movs	r2, #34	; 0x22
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4a:	f7fe f9cd 	bl	8001de8 <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Receive+0x8a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a88:	e043      	b.n	8003b12 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2120      	movs	r1, #32
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f84c 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e042      	b.n	8003b2a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	3302      	adds	r3, #2
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e01f      	b.n	8003b04 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	d007      	beq.n	8003ade <HAL_UART_Receive+0xf0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_UART_Receive+0xfe>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e008      	b.n	8003afe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1b6      	bne.n	8003a8a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b090      	sub	sp, #64	; 0x40
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b42:	e050      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d04c      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b52:	f7fe f949 	bl	8001de8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d241      	bcs.n	8003be6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b82:	637a      	str	r2, [r7, #52]	; 0x34
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e5      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3314      	adds	r3, #20
 8003b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb6:	623a      	str	r2, [r7, #32]
 8003bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	69f9      	ldr	r1, [r7, #28]
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e5      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e00f      	b.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d09f      	beq.n	8003b44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3740      	adds	r7, #64	; 0x40
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b0c0      	sub	sp, #256	; 0x100
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	68d9      	ldr	r1, [r3, #12]
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	ea40 0301 	orr.w	r3, r0, r1
 8003c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c68:	f021 010c 	bic.w	r1, r1, #12
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c76:	430b      	orrs	r3, r1
 8003c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8a:	6999      	ldr	r1, [r3, #24]
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	ea40 0301 	orr.w	r3, r0, r1
 8003c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b8f      	ldr	r3, [pc, #572]	; (8003edc <UART_SetConfig+0x2cc>)
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d005      	beq.n	8003cb0 <UART_SetConfig+0xa0>
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b8d      	ldr	r3, [pc, #564]	; (8003ee0 <UART_SetConfig+0x2d0>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d104      	bne.n	8003cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7fe fd84 	bl	80027bc <HAL_RCC_GetPCLK2Freq>
 8003cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cb8:	e003      	b.n	8003cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cba:	f7fe fd6b 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	f040 810c 	bne.w	8003ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ce2:	4622      	mov	r2, r4
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	1891      	adds	r1, r2, r2
 8003ce8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cea:	415b      	adcs	r3, r3
 8003cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	eb12 0801 	adds.w	r8, r2, r1
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	eb43 0901 	adc.w	r9, r3, r1
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d12:	4690      	mov	r8, r2
 8003d14:	4699      	mov	r9, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	eb18 0303 	adds.w	r3, r8, r3
 8003d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d20:	462b      	mov	r3, r5
 8003d22:	eb49 0303 	adc.w	r3, r9, r3
 8003d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d3e:	460b      	mov	r3, r1
 8003d40:	18db      	adds	r3, r3, r3
 8003d42:	653b      	str	r3, [r7, #80]	; 0x50
 8003d44:	4613      	mov	r3, r2
 8003d46:	eb42 0303 	adc.w	r3, r2, r3
 8003d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d54:	f7fc ffb8 	bl	8000cc8 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	011c      	lsls	r4, r3, #4
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d80:	415b      	adcs	r3, r3
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d88:	4641      	mov	r1, r8
 8003d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d8e:	4649      	mov	r1, r9
 8003d90:	eb43 0b01 	adc.w	fp, r3, r1
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da8:	4692      	mov	sl, r2
 8003daa:	469b      	mov	fp, r3
 8003dac:	4643      	mov	r3, r8
 8003dae:	eb1a 0303 	adds.w	r3, sl, r3
 8003db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003db6:	464b      	mov	r3, r9
 8003db8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	18db      	adds	r3, r3, r3
 8003dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dda:	4613      	mov	r3, r2
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	647b      	str	r3, [r7, #68]	; 0x44
 8003de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003dea:	f7fc ff6d 	bl	8000cc8 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4611      	mov	r1, r2
 8003df4:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003df6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2264      	movs	r2, #100	; 0x64
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	1acb      	subs	r3, r1, r3
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e18:	441c      	add	r4, r3
 8003e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e34:	415b      	adcs	r3, r3
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	1851      	adds	r1, r2, r1
 8003e40:	6339      	str	r1, [r7, #48]	; 0x30
 8003e42:	4649      	mov	r1, r9
 8003e44:	414b      	adcs	r3, r1
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e54:	4659      	mov	r1, fp
 8003e56:	00cb      	lsls	r3, r1, #3
 8003e58:	4651      	mov	r1, sl
 8003e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5e:	4651      	mov	r1, sl
 8003e60:	00ca      	lsls	r2, r1, #3
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e70:	464b      	mov	r3, r9
 8003e72:	460a      	mov	r2, r1
 8003e74:	eb42 0303 	adc.w	r3, r2, r3
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e90:	460b      	mov	r3, r1
 8003e92:	18db      	adds	r3, r3, r3
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e96:	4613      	mov	r3, r2
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ea6:	f7fc ff0f 	bl	8000cc8 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 0207 	and.w	r2, r3, #7
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4422      	add	r2, r4
 8003ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ed8:	e106      	b.n	80040e8 <UART_SetConfig+0x4d8>
 8003eda:	bf00      	nop
 8003edc:	40011000 	.word	0x40011000
 8003ee0:	40011400 	.word	0x40011400
 8003ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003efa:	4642      	mov	r2, r8
 8003efc:	464b      	mov	r3, r9
 8003efe:	1891      	adds	r1, r2, r2
 8003f00:	6239      	str	r1, [r7, #32]
 8003f02:	415b      	adcs	r3, r3
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	1854      	adds	r4, r2, r1
 8003f0e:	4649      	mov	r1, r9
 8003f10:	eb43 0501 	adc.w	r5, r3, r1
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	00eb      	lsls	r3, r5, #3
 8003f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f22:	00e2      	lsls	r2, r4, #3
 8003f24:	4614      	mov	r4, r2
 8003f26:	461d      	mov	r5, r3
 8003f28:	4643      	mov	r3, r8
 8003f2a:	18e3      	adds	r3, r4, r3
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f30:	464b      	mov	r3, r9
 8003f32:	eb45 0303 	adc.w	r3, r5, r3
 8003f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f56:	4629      	mov	r1, r5
 8003f58:	008b      	lsls	r3, r1, #2
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f60:	4621      	mov	r1, r4
 8003f62:	008a      	lsls	r2, r1, #2
 8003f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f68:	f7fc feae 	bl	8000cc8 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4b60      	ldr	r3, [pc, #384]	; (80040f4 <UART_SetConfig+0x4e4>)
 8003f72:	fba3 2302 	umull	r2, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	011c      	lsls	r4, r3, #4
 8003f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	61b9      	str	r1, [r7, #24]
 8003f94:	415b      	adcs	r3, r3
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	1851      	adds	r1, r2, r1
 8003fa0:	6139      	str	r1, [r7, #16]
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	00cb      	lsls	r3, r1, #3
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	00ca      	lsls	r2, r1, #3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4642      	mov	r2, r8
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	008b      	lsls	r3, r1, #2
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffe:	4641      	mov	r1, r8
 8004000:	008a      	lsls	r2, r1, #2
 8004002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004006:	f7fc fe5f 	bl	8000cc8 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4611      	mov	r1, r2
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <UART_SetConfig+0x4e4>)
 8004012:	fba3 2301 	umull	r2, r3, r3, r1
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2264      	movs	r2, #100	; 0x64
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	1acb      	subs	r3, r1, r3
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	3332      	adds	r3, #50	; 0x32
 8004024:	4a33      	ldr	r2, [pc, #204]	; (80040f4 <UART_SetConfig+0x4e4>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004030:	441c      	add	r4, r3
 8004032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004036:	2200      	movs	r2, #0
 8004038:	673b      	str	r3, [r7, #112]	; 0x70
 800403a:	677a      	str	r2, [r7, #116]	; 0x74
 800403c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	1891      	adds	r1, r2, r2
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	415b      	adcs	r3, r3
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004050:	4641      	mov	r1, r8
 8004052:	1851      	adds	r1, r2, r1
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	4649      	mov	r1, r9
 8004058:	414b      	adcs	r3, r1
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004068:	4659      	mov	r1, fp
 800406a:	00cb      	lsls	r3, r1, #3
 800406c:	4651      	mov	r1, sl
 800406e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004072:	4651      	mov	r1, sl
 8004074:	00ca      	lsls	r2, r1, #3
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	4603      	mov	r3, r0
 800407c:	4642      	mov	r2, r8
 800407e:	189b      	adds	r3, r3, r2
 8004080:	66bb      	str	r3, [r7, #104]	; 0x68
 8004082:	464b      	mov	r3, r9
 8004084:	460a      	mov	r2, r1
 8004086:	eb42 0303 	adc.w	r3, r2, r3
 800408a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	663b      	str	r3, [r7, #96]	; 0x60
 8004096:	667a      	str	r2, [r7, #100]	; 0x64
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040a4:	4649      	mov	r1, r9
 80040a6:	008b      	lsls	r3, r1, #2
 80040a8:	4641      	mov	r1, r8
 80040aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ae:	4641      	mov	r1, r8
 80040b0:	008a      	lsls	r2, r1, #2
 80040b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040b6:	f7fc fe07 	bl	8000cc8 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <UART_SetConfig+0x4e4>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	2164      	movs	r1, #100	; 0x64
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	3332      	adds	r3, #50	; 0x32
 80040d2:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <UART_SetConfig+0x4e4>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4422      	add	r2, r4
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040ee:	46bd      	mov	sp, r7
 80040f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f4:	51eb851f 	.word	0x51eb851f

080040f8 <malloc>:
 80040f8:	4b02      	ldr	r3, [pc, #8]	; (8004104 <malloc+0xc>)
 80040fa:	4601      	mov	r1, r0
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	f000 b823 	b.w	8004148 <_malloc_r>
 8004102:	bf00      	nop
 8004104:	20000080 	.word	0x20000080

08004108 <sbrk_aligned>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	4e0e      	ldr	r6, [pc, #56]	; (8004144 <sbrk_aligned+0x3c>)
 800410c:	460c      	mov	r4, r1
 800410e:	6831      	ldr	r1, [r6, #0]
 8004110:	4605      	mov	r5, r0
 8004112:	b911      	cbnz	r1, 800411a <sbrk_aligned+0x12>
 8004114:	f001 f91c 	bl	8005350 <_sbrk_r>
 8004118:	6030      	str	r0, [r6, #0]
 800411a:	4621      	mov	r1, r4
 800411c:	4628      	mov	r0, r5
 800411e:	f001 f917 	bl	8005350 <_sbrk_r>
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	d00a      	beq.n	800413c <sbrk_aligned+0x34>
 8004126:	1cc4      	adds	r4, r0, #3
 8004128:	f024 0403 	bic.w	r4, r4, #3
 800412c:	42a0      	cmp	r0, r4
 800412e:	d007      	beq.n	8004140 <sbrk_aligned+0x38>
 8004130:	1a21      	subs	r1, r4, r0
 8004132:	4628      	mov	r0, r5
 8004134:	f001 f90c 	bl	8005350 <_sbrk_r>
 8004138:	3001      	adds	r0, #1
 800413a:	d101      	bne.n	8004140 <sbrk_aligned+0x38>
 800413c:	f04f 34ff 	mov.w	r4, #4294967295
 8004140:	4620      	mov	r0, r4
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	20000350 	.word	0x20000350

08004148 <_malloc_r>:
 8004148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800414c:	1ccd      	adds	r5, r1, #3
 800414e:	f025 0503 	bic.w	r5, r5, #3
 8004152:	3508      	adds	r5, #8
 8004154:	2d0c      	cmp	r5, #12
 8004156:	bf38      	it	cc
 8004158:	250c      	movcc	r5, #12
 800415a:	2d00      	cmp	r5, #0
 800415c:	4607      	mov	r7, r0
 800415e:	db01      	blt.n	8004164 <_malloc_r+0x1c>
 8004160:	42a9      	cmp	r1, r5
 8004162:	d905      	bls.n	8004170 <_malloc_r+0x28>
 8004164:	230c      	movs	r3, #12
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	2600      	movs	r6, #0
 800416a:	4630      	mov	r0, r6
 800416c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004170:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004244 <_malloc_r+0xfc>
 8004174:	f000 f868 	bl	8004248 <__malloc_lock>
 8004178:	f8d8 3000 	ldr.w	r3, [r8]
 800417c:	461c      	mov	r4, r3
 800417e:	bb5c      	cbnz	r4, 80041d8 <_malloc_r+0x90>
 8004180:	4629      	mov	r1, r5
 8004182:	4638      	mov	r0, r7
 8004184:	f7ff ffc0 	bl	8004108 <sbrk_aligned>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	4604      	mov	r4, r0
 800418c:	d155      	bne.n	800423a <_malloc_r+0xf2>
 800418e:	f8d8 4000 	ldr.w	r4, [r8]
 8004192:	4626      	mov	r6, r4
 8004194:	2e00      	cmp	r6, #0
 8004196:	d145      	bne.n	8004224 <_malloc_r+0xdc>
 8004198:	2c00      	cmp	r4, #0
 800419a:	d048      	beq.n	800422e <_malloc_r+0xe6>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	4631      	mov	r1, r6
 80041a0:	4638      	mov	r0, r7
 80041a2:	eb04 0903 	add.w	r9, r4, r3
 80041a6:	f001 f8d3 	bl	8005350 <_sbrk_r>
 80041aa:	4581      	cmp	r9, r0
 80041ac:	d13f      	bne.n	800422e <_malloc_r+0xe6>
 80041ae:	6821      	ldr	r1, [r4, #0]
 80041b0:	1a6d      	subs	r5, r5, r1
 80041b2:	4629      	mov	r1, r5
 80041b4:	4638      	mov	r0, r7
 80041b6:	f7ff ffa7 	bl	8004108 <sbrk_aligned>
 80041ba:	3001      	adds	r0, #1
 80041bc:	d037      	beq.n	800422e <_malloc_r+0xe6>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	442b      	add	r3, r5
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	f8d8 3000 	ldr.w	r3, [r8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d038      	beq.n	800423e <_malloc_r+0xf6>
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	42a2      	cmp	r2, r4
 80041d0:	d12b      	bne.n	800422a <_malloc_r+0xe2>
 80041d2:	2200      	movs	r2, #0
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	e00f      	b.n	80041f8 <_malloc_r+0xb0>
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	1b52      	subs	r2, r2, r5
 80041dc:	d41f      	bmi.n	800421e <_malloc_r+0xd6>
 80041de:	2a0b      	cmp	r2, #11
 80041e0:	d917      	bls.n	8004212 <_malloc_r+0xca>
 80041e2:	1961      	adds	r1, r4, r5
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	6025      	str	r5, [r4, #0]
 80041e8:	bf18      	it	ne
 80041ea:	6059      	strne	r1, [r3, #4]
 80041ec:	6863      	ldr	r3, [r4, #4]
 80041ee:	bf08      	it	eq
 80041f0:	f8c8 1000 	streq.w	r1, [r8]
 80041f4:	5162      	str	r2, [r4, r5]
 80041f6:	604b      	str	r3, [r1, #4]
 80041f8:	4638      	mov	r0, r7
 80041fa:	f104 060b 	add.w	r6, r4, #11
 80041fe:	f000 f829 	bl	8004254 <__malloc_unlock>
 8004202:	f026 0607 	bic.w	r6, r6, #7
 8004206:	1d23      	adds	r3, r4, #4
 8004208:	1af2      	subs	r2, r6, r3
 800420a:	d0ae      	beq.n	800416a <_malloc_r+0x22>
 800420c:	1b9b      	subs	r3, r3, r6
 800420e:	50a3      	str	r3, [r4, r2]
 8004210:	e7ab      	b.n	800416a <_malloc_r+0x22>
 8004212:	42a3      	cmp	r3, r4
 8004214:	6862      	ldr	r2, [r4, #4]
 8004216:	d1dd      	bne.n	80041d4 <_malloc_r+0x8c>
 8004218:	f8c8 2000 	str.w	r2, [r8]
 800421c:	e7ec      	b.n	80041f8 <_malloc_r+0xb0>
 800421e:	4623      	mov	r3, r4
 8004220:	6864      	ldr	r4, [r4, #4]
 8004222:	e7ac      	b.n	800417e <_malloc_r+0x36>
 8004224:	4634      	mov	r4, r6
 8004226:	6876      	ldr	r6, [r6, #4]
 8004228:	e7b4      	b.n	8004194 <_malloc_r+0x4c>
 800422a:	4613      	mov	r3, r2
 800422c:	e7cc      	b.n	80041c8 <_malloc_r+0x80>
 800422e:	230c      	movs	r3, #12
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4638      	mov	r0, r7
 8004234:	f000 f80e 	bl	8004254 <__malloc_unlock>
 8004238:	e797      	b.n	800416a <_malloc_r+0x22>
 800423a:	6025      	str	r5, [r4, #0]
 800423c:	e7dc      	b.n	80041f8 <_malloc_r+0xb0>
 800423e:	605b      	str	r3, [r3, #4]
 8004240:	deff      	udf	#255	; 0xff
 8004242:	bf00      	nop
 8004244:	2000034c 	.word	0x2000034c

08004248 <__malloc_lock>:
 8004248:	4801      	ldr	r0, [pc, #4]	; (8004250 <__malloc_lock+0x8>)
 800424a:	f001 b8cd 	b.w	80053e8 <__retarget_lock_acquire_recursive>
 800424e:	bf00      	nop
 8004250:	20000494 	.word	0x20000494

08004254 <__malloc_unlock>:
 8004254:	4801      	ldr	r0, [pc, #4]	; (800425c <__malloc_unlock+0x8>)
 8004256:	f001 b8c8 	b.w	80053ea <__retarget_lock_release_recursive>
 800425a:	bf00      	nop
 800425c:	20000494 	.word	0x20000494

08004260 <__cvt>:
 8004260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004264:	ec55 4b10 	vmov	r4, r5, d0
 8004268:	2d00      	cmp	r5, #0
 800426a:	460e      	mov	r6, r1
 800426c:	4619      	mov	r1, r3
 800426e:	462b      	mov	r3, r5
 8004270:	bfbb      	ittet	lt
 8004272:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004276:	461d      	movlt	r5, r3
 8004278:	2300      	movge	r3, #0
 800427a:	232d      	movlt	r3, #45	; 0x2d
 800427c:	700b      	strb	r3, [r1, #0]
 800427e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004280:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004284:	4691      	mov	r9, r2
 8004286:	f023 0820 	bic.w	r8, r3, #32
 800428a:	bfbc      	itt	lt
 800428c:	4622      	movlt	r2, r4
 800428e:	4614      	movlt	r4, r2
 8004290:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004294:	d005      	beq.n	80042a2 <__cvt+0x42>
 8004296:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800429a:	d100      	bne.n	800429e <__cvt+0x3e>
 800429c:	3601      	adds	r6, #1
 800429e:	2102      	movs	r1, #2
 80042a0:	e000      	b.n	80042a4 <__cvt+0x44>
 80042a2:	2103      	movs	r1, #3
 80042a4:	ab03      	add	r3, sp, #12
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	ab02      	add	r3, sp, #8
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	ec45 4b10 	vmov	d0, r4, r5
 80042b0:	4653      	mov	r3, sl
 80042b2:	4632      	mov	r2, r6
 80042b4:	f001 f95c 	bl	8005570 <_dtoa_r>
 80042b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042bc:	4607      	mov	r7, r0
 80042be:	d102      	bne.n	80042c6 <__cvt+0x66>
 80042c0:	f019 0f01 	tst.w	r9, #1
 80042c4:	d022      	beq.n	800430c <__cvt+0xac>
 80042c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042ca:	eb07 0906 	add.w	r9, r7, r6
 80042ce:	d110      	bne.n	80042f2 <__cvt+0x92>
 80042d0:	783b      	ldrb	r3, [r7, #0]
 80042d2:	2b30      	cmp	r3, #48	; 0x30
 80042d4:	d10a      	bne.n	80042ec <__cvt+0x8c>
 80042d6:	2200      	movs	r2, #0
 80042d8:	2300      	movs	r3, #0
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f7fc fc13 	bl	8000b08 <__aeabi_dcmpeq>
 80042e2:	b918      	cbnz	r0, 80042ec <__cvt+0x8c>
 80042e4:	f1c6 0601 	rsb	r6, r6, #1
 80042e8:	f8ca 6000 	str.w	r6, [sl]
 80042ec:	f8da 3000 	ldr.w	r3, [sl]
 80042f0:	4499      	add	r9, r3
 80042f2:	2200      	movs	r2, #0
 80042f4:	2300      	movs	r3, #0
 80042f6:	4620      	mov	r0, r4
 80042f8:	4629      	mov	r1, r5
 80042fa:	f7fc fc05 	bl	8000b08 <__aeabi_dcmpeq>
 80042fe:	b108      	cbz	r0, 8004304 <__cvt+0xa4>
 8004300:	f8cd 900c 	str.w	r9, [sp, #12]
 8004304:	2230      	movs	r2, #48	; 0x30
 8004306:	9b03      	ldr	r3, [sp, #12]
 8004308:	454b      	cmp	r3, r9
 800430a:	d307      	bcc.n	800431c <__cvt+0xbc>
 800430c:	9b03      	ldr	r3, [sp, #12]
 800430e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004310:	1bdb      	subs	r3, r3, r7
 8004312:	4638      	mov	r0, r7
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	b004      	add	sp, #16
 8004318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431c:	1c59      	adds	r1, r3, #1
 800431e:	9103      	str	r1, [sp, #12]
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e7f0      	b.n	8004306 <__cvt+0xa6>

08004324 <__exponent>:
 8004324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004326:	4603      	mov	r3, r0
 8004328:	2900      	cmp	r1, #0
 800432a:	bfb8      	it	lt
 800432c:	4249      	neglt	r1, r1
 800432e:	f803 2b02 	strb.w	r2, [r3], #2
 8004332:	bfb4      	ite	lt
 8004334:	222d      	movlt	r2, #45	; 0x2d
 8004336:	222b      	movge	r2, #43	; 0x2b
 8004338:	2909      	cmp	r1, #9
 800433a:	7042      	strb	r2, [r0, #1]
 800433c:	dd2a      	ble.n	8004394 <__exponent+0x70>
 800433e:	f10d 0207 	add.w	r2, sp, #7
 8004342:	4617      	mov	r7, r2
 8004344:	260a      	movs	r6, #10
 8004346:	4694      	mov	ip, r2
 8004348:	fb91 f5f6 	sdiv	r5, r1, r6
 800434c:	fb06 1415 	mls	r4, r6, r5, r1
 8004350:	3430      	adds	r4, #48	; 0x30
 8004352:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004356:	460c      	mov	r4, r1
 8004358:	2c63      	cmp	r4, #99	; 0x63
 800435a:	f102 32ff 	add.w	r2, r2, #4294967295
 800435e:	4629      	mov	r1, r5
 8004360:	dcf1      	bgt.n	8004346 <__exponent+0x22>
 8004362:	3130      	adds	r1, #48	; 0x30
 8004364:	f1ac 0402 	sub.w	r4, ip, #2
 8004368:	f802 1c01 	strb.w	r1, [r2, #-1]
 800436c:	1c41      	adds	r1, r0, #1
 800436e:	4622      	mov	r2, r4
 8004370:	42ba      	cmp	r2, r7
 8004372:	d30a      	bcc.n	800438a <__exponent+0x66>
 8004374:	f10d 0209 	add.w	r2, sp, #9
 8004378:	eba2 020c 	sub.w	r2, r2, ip
 800437c:	42bc      	cmp	r4, r7
 800437e:	bf88      	it	hi
 8004380:	2200      	movhi	r2, #0
 8004382:	4413      	add	r3, r2
 8004384:	1a18      	subs	r0, r3, r0
 8004386:	b003      	add	sp, #12
 8004388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800438e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004392:	e7ed      	b.n	8004370 <__exponent+0x4c>
 8004394:	2330      	movs	r3, #48	; 0x30
 8004396:	3130      	adds	r1, #48	; 0x30
 8004398:	7083      	strb	r3, [r0, #2]
 800439a:	70c1      	strb	r1, [r0, #3]
 800439c:	1d03      	adds	r3, r0, #4
 800439e:	e7f1      	b.n	8004384 <__exponent+0x60>

080043a0 <_printf_float>:
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	ed2d 8b02 	vpush	{d8}
 80043a8:	b08d      	sub	sp, #52	; 0x34
 80043aa:	460c      	mov	r4, r1
 80043ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043b0:	4616      	mov	r6, r2
 80043b2:	461f      	mov	r7, r3
 80043b4:	4605      	mov	r5, r0
 80043b6:	f000 ff93 	bl	80052e0 <_localeconv_r>
 80043ba:	f8d0 a000 	ldr.w	sl, [r0]
 80043be:	4650      	mov	r0, sl
 80043c0:	f7fb ff76 	bl	80002b0 <strlen>
 80043c4:	2300      	movs	r3, #0
 80043c6:	930a      	str	r3, [sp, #40]	; 0x28
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	f8d8 3000 	ldr.w	r3, [r8]
 80043d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043d4:	3307      	adds	r3, #7
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	f103 0208 	add.w	r2, r3, #8
 80043de:	f8c8 2000 	str.w	r2, [r8]
 80043e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043ea:	9307      	str	r3, [sp, #28]
 80043ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80043f0:	ee08 0a10 	vmov	s16, r0
 80043f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80043f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043fc:	4b9e      	ldr	r3, [pc, #632]	; (8004678 <_printf_float+0x2d8>)
 80043fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004402:	f7fc fbb3 	bl	8000b6c <__aeabi_dcmpun>
 8004406:	bb88      	cbnz	r0, 800446c <_printf_float+0xcc>
 8004408:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800440c:	4b9a      	ldr	r3, [pc, #616]	; (8004678 <_printf_float+0x2d8>)
 800440e:	f04f 32ff 	mov.w	r2, #4294967295
 8004412:	f7fc fb8d 	bl	8000b30 <__aeabi_dcmple>
 8004416:	bb48      	cbnz	r0, 800446c <_printf_float+0xcc>
 8004418:	2200      	movs	r2, #0
 800441a:	2300      	movs	r3, #0
 800441c:	4640      	mov	r0, r8
 800441e:	4649      	mov	r1, r9
 8004420:	f7fc fb7c 	bl	8000b1c <__aeabi_dcmplt>
 8004424:	b110      	cbz	r0, 800442c <_printf_float+0x8c>
 8004426:	232d      	movs	r3, #45	; 0x2d
 8004428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442c:	4a93      	ldr	r2, [pc, #588]	; (800467c <_printf_float+0x2dc>)
 800442e:	4b94      	ldr	r3, [pc, #592]	; (8004680 <_printf_float+0x2e0>)
 8004430:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004434:	bf94      	ite	ls
 8004436:	4690      	movls	r8, r2
 8004438:	4698      	movhi	r8, r3
 800443a:	2303      	movs	r3, #3
 800443c:	6123      	str	r3, [r4, #16]
 800443e:	9b05      	ldr	r3, [sp, #20]
 8004440:	f023 0304 	bic.w	r3, r3, #4
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	f04f 0900 	mov.w	r9, #0
 800444a:	9700      	str	r7, [sp, #0]
 800444c:	4633      	mov	r3, r6
 800444e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004450:	4621      	mov	r1, r4
 8004452:	4628      	mov	r0, r5
 8004454:	f000 f9da 	bl	800480c <_printf_common>
 8004458:	3001      	adds	r0, #1
 800445a:	f040 8090 	bne.w	800457e <_printf_float+0x1de>
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	b00d      	add	sp, #52	; 0x34
 8004464:	ecbd 8b02 	vpop	{d8}
 8004468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	4640      	mov	r0, r8
 8004472:	4649      	mov	r1, r9
 8004474:	f7fc fb7a 	bl	8000b6c <__aeabi_dcmpun>
 8004478:	b140      	cbz	r0, 800448c <_printf_float+0xec>
 800447a:	464b      	mov	r3, r9
 800447c:	2b00      	cmp	r3, #0
 800447e:	bfbc      	itt	lt
 8004480:	232d      	movlt	r3, #45	; 0x2d
 8004482:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004486:	4a7f      	ldr	r2, [pc, #508]	; (8004684 <_printf_float+0x2e4>)
 8004488:	4b7f      	ldr	r3, [pc, #508]	; (8004688 <_printf_float+0x2e8>)
 800448a:	e7d1      	b.n	8004430 <_printf_float+0x90>
 800448c:	6863      	ldr	r3, [r4, #4]
 800448e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004492:	9206      	str	r2, [sp, #24]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	d13f      	bne.n	8004518 <_printf_float+0x178>
 8004498:	2306      	movs	r3, #6
 800449a:	6063      	str	r3, [r4, #4]
 800449c:	9b05      	ldr	r3, [sp, #20]
 800449e:	6861      	ldr	r1, [r4, #4]
 80044a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044a4:	2300      	movs	r3, #0
 80044a6:	9303      	str	r3, [sp, #12]
 80044a8:	ab0a      	add	r3, sp, #40	; 0x28
 80044aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044ae:	ab09      	add	r3, sp, #36	; 0x24
 80044b0:	ec49 8b10 	vmov	d0, r8, r9
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6022      	str	r2, [r4, #0]
 80044b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044bc:	4628      	mov	r0, r5
 80044be:	f7ff fecf 	bl	8004260 <__cvt>
 80044c2:	9b06      	ldr	r3, [sp, #24]
 80044c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044c6:	2b47      	cmp	r3, #71	; 0x47
 80044c8:	4680      	mov	r8, r0
 80044ca:	d108      	bne.n	80044de <_printf_float+0x13e>
 80044cc:	1cc8      	adds	r0, r1, #3
 80044ce:	db02      	blt.n	80044d6 <_printf_float+0x136>
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	4299      	cmp	r1, r3
 80044d4:	dd41      	ble.n	800455a <_printf_float+0x1ba>
 80044d6:	f1ab 0302 	sub.w	r3, fp, #2
 80044da:	fa5f fb83 	uxtb.w	fp, r3
 80044de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044e2:	d820      	bhi.n	8004526 <_printf_float+0x186>
 80044e4:	3901      	subs	r1, #1
 80044e6:	465a      	mov	r2, fp
 80044e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044ec:	9109      	str	r1, [sp, #36]	; 0x24
 80044ee:	f7ff ff19 	bl	8004324 <__exponent>
 80044f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044f4:	1813      	adds	r3, r2, r0
 80044f6:	2a01      	cmp	r2, #1
 80044f8:	4681      	mov	r9, r0
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	dc02      	bgt.n	8004504 <_printf_float+0x164>
 80044fe:	6822      	ldr	r2, [r4, #0]
 8004500:	07d2      	lsls	r2, r2, #31
 8004502:	d501      	bpl.n	8004508 <_printf_float+0x168>
 8004504:	3301      	adds	r3, #1
 8004506:	6123      	str	r3, [r4, #16]
 8004508:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800450c:	2b00      	cmp	r3, #0
 800450e:	d09c      	beq.n	800444a <_printf_float+0xaa>
 8004510:	232d      	movs	r3, #45	; 0x2d
 8004512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004516:	e798      	b.n	800444a <_printf_float+0xaa>
 8004518:	9a06      	ldr	r2, [sp, #24]
 800451a:	2a47      	cmp	r2, #71	; 0x47
 800451c:	d1be      	bne.n	800449c <_printf_float+0xfc>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1bc      	bne.n	800449c <_printf_float+0xfc>
 8004522:	2301      	movs	r3, #1
 8004524:	e7b9      	b.n	800449a <_printf_float+0xfa>
 8004526:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800452a:	d118      	bne.n	800455e <_printf_float+0x1be>
 800452c:	2900      	cmp	r1, #0
 800452e:	6863      	ldr	r3, [r4, #4]
 8004530:	dd0b      	ble.n	800454a <_printf_float+0x1aa>
 8004532:	6121      	str	r1, [r4, #16]
 8004534:	b913      	cbnz	r3, 800453c <_printf_float+0x19c>
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	07d0      	lsls	r0, r2, #31
 800453a:	d502      	bpl.n	8004542 <_printf_float+0x1a2>
 800453c:	3301      	adds	r3, #1
 800453e:	440b      	add	r3, r1
 8004540:	6123      	str	r3, [r4, #16]
 8004542:	65a1      	str	r1, [r4, #88]	; 0x58
 8004544:	f04f 0900 	mov.w	r9, #0
 8004548:	e7de      	b.n	8004508 <_printf_float+0x168>
 800454a:	b913      	cbnz	r3, 8004552 <_printf_float+0x1b2>
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	07d2      	lsls	r2, r2, #31
 8004550:	d501      	bpl.n	8004556 <_printf_float+0x1b6>
 8004552:	3302      	adds	r3, #2
 8004554:	e7f4      	b.n	8004540 <_printf_float+0x1a0>
 8004556:	2301      	movs	r3, #1
 8004558:	e7f2      	b.n	8004540 <_printf_float+0x1a0>
 800455a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800455e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004560:	4299      	cmp	r1, r3
 8004562:	db05      	blt.n	8004570 <_printf_float+0x1d0>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	6121      	str	r1, [r4, #16]
 8004568:	07d8      	lsls	r0, r3, #31
 800456a:	d5ea      	bpl.n	8004542 <_printf_float+0x1a2>
 800456c:	1c4b      	adds	r3, r1, #1
 800456e:	e7e7      	b.n	8004540 <_printf_float+0x1a0>
 8004570:	2900      	cmp	r1, #0
 8004572:	bfd4      	ite	le
 8004574:	f1c1 0202 	rsble	r2, r1, #2
 8004578:	2201      	movgt	r2, #1
 800457a:	4413      	add	r3, r2
 800457c:	e7e0      	b.n	8004540 <_printf_float+0x1a0>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	055a      	lsls	r2, r3, #21
 8004582:	d407      	bmi.n	8004594 <_printf_float+0x1f4>
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	4642      	mov	r2, r8
 8004588:	4631      	mov	r1, r6
 800458a:	4628      	mov	r0, r5
 800458c:	47b8      	blx	r7
 800458e:	3001      	adds	r0, #1
 8004590:	d12c      	bne.n	80045ec <_printf_float+0x24c>
 8004592:	e764      	b.n	800445e <_printf_float+0xbe>
 8004594:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004598:	f240 80e0 	bls.w	800475c <_printf_float+0x3bc>
 800459c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045a0:	2200      	movs	r2, #0
 80045a2:	2300      	movs	r3, #0
 80045a4:	f7fc fab0 	bl	8000b08 <__aeabi_dcmpeq>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d034      	beq.n	8004616 <_printf_float+0x276>
 80045ac:	4a37      	ldr	r2, [pc, #220]	; (800468c <_printf_float+0x2ec>)
 80045ae:	2301      	movs	r3, #1
 80045b0:	4631      	mov	r1, r6
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b8      	blx	r7
 80045b6:	3001      	adds	r0, #1
 80045b8:	f43f af51 	beq.w	800445e <_printf_float+0xbe>
 80045bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045c0:	429a      	cmp	r2, r3
 80045c2:	db02      	blt.n	80045ca <_printf_float+0x22a>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	07d8      	lsls	r0, r3, #31
 80045c8:	d510      	bpl.n	80045ec <_printf_float+0x24c>
 80045ca:	ee18 3a10 	vmov	r3, s16
 80045ce:	4652      	mov	r2, sl
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	f43f af41 	beq.w	800445e <_printf_float+0xbe>
 80045dc:	f04f 0800 	mov.w	r8, #0
 80045e0:	f104 091a 	add.w	r9, r4, #26
 80045e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	4543      	cmp	r3, r8
 80045ea:	dc09      	bgt.n	8004600 <_printf_float+0x260>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	079b      	lsls	r3, r3, #30
 80045f0:	f100 8107 	bmi.w	8004802 <_printf_float+0x462>
 80045f4:	68e0      	ldr	r0, [r4, #12]
 80045f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045f8:	4298      	cmp	r0, r3
 80045fa:	bfb8      	it	lt
 80045fc:	4618      	movlt	r0, r3
 80045fe:	e730      	b.n	8004462 <_printf_float+0xc2>
 8004600:	2301      	movs	r3, #1
 8004602:	464a      	mov	r2, r9
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	47b8      	blx	r7
 800460a:	3001      	adds	r0, #1
 800460c:	f43f af27 	beq.w	800445e <_printf_float+0xbe>
 8004610:	f108 0801 	add.w	r8, r8, #1
 8004614:	e7e6      	b.n	80045e4 <_printf_float+0x244>
 8004616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	dc39      	bgt.n	8004690 <_printf_float+0x2f0>
 800461c:	4a1b      	ldr	r2, [pc, #108]	; (800468c <_printf_float+0x2ec>)
 800461e:	2301      	movs	r3, #1
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	47b8      	blx	r7
 8004626:	3001      	adds	r0, #1
 8004628:	f43f af19 	beq.w	800445e <_printf_float+0xbe>
 800462c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004630:	4313      	orrs	r3, r2
 8004632:	d102      	bne.n	800463a <_printf_float+0x29a>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	07d9      	lsls	r1, r3, #31
 8004638:	d5d8      	bpl.n	80045ec <_printf_float+0x24c>
 800463a:	ee18 3a10 	vmov	r3, s16
 800463e:	4652      	mov	r2, sl
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f af09 	beq.w	800445e <_printf_float+0xbe>
 800464c:	f04f 0900 	mov.w	r9, #0
 8004650:	f104 0a1a 	add.w	sl, r4, #26
 8004654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004656:	425b      	negs	r3, r3
 8004658:	454b      	cmp	r3, r9
 800465a:	dc01      	bgt.n	8004660 <_printf_float+0x2c0>
 800465c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465e:	e792      	b.n	8004586 <_printf_float+0x1e6>
 8004660:	2301      	movs	r3, #1
 8004662:	4652      	mov	r2, sl
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	47b8      	blx	r7
 800466a:	3001      	adds	r0, #1
 800466c:	f43f aef7 	beq.w	800445e <_printf_float+0xbe>
 8004670:	f109 0901 	add.w	r9, r9, #1
 8004674:	e7ee      	b.n	8004654 <_printf_float+0x2b4>
 8004676:	bf00      	nop
 8004678:	7fefffff 	.word	0x7fefffff
 800467c:	0800a11c 	.word	0x0800a11c
 8004680:	0800a120 	.word	0x0800a120
 8004684:	0800a124 	.word	0x0800a124
 8004688:	0800a128 	.word	0x0800a128
 800468c:	0800a548 	.word	0x0800a548
 8004690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004694:	429a      	cmp	r2, r3
 8004696:	bfa8      	it	ge
 8004698:	461a      	movge	r2, r3
 800469a:	2a00      	cmp	r2, #0
 800469c:	4691      	mov	r9, r2
 800469e:	dc37      	bgt.n	8004710 <_printf_float+0x370>
 80046a0:	f04f 0b00 	mov.w	fp, #0
 80046a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046a8:	f104 021a 	add.w	r2, r4, #26
 80046ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046ae:	9305      	str	r3, [sp, #20]
 80046b0:	eba3 0309 	sub.w	r3, r3, r9
 80046b4:	455b      	cmp	r3, fp
 80046b6:	dc33      	bgt.n	8004720 <_printf_float+0x380>
 80046b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046bc:	429a      	cmp	r2, r3
 80046be:	db3b      	blt.n	8004738 <_printf_float+0x398>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	07da      	lsls	r2, r3, #31
 80046c4:	d438      	bmi.n	8004738 <_printf_float+0x398>
 80046c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80046ca:	eba2 0903 	sub.w	r9, r2, r3
 80046ce:	9b05      	ldr	r3, [sp, #20]
 80046d0:	1ad2      	subs	r2, r2, r3
 80046d2:	4591      	cmp	r9, r2
 80046d4:	bfa8      	it	ge
 80046d6:	4691      	movge	r9, r2
 80046d8:	f1b9 0f00 	cmp.w	r9, #0
 80046dc:	dc35      	bgt.n	800474a <_printf_float+0x3aa>
 80046de:	f04f 0800 	mov.w	r8, #0
 80046e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046e6:	f104 0a1a 	add.w	sl, r4, #26
 80046ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	eba3 0309 	sub.w	r3, r3, r9
 80046f4:	4543      	cmp	r3, r8
 80046f6:	f77f af79 	ble.w	80045ec <_printf_float+0x24c>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4652      	mov	r2, sl
 80046fe:	4631      	mov	r1, r6
 8004700:	4628      	mov	r0, r5
 8004702:	47b8      	blx	r7
 8004704:	3001      	adds	r0, #1
 8004706:	f43f aeaa 	beq.w	800445e <_printf_float+0xbe>
 800470a:	f108 0801 	add.w	r8, r8, #1
 800470e:	e7ec      	b.n	80046ea <_printf_float+0x34a>
 8004710:	4613      	mov	r3, r2
 8004712:	4631      	mov	r1, r6
 8004714:	4642      	mov	r2, r8
 8004716:	4628      	mov	r0, r5
 8004718:	47b8      	blx	r7
 800471a:	3001      	adds	r0, #1
 800471c:	d1c0      	bne.n	80046a0 <_printf_float+0x300>
 800471e:	e69e      	b.n	800445e <_printf_float+0xbe>
 8004720:	2301      	movs	r3, #1
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	9205      	str	r2, [sp, #20]
 8004728:	47b8      	blx	r7
 800472a:	3001      	adds	r0, #1
 800472c:	f43f ae97 	beq.w	800445e <_printf_float+0xbe>
 8004730:	9a05      	ldr	r2, [sp, #20]
 8004732:	f10b 0b01 	add.w	fp, fp, #1
 8004736:	e7b9      	b.n	80046ac <_printf_float+0x30c>
 8004738:	ee18 3a10 	vmov	r3, s16
 800473c:	4652      	mov	r2, sl
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	d1be      	bne.n	80046c6 <_printf_float+0x326>
 8004748:	e689      	b.n	800445e <_printf_float+0xbe>
 800474a:	9a05      	ldr	r2, [sp, #20]
 800474c:	464b      	mov	r3, r9
 800474e:	4442      	add	r2, r8
 8004750:	4631      	mov	r1, r6
 8004752:	4628      	mov	r0, r5
 8004754:	47b8      	blx	r7
 8004756:	3001      	adds	r0, #1
 8004758:	d1c1      	bne.n	80046de <_printf_float+0x33e>
 800475a:	e680      	b.n	800445e <_printf_float+0xbe>
 800475c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800475e:	2a01      	cmp	r2, #1
 8004760:	dc01      	bgt.n	8004766 <_printf_float+0x3c6>
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d53a      	bpl.n	80047dc <_printf_float+0x43c>
 8004766:	2301      	movs	r3, #1
 8004768:	4642      	mov	r2, r8
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	f43f ae74 	beq.w	800445e <_printf_float+0xbe>
 8004776:	ee18 3a10 	vmov	r3, s16
 800477a:	4652      	mov	r2, sl
 800477c:	4631      	mov	r1, r6
 800477e:	4628      	mov	r0, r5
 8004780:	47b8      	blx	r7
 8004782:	3001      	adds	r0, #1
 8004784:	f43f ae6b 	beq.w	800445e <_printf_float+0xbe>
 8004788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800478c:	2200      	movs	r2, #0
 800478e:	2300      	movs	r3, #0
 8004790:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004794:	f7fc f9b8 	bl	8000b08 <__aeabi_dcmpeq>
 8004798:	b9d8      	cbnz	r0, 80047d2 <_printf_float+0x432>
 800479a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800479e:	f108 0201 	add.w	r2, r8, #1
 80047a2:	4631      	mov	r1, r6
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b8      	blx	r7
 80047a8:	3001      	adds	r0, #1
 80047aa:	d10e      	bne.n	80047ca <_printf_float+0x42a>
 80047ac:	e657      	b.n	800445e <_printf_float+0xbe>
 80047ae:	2301      	movs	r3, #1
 80047b0:	4652      	mov	r2, sl
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	f43f ae50 	beq.w	800445e <_printf_float+0xbe>
 80047be:	f108 0801 	add.w	r8, r8, #1
 80047c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047c4:	3b01      	subs	r3, #1
 80047c6:	4543      	cmp	r3, r8
 80047c8:	dcf1      	bgt.n	80047ae <_printf_float+0x40e>
 80047ca:	464b      	mov	r3, r9
 80047cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047d0:	e6da      	b.n	8004588 <_printf_float+0x1e8>
 80047d2:	f04f 0800 	mov.w	r8, #0
 80047d6:	f104 0a1a 	add.w	sl, r4, #26
 80047da:	e7f2      	b.n	80047c2 <_printf_float+0x422>
 80047dc:	2301      	movs	r3, #1
 80047de:	4642      	mov	r2, r8
 80047e0:	e7df      	b.n	80047a2 <_printf_float+0x402>
 80047e2:	2301      	movs	r3, #1
 80047e4:	464a      	mov	r2, r9
 80047e6:	4631      	mov	r1, r6
 80047e8:	4628      	mov	r0, r5
 80047ea:	47b8      	blx	r7
 80047ec:	3001      	adds	r0, #1
 80047ee:	f43f ae36 	beq.w	800445e <_printf_float+0xbe>
 80047f2:	f108 0801 	add.w	r8, r8, #1
 80047f6:	68e3      	ldr	r3, [r4, #12]
 80047f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047fa:	1a5b      	subs	r3, r3, r1
 80047fc:	4543      	cmp	r3, r8
 80047fe:	dcf0      	bgt.n	80047e2 <_printf_float+0x442>
 8004800:	e6f8      	b.n	80045f4 <_printf_float+0x254>
 8004802:	f04f 0800 	mov.w	r8, #0
 8004806:	f104 0919 	add.w	r9, r4, #25
 800480a:	e7f4      	b.n	80047f6 <_printf_float+0x456>

0800480c <_printf_common>:
 800480c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004810:	4616      	mov	r6, r2
 8004812:	4699      	mov	r9, r3
 8004814:	688a      	ldr	r2, [r1, #8]
 8004816:	690b      	ldr	r3, [r1, #16]
 8004818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800481c:	4293      	cmp	r3, r2
 800481e:	bfb8      	it	lt
 8004820:	4613      	movlt	r3, r2
 8004822:	6033      	str	r3, [r6, #0]
 8004824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004828:	4607      	mov	r7, r0
 800482a:	460c      	mov	r4, r1
 800482c:	b10a      	cbz	r2, 8004832 <_printf_common+0x26>
 800482e:	3301      	adds	r3, #1
 8004830:	6033      	str	r3, [r6, #0]
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	0699      	lsls	r1, r3, #26
 8004836:	bf42      	ittt	mi
 8004838:	6833      	ldrmi	r3, [r6, #0]
 800483a:	3302      	addmi	r3, #2
 800483c:	6033      	strmi	r3, [r6, #0]
 800483e:	6825      	ldr	r5, [r4, #0]
 8004840:	f015 0506 	ands.w	r5, r5, #6
 8004844:	d106      	bne.n	8004854 <_printf_common+0x48>
 8004846:	f104 0a19 	add.w	sl, r4, #25
 800484a:	68e3      	ldr	r3, [r4, #12]
 800484c:	6832      	ldr	r2, [r6, #0]
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	42ab      	cmp	r3, r5
 8004852:	dc26      	bgt.n	80048a2 <_printf_common+0x96>
 8004854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004858:	1e13      	subs	r3, r2, #0
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	bf18      	it	ne
 800485e:	2301      	movne	r3, #1
 8004860:	0692      	lsls	r2, r2, #26
 8004862:	d42b      	bmi.n	80048bc <_printf_common+0xb0>
 8004864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004868:	4649      	mov	r1, r9
 800486a:	4638      	mov	r0, r7
 800486c:	47c0      	blx	r8
 800486e:	3001      	adds	r0, #1
 8004870:	d01e      	beq.n	80048b0 <_printf_common+0xa4>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	6922      	ldr	r2, [r4, #16]
 8004876:	f003 0306 	and.w	r3, r3, #6
 800487a:	2b04      	cmp	r3, #4
 800487c:	bf02      	ittt	eq
 800487e:	68e5      	ldreq	r5, [r4, #12]
 8004880:	6833      	ldreq	r3, [r6, #0]
 8004882:	1aed      	subeq	r5, r5, r3
 8004884:	68a3      	ldr	r3, [r4, #8]
 8004886:	bf0c      	ite	eq
 8004888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800488c:	2500      	movne	r5, #0
 800488e:	4293      	cmp	r3, r2
 8004890:	bfc4      	itt	gt
 8004892:	1a9b      	subgt	r3, r3, r2
 8004894:	18ed      	addgt	r5, r5, r3
 8004896:	2600      	movs	r6, #0
 8004898:	341a      	adds	r4, #26
 800489a:	42b5      	cmp	r5, r6
 800489c:	d11a      	bne.n	80048d4 <_printf_common+0xc8>
 800489e:	2000      	movs	r0, #0
 80048a0:	e008      	b.n	80048b4 <_printf_common+0xa8>
 80048a2:	2301      	movs	r3, #1
 80048a4:	4652      	mov	r2, sl
 80048a6:	4649      	mov	r1, r9
 80048a8:	4638      	mov	r0, r7
 80048aa:	47c0      	blx	r8
 80048ac:	3001      	adds	r0, #1
 80048ae:	d103      	bne.n	80048b8 <_printf_common+0xac>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b8:	3501      	adds	r5, #1
 80048ba:	e7c6      	b.n	800484a <_printf_common+0x3e>
 80048bc:	18e1      	adds	r1, r4, r3
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	2030      	movs	r0, #48	; 0x30
 80048c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048c6:	4422      	add	r2, r4
 80048c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048d0:	3302      	adds	r3, #2
 80048d2:	e7c7      	b.n	8004864 <_printf_common+0x58>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4622      	mov	r2, r4
 80048d8:	4649      	mov	r1, r9
 80048da:	4638      	mov	r0, r7
 80048dc:	47c0      	blx	r8
 80048de:	3001      	adds	r0, #1
 80048e0:	d0e6      	beq.n	80048b0 <_printf_common+0xa4>
 80048e2:	3601      	adds	r6, #1
 80048e4:	e7d9      	b.n	800489a <_printf_common+0x8e>
	...

080048e8 <_printf_i>:
 80048e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048ec:	7e0f      	ldrb	r7, [r1, #24]
 80048ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048f0:	2f78      	cmp	r7, #120	; 0x78
 80048f2:	4691      	mov	r9, r2
 80048f4:	4680      	mov	r8, r0
 80048f6:	460c      	mov	r4, r1
 80048f8:	469a      	mov	sl, r3
 80048fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048fe:	d807      	bhi.n	8004910 <_printf_i+0x28>
 8004900:	2f62      	cmp	r7, #98	; 0x62
 8004902:	d80a      	bhi.n	800491a <_printf_i+0x32>
 8004904:	2f00      	cmp	r7, #0
 8004906:	f000 80d4 	beq.w	8004ab2 <_printf_i+0x1ca>
 800490a:	2f58      	cmp	r7, #88	; 0x58
 800490c:	f000 80c0 	beq.w	8004a90 <_printf_i+0x1a8>
 8004910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004918:	e03a      	b.n	8004990 <_printf_i+0xa8>
 800491a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800491e:	2b15      	cmp	r3, #21
 8004920:	d8f6      	bhi.n	8004910 <_printf_i+0x28>
 8004922:	a101      	add	r1, pc, #4	; (adr r1, 8004928 <_printf_i+0x40>)
 8004924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004928:	08004981 	.word	0x08004981
 800492c:	08004995 	.word	0x08004995
 8004930:	08004911 	.word	0x08004911
 8004934:	08004911 	.word	0x08004911
 8004938:	08004911 	.word	0x08004911
 800493c:	08004911 	.word	0x08004911
 8004940:	08004995 	.word	0x08004995
 8004944:	08004911 	.word	0x08004911
 8004948:	08004911 	.word	0x08004911
 800494c:	08004911 	.word	0x08004911
 8004950:	08004911 	.word	0x08004911
 8004954:	08004a99 	.word	0x08004a99
 8004958:	080049c1 	.word	0x080049c1
 800495c:	08004a53 	.word	0x08004a53
 8004960:	08004911 	.word	0x08004911
 8004964:	08004911 	.word	0x08004911
 8004968:	08004abb 	.word	0x08004abb
 800496c:	08004911 	.word	0x08004911
 8004970:	080049c1 	.word	0x080049c1
 8004974:	08004911 	.word	0x08004911
 8004978:	08004911 	.word	0x08004911
 800497c:	08004a5b 	.word	0x08004a5b
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	602a      	str	r2, [r5, #0]
 8004988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800498c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004990:	2301      	movs	r3, #1
 8004992:	e09f      	b.n	8004ad4 <_printf_i+0x1ec>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	0607      	lsls	r7, r0, #24
 800499a:	f103 0104 	add.w	r1, r3, #4
 800499e:	6029      	str	r1, [r5, #0]
 80049a0:	d501      	bpl.n	80049a6 <_printf_i+0xbe>
 80049a2:	681e      	ldr	r6, [r3, #0]
 80049a4:	e003      	b.n	80049ae <_printf_i+0xc6>
 80049a6:	0646      	lsls	r6, r0, #25
 80049a8:	d5fb      	bpl.n	80049a2 <_printf_i+0xba>
 80049aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	da03      	bge.n	80049ba <_printf_i+0xd2>
 80049b2:	232d      	movs	r3, #45	; 0x2d
 80049b4:	4276      	negs	r6, r6
 80049b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ba:	485a      	ldr	r0, [pc, #360]	; (8004b24 <_printf_i+0x23c>)
 80049bc:	230a      	movs	r3, #10
 80049be:	e012      	b.n	80049e6 <_printf_i+0xfe>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	6820      	ldr	r0, [r4, #0]
 80049c4:	1d19      	adds	r1, r3, #4
 80049c6:	6029      	str	r1, [r5, #0]
 80049c8:	0605      	lsls	r5, r0, #24
 80049ca:	d501      	bpl.n	80049d0 <_printf_i+0xe8>
 80049cc:	681e      	ldr	r6, [r3, #0]
 80049ce:	e002      	b.n	80049d6 <_printf_i+0xee>
 80049d0:	0641      	lsls	r1, r0, #25
 80049d2:	d5fb      	bpl.n	80049cc <_printf_i+0xe4>
 80049d4:	881e      	ldrh	r6, [r3, #0]
 80049d6:	4853      	ldr	r0, [pc, #332]	; (8004b24 <_printf_i+0x23c>)
 80049d8:	2f6f      	cmp	r7, #111	; 0x6f
 80049da:	bf0c      	ite	eq
 80049dc:	2308      	moveq	r3, #8
 80049de:	230a      	movne	r3, #10
 80049e0:	2100      	movs	r1, #0
 80049e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049e6:	6865      	ldr	r5, [r4, #4]
 80049e8:	60a5      	str	r5, [r4, #8]
 80049ea:	2d00      	cmp	r5, #0
 80049ec:	bfa2      	ittt	ge
 80049ee:	6821      	ldrge	r1, [r4, #0]
 80049f0:	f021 0104 	bicge.w	r1, r1, #4
 80049f4:	6021      	strge	r1, [r4, #0]
 80049f6:	b90e      	cbnz	r6, 80049fc <_printf_i+0x114>
 80049f8:	2d00      	cmp	r5, #0
 80049fa:	d04b      	beq.n	8004a94 <_printf_i+0x1ac>
 80049fc:	4615      	mov	r5, r2
 80049fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a02:	fb03 6711 	mls	r7, r3, r1, r6
 8004a06:	5dc7      	ldrb	r7, [r0, r7]
 8004a08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a0c:	4637      	mov	r7, r6
 8004a0e:	42bb      	cmp	r3, r7
 8004a10:	460e      	mov	r6, r1
 8004a12:	d9f4      	bls.n	80049fe <_printf_i+0x116>
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d10b      	bne.n	8004a30 <_printf_i+0x148>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	07de      	lsls	r6, r3, #31
 8004a1c:	d508      	bpl.n	8004a30 <_printf_i+0x148>
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	6861      	ldr	r1, [r4, #4]
 8004a22:	4299      	cmp	r1, r3
 8004a24:	bfde      	ittt	le
 8004a26:	2330      	movle	r3, #48	; 0x30
 8004a28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a30:	1b52      	subs	r2, r2, r5
 8004a32:	6122      	str	r2, [r4, #16]
 8004a34:	f8cd a000 	str.w	sl, [sp]
 8004a38:	464b      	mov	r3, r9
 8004a3a:	aa03      	add	r2, sp, #12
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4640      	mov	r0, r8
 8004a40:	f7ff fee4 	bl	800480c <_printf_common>
 8004a44:	3001      	adds	r0, #1
 8004a46:	d14a      	bne.n	8004ade <_printf_i+0x1f6>
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	b004      	add	sp, #16
 8004a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	f043 0320 	orr.w	r3, r3, #32
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	4833      	ldr	r0, [pc, #204]	; (8004b28 <_printf_i+0x240>)
 8004a5c:	2778      	movs	r7, #120	; 0x78
 8004a5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	6829      	ldr	r1, [r5, #0]
 8004a66:	061f      	lsls	r7, r3, #24
 8004a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a6c:	d402      	bmi.n	8004a74 <_printf_i+0x18c>
 8004a6e:	065f      	lsls	r7, r3, #25
 8004a70:	bf48      	it	mi
 8004a72:	b2b6      	uxthmi	r6, r6
 8004a74:	07df      	lsls	r7, r3, #31
 8004a76:	bf48      	it	mi
 8004a78:	f043 0320 	orrmi.w	r3, r3, #32
 8004a7c:	6029      	str	r1, [r5, #0]
 8004a7e:	bf48      	it	mi
 8004a80:	6023      	strmi	r3, [r4, #0]
 8004a82:	b91e      	cbnz	r6, 8004a8c <_printf_i+0x1a4>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	f023 0320 	bic.w	r3, r3, #32
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	e7a7      	b.n	80049e0 <_printf_i+0xf8>
 8004a90:	4824      	ldr	r0, [pc, #144]	; (8004b24 <_printf_i+0x23c>)
 8004a92:	e7e4      	b.n	8004a5e <_printf_i+0x176>
 8004a94:	4615      	mov	r5, r2
 8004a96:	e7bd      	b.n	8004a14 <_printf_i+0x12c>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	6826      	ldr	r6, [r4, #0]
 8004a9c:	6961      	ldr	r1, [r4, #20]
 8004a9e:	1d18      	adds	r0, r3, #4
 8004aa0:	6028      	str	r0, [r5, #0]
 8004aa2:	0635      	lsls	r5, r6, #24
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	d501      	bpl.n	8004aac <_printf_i+0x1c4>
 8004aa8:	6019      	str	r1, [r3, #0]
 8004aaa:	e002      	b.n	8004ab2 <_printf_i+0x1ca>
 8004aac:	0670      	lsls	r0, r6, #25
 8004aae:	d5fb      	bpl.n	8004aa8 <_printf_i+0x1c0>
 8004ab0:	8019      	strh	r1, [r3, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	e7bc      	b.n	8004a34 <_printf_i+0x14c>
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	602a      	str	r2, [r5, #0]
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	6862      	ldr	r2, [r4, #4]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7fb fba2 	bl	8000210 <memchr>
 8004acc:	b108      	cbz	r0, 8004ad2 <_printf_i+0x1ea>
 8004ace:	1b40      	subs	r0, r0, r5
 8004ad0:	6060      	str	r0, [r4, #4]
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	6123      	str	r3, [r4, #16]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004adc:	e7aa      	b.n	8004a34 <_printf_i+0x14c>
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	47d0      	blx	sl
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d0ad      	beq.n	8004a48 <_printf_i+0x160>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	079b      	lsls	r3, r3, #30
 8004af0:	d413      	bmi.n	8004b1a <_printf_i+0x232>
 8004af2:	68e0      	ldr	r0, [r4, #12]
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	4298      	cmp	r0, r3
 8004af8:	bfb8      	it	lt
 8004afa:	4618      	movlt	r0, r3
 8004afc:	e7a6      	b.n	8004a4c <_printf_i+0x164>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4632      	mov	r2, r6
 8004b02:	4649      	mov	r1, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	47d0      	blx	sl
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d09d      	beq.n	8004a48 <_printf_i+0x160>
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	9903      	ldr	r1, [sp, #12]
 8004b12:	1a5b      	subs	r3, r3, r1
 8004b14:	42ab      	cmp	r3, r5
 8004b16:	dcf2      	bgt.n	8004afe <_printf_i+0x216>
 8004b18:	e7eb      	b.n	8004af2 <_printf_i+0x20a>
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	f104 0619 	add.w	r6, r4, #25
 8004b20:	e7f5      	b.n	8004b0e <_printf_i+0x226>
 8004b22:	bf00      	nop
 8004b24:	0800a12c 	.word	0x0800a12c
 8004b28:	0800a13d 	.word	0x0800a13d

08004b2c <_scanf_float>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	b087      	sub	sp, #28
 8004b32:	4617      	mov	r7, r2
 8004b34:	9303      	str	r3, [sp, #12]
 8004b36:	688b      	ldr	r3, [r1, #8]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004b3e:	bf83      	ittte	hi
 8004b40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004b44:	195b      	addhi	r3, r3, r5
 8004b46:	9302      	strhi	r3, [sp, #8]
 8004b48:	2300      	movls	r3, #0
 8004b4a:	bf86      	itte	hi
 8004b4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004b50:	608b      	strhi	r3, [r1, #8]
 8004b52:	9302      	strls	r3, [sp, #8]
 8004b54:	680b      	ldr	r3, [r1, #0]
 8004b56:	468b      	mov	fp, r1
 8004b58:	2500      	movs	r5, #0
 8004b5a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004b5e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004b62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004b66:	4680      	mov	r8, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	465e      	mov	r6, fp
 8004b6c:	46aa      	mov	sl, r5
 8004b6e:	46a9      	mov	r9, r5
 8004b70:	9501      	str	r5, [sp, #4]
 8004b72:	68a2      	ldr	r2, [r4, #8]
 8004b74:	b152      	cbz	r2, 8004b8c <_scanf_float+0x60>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b4e      	cmp	r3, #78	; 0x4e
 8004b7c:	d864      	bhi.n	8004c48 <_scanf_float+0x11c>
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d83c      	bhi.n	8004bfc <_scanf_float+0xd0>
 8004b82:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004b86:	b2c8      	uxtb	r0, r1
 8004b88:	280e      	cmp	r0, #14
 8004b8a:	d93a      	bls.n	8004c02 <_scanf_float+0xd6>
 8004b8c:	f1b9 0f00 	cmp.w	r9, #0
 8004b90:	d003      	beq.n	8004b9a <_scanf_float+0x6e>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b9e:	f1ba 0f01 	cmp.w	sl, #1
 8004ba2:	f200 8113 	bhi.w	8004dcc <_scanf_float+0x2a0>
 8004ba6:	455e      	cmp	r6, fp
 8004ba8:	f200 8105 	bhi.w	8004db6 <_scanf_float+0x28a>
 8004bac:	2501      	movs	r5, #1
 8004bae:	4628      	mov	r0, r5
 8004bb0:	b007      	add	sp, #28
 8004bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004bba:	2a0d      	cmp	r2, #13
 8004bbc:	d8e6      	bhi.n	8004b8c <_scanf_float+0x60>
 8004bbe:	a101      	add	r1, pc, #4	; (adr r1, 8004bc4 <_scanf_float+0x98>)
 8004bc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004bc4:	08004d03 	.word	0x08004d03
 8004bc8:	08004b8d 	.word	0x08004b8d
 8004bcc:	08004b8d 	.word	0x08004b8d
 8004bd0:	08004b8d 	.word	0x08004b8d
 8004bd4:	08004d63 	.word	0x08004d63
 8004bd8:	08004d3b 	.word	0x08004d3b
 8004bdc:	08004b8d 	.word	0x08004b8d
 8004be0:	08004b8d 	.word	0x08004b8d
 8004be4:	08004d11 	.word	0x08004d11
 8004be8:	08004b8d 	.word	0x08004b8d
 8004bec:	08004b8d 	.word	0x08004b8d
 8004bf0:	08004b8d 	.word	0x08004b8d
 8004bf4:	08004b8d 	.word	0x08004b8d
 8004bf8:	08004cc9 	.word	0x08004cc9
 8004bfc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004c00:	e7db      	b.n	8004bba <_scanf_float+0x8e>
 8004c02:	290e      	cmp	r1, #14
 8004c04:	d8c2      	bhi.n	8004b8c <_scanf_float+0x60>
 8004c06:	a001      	add	r0, pc, #4	; (adr r0, 8004c0c <_scanf_float+0xe0>)
 8004c08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c0c:	08004cbb 	.word	0x08004cbb
 8004c10:	08004b8d 	.word	0x08004b8d
 8004c14:	08004cbb 	.word	0x08004cbb
 8004c18:	08004d4f 	.word	0x08004d4f
 8004c1c:	08004b8d 	.word	0x08004b8d
 8004c20:	08004c69 	.word	0x08004c69
 8004c24:	08004ca5 	.word	0x08004ca5
 8004c28:	08004ca5 	.word	0x08004ca5
 8004c2c:	08004ca5 	.word	0x08004ca5
 8004c30:	08004ca5 	.word	0x08004ca5
 8004c34:	08004ca5 	.word	0x08004ca5
 8004c38:	08004ca5 	.word	0x08004ca5
 8004c3c:	08004ca5 	.word	0x08004ca5
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004ca5 	.word	0x08004ca5
 8004c48:	2b6e      	cmp	r3, #110	; 0x6e
 8004c4a:	d809      	bhi.n	8004c60 <_scanf_float+0x134>
 8004c4c:	2b60      	cmp	r3, #96	; 0x60
 8004c4e:	d8b2      	bhi.n	8004bb6 <_scanf_float+0x8a>
 8004c50:	2b54      	cmp	r3, #84	; 0x54
 8004c52:	d077      	beq.n	8004d44 <_scanf_float+0x218>
 8004c54:	2b59      	cmp	r3, #89	; 0x59
 8004c56:	d199      	bne.n	8004b8c <_scanf_float+0x60>
 8004c58:	2d07      	cmp	r5, #7
 8004c5a:	d197      	bne.n	8004b8c <_scanf_float+0x60>
 8004c5c:	2508      	movs	r5, #8
 8004c5e:	e029      	b.n	8004cb4 <_scanf_float+0x188>
 8004c60:	2b74      	cmp	r3, #116	; 0x74
 8004c62:	d06f      	beq.n	8004d44 <_scanf_float+0x218>
 8004c64:	2b79      	cmp	r3, #121	; 0x79
 8004c66:	e7f6      	b.n	8004c56 <_scanf_float+0x12a>
 8004c68:	6821      	ldr	r1, [r4, #0]
 8004c6a:	05c8      	lsls	r0, r1, #23
 8004c6c:	d51a      	bpl.n	8004ca4 <_scanf_float+0x178>
 8004c6e:	9b02      	ldr	r3, [sp, #8]
 8004c70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004c74:	6021      	str	r1, [r4, #0]
 8004c76:	f109 0901 	add.w	r9, r9, #1
 8004c7a:	b11b      	cbz	r3, 8004c84 <_scanf_float+0x158>
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	3201      	adds	r2, #1
 8004c80:	9302      	str	r3, [sp, #8]
 8004c82:	60a2      	str	r2, [r4, #8]
 8004c84:	68a3      	ldr	r3, [r4, #8]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	60a3      	str	r3, [r4, #8]
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	6123      	str	r3, [r4, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	f340 8084 	ble.w	8004da4 <_scanf_float+0x278>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	e766      	b.n	8004b72 <_scanf_float+0x46>
 8004ca4:	eb1a 0f05 	cmn.w	sl, r5
 8004ca8:	f47f af70 	bne.w	8004b8c <_scanf_float+0x60>
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004cb2:	6022      	str	r2, [r4, #0]
 8004cb4:	f806 3b01 	strb.w	r3, [r6], #1
 8004cb8:	e7e4      	b.n	8004c84 <_scanf_float+0x158>
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	0610      	lsls	r0, r2, #24
 8004cbe:	f57f af65 	bpl.w	8004b8c <_scanf_float+0x60>
 8004cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc6:	e7f4      	b.n	8004cb2 <_scanf_float+0x186>
 8004cc8:	f1ba 0f00 	cmp.w	sl, #0
 8004ccc:	d10e      	bne.n	8004cec <_scanf_float+0x1c0>
 8004cce:	f1b9 0f00 	cmp.w	r9, #0
 8004cd2:	d10e      	bne.n	8004cf2 <_scanf_float+0x1c6>
 8004cd4:	6822      	ldr	r2, [r4, #0]
 8004cd6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004cda:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004cde:	d108      	bne.n	8004cf2 <_scanf_float+0x1c6>
 8004ce0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ce4:	6022      	str	r2, [r4, #0]
 8004ce6:	f04f 0a01 	mov.w	sl, #1
 8004cea:	e7e3      	b.n	8004cb4 <_scanf_float+0x188>
 8004cec:	f1ba 0f02 	cmp.w	sl, #2
 8004cf0:	d055      	beq.n	8004d9e <_scanf_float+0x272>
 8004cf2:	2d01      	cmp	r5, #1
 8004cf4:	d002      	beq.n	8004cfc <_scanf_float+0x1d0>
 8004cf6:	2d04      	cmp	r5, #4
 8004cf8:	f47f af48 	bne.w	8004b8c <_scanf_float+0x60>
 8004cfc:	3501      	adds	r5, #1
 8004cfe:	b2ed      	uxtb	r5, r5
 8004d00:	e7d8      	b.n	8004cb4 <_scanf_float+0x188>
 8004d02:	f1ba 0f01 	cmp.w	sl, #1
 8004d06:	f47f af41 	bne.w	8004b8c <_scanf_float+0x60>
 8004d0a:	f04f 0a02 	mov.w	sl, #2
 8004d0e:	e7d1      	b.n	8004cb4 <_scanf_float+0x188>
 8004d10:	b97d      	cbnz	r5, 8004d32 <_scanf_float+0x206>
 8004d12:	f1b9 0f00 	cmp.w	r9, #0
 8004d16:	f47f af3c 	bne.w	8004b92 <_scanf_float+0x66>
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d24:	f47f af39 	bne.w	8004b9a <_scanf_float+0x6e>
 8004d28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d2c:	6022      	str	r2, [r4, #0]
 8004d2e:	2501      	movs	r5, #1
 8004d30:	e7c0      	b.n	8004cb4 <_scanf_float+0x188>
 8004d32:	2d03      	cmp	r5, #3
 8004d34:	d0e2      	beq.n	8004cfc <_scanf_float+0x1d0>
 8004d36:	2d05      	cmp	r5, #5
 8004d38:	e7de      	b.n	8004cf8 <_scanf_float+0x1cc>
 8004d3a:	2d02      	cmp	r5, #2
 8004d3c:	f47f af26 	bne.w	8004b8c <_scanf_float+0x60>
 8004d40:	2503      	movs	r5, #3
 8004d42:	e7b7      	b.n	8004cb4 <_scanf_float+0x188>
 8004d44:	2d06      	cmp	r5, #6
 8004d46:	f47f af21 	bne.w	8004b8c <_scanf_float+0x60>
 8004d4a:	2507      	movs	r5, #7
 8004d4c:	e7b2      	b.n	8004cb4 <_scanf_float+0x188>
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	0591      	lsls	r1, r2, #22
 8004d52:	f57f af1b 	bpl.w	8004b8c <_scanf_float+0x60>
 8004d56:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004d5a:	6022      	str	r2, [r4, #0]
 8004d5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d60:	e7a8      	b.n	8004cb4 <_scanf_float+0x188>
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004d68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004d6c:	d006      	beq.n	8004d7c <_scanf_float+0x250>
 8004d6e:	0550      	lsls	r0, r2, #21
 8004d70:	f57f af0c 	bpl.w	8004b8c <_scanf_float+0x60>
 8004d74:	f1b9 0f00 	cmp.w	r9, #0
 8004d78:	f43f af0f 	beq.w	8004b9a <_scanf_float+0x6e>
 8004d7c:	0591      	lsls	r1, r2, #22
 8004d7e:	bf58      	it	pl
 8004d80:	9901      	ldrpl	r1, [sp, #4]
 8004d82:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d86:	bf58      	it	pl
 8004d88:	eba9 0101 	subpl.w	r1, r9, r1
 8004d8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004d90:	bf58      	it	pl
 8004d92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004d96:	6022      	str	r2, [r4, #0]
 8004d98:	f04f 0900 	mov.w	r9, #0
 8004d9c:	e78a      	b.n	8004cb4 <_scanf_float+0x188>
 8004d9e:	f04f 0a03 	mov.w	sl, #3
 8004da2:	e787      	b.n	8004cb4 <_scanf_float+0x188>
 8004da4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004da8:	4639      	mov	r1, r7
 8004daa:	4640      	mov	r0, r8
 8004dac:	4798      	blx	r3
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f43f aedf 	beq.w	8004b72 <_scanf_float+0x46>
 8004db4:	e6ea      	b.n	8004b8c <_scanf_float+0x60>
 8004db6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004dbe:	463a      	mov	r2, r7
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	4798      	blx	r3
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	e6ec      	b.n	8004ba6 <_scanf_float+0x7a>
 8004dcc:	1e6b      	subs	r3, r5, #1
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d825      	bhi.n	8004e1e <_scanf_float+0x2f2>
 8004dd2:	2d02      	cmp	r5, #2
 8004dd4:	d836      	bhi.n	8004e44 <_scanf_float+0x318>
 8004dd6:	455e      	cmp	r6, fp
 8004dd8:	f67f aee8 	bls.w	8004bac <_scanf_float+0x80>
 8004ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004de0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004de4:	463a      	mov	r2, r7
 8004de6:	4640      	mov	r0, r8
 8004de8:	4798      	blx	r3
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	e7f1      	b.n	8004dd6 <_scanf_float+0x2aa>
 8004df2:	9802      	ldr	r0, [sp, #8]
 8004df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004df8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004dfc:	9002      	str	r0, [sp, #8]
 8004dfe:	463a      	mov	r2, r7
 8004e00:	4640      	mov	r0, r8
 8004e02:	4798      	blx	r3
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e0e:	fa5f fa8a 	uxtb.w	sl, sl
 8004e12:	f1ba 0f02 	cmp.w	sl, #2
 8004e16:	d1ec      	bne.n	8004df2 <_scanf_float+0x2c6>
 8004e18:	3d03      	subs	r5, #3
 8004e1a:	b2ed      	uxtb	r5, r5
 8004e1c:	1b76      	subs	r6, r6, r5
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	05da      	lsls	r2, r3, #23
 8004e22:	d52f      	bpl.n	8004e84 <_scanf_float+0x358>
 8004e24:	055b      	lsls	r3, r3, #21
 8004e26:	d510      	bpl.n	8004e4a <_scanf_float+0x31e>
 8004e28:	455e      	cmp	r6, fp
 8004e2a:	f67f aebf 	bls.w	8004bac <_scanf_float+0x80>
 8004e2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e36:	463a      	mov	r2, r7
 8004e38:	4640      	mov	r0, r8
 8004e3a:	4798      	blx	r3
 8004e3c:	6923      	ldr	r3, [r4, #16]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	6123      	str	r3, [r4, #16]
 8004e42:	e7f1      	b.n	8004e28 <_scanf_float+0x2fc>
 8004e44:	46aa      	mov	sl, r5
 8004e46:	9602      	str	r6, [sp, #8]
 8004e48:	e7df      	b.n	8004e0a <_scanf_float+0x2de>
 8004e4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	2965      	cmp	r1, #101	; 0x65
 8004e52:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e56:	f106 35ff 	add.w	r5, r6, #4294967295
 8004e5a:	6123      	str	r3, [r4, #16]
 8004e5c:	d00c      	beq.n	8004e78 <_scanf_float+0x34c>
 8004e5e:	2945      	cmp	r1, #69	; 0x45
 8004e60:	d00a      	beq.n	8004e78 <_scanf_float+0x34c>
 8004e62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e66:	463a      	mov	r2, r7
 8004e68:	4640      	mov	r0, r8
 8004e6a:	4798      	blx	r3
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	1eb5      	subs	r5, r6, #2
 8004e76:	6123      	str	r3, [r4, #16]
 8004e78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e7c:	463a      	mov	r2, r7
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4798      	blx	r3
 8004e82:	462e      	mov	r6, r5
 8004e84:	6825      	ldr	r5, [r4, #0]
 8004e86:	f015 0510 	ands.w	r5, r5, #16
 8004e8a:	d158      	bne.n	8004f3e <_scanf_float+0x412>
 8004e8c:	7035      	strb	r5, [r6, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d11c      	bne.n	8004ed4 <_scanf_float+0x3a8>
 8004e9a:	9b01      	ldr	r3, [sp, #4]
 8004e9c:	454b      	cmp	r3, r9
 8004e9e:	eba3 0209 	sub.w	r2, r3, r9
 8004ea2:	d124      	bne.n	8004eee <_scanf_float+0x3c2>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4659      	mov	r1, fp
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	f002 fc59 	bl	8007760 <_strtod_r>
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	6821      	ldr	r1, [r4, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f011 0f02 	tst.w	r1, #2
 8004eb8:	ec57 6b10 	vmov	r6, r7, d0
 8004ebc:	f103 0204 	add.w	r2, r3, #4
 8004ec0:	d020      	beq.n	8004f04 <_scanf_float+0x3d8>
 8004ec2:	9903      	ldr	r1, [sp, #12]
 8004ec4:	600a      	str	r2, [r1, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	e9c3 6700 	strd	r6, r7, [r3]
 8004ecc:	68e3      	ldr	r3, [r4, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60e3      	str	r3, [r4, #12]
 8004ed2:	e66c      	b.n	8004bae <_scanf_float+0x82>
 8004ed4:	9b04      	ldr	r3, [sp, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0e4      	beq.n	8004ea4 <_scanf_float+0x378>
 8004eda:	9905      	ldr	r1, [sp, #20]
 8004edc:	230a      	movs	r3, #10
 8004ede:	462a      	mov	r2, r5
 8004ee0:	3101      	adds	r1, #1
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	f002 fcc4 	bl	8007870 <_strtol_r>
 8004ee8:	9b04      	ldr	r3, [sp, #16]
 8004eea:	9e05      	ldr	r6, [sp, #20]
 8004eec:	1ac2      	subs	r2, r0, r3
 8004eee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004ef2:	429e      	cmp	r6, r3
 8004ef4:	bf28      	it	cs
 8004ef6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004efa:	4912      	ldr	r1, [pc, #72]	; (8004f44 <_scanf_float+0x418>)
 8004efc:	4630      	mov	r0, r6
 8004efe:	f000 f8d5 	bl	80050ac <siprintf>
 8004f02:	e7cf      	b.n	8004ea4 <_scanf_float+0x378>
 8004f04:	f011 0f04 	tst.w	r1, #4
 8004f08:	9903      	ldr	r1, [sp, #12]
 8004f0a:	600a      	str	r2, [r1, #0]
 8004f0c:	d1db      	bne.n	8004ec6 <_scanf_float+0x39a>
 8004f0e:	f8d3 8000 	ldr.w	r8, [r3]
 8004f12:	ee10 2a10 	vmov	r2, s0
 8004f16:	ee10 0a10 	vmov	r0, s0
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	f7fb fe25 	bl	8000b6c <__aeabi_dcmpun>
 8004f22:	b128      	cbz	r0, 8004f30 <_scanf_float+0x404>
 8004f24:	4808      	ldr	r0, [pc, #32]	; (8004f48 <_scanf_float+0x41c>)
 8004f26:	f000 fa77 	bl	8005418 <nanf>
 8004f2a:	ed88 0a00 	vstr	s0, [r8]
 8004f2e:	e7cd      	b.n	8004ecc <_scanf_float+0x3a0>
 8004f30:	4630      	mov	r0, r6
 8004f32:	4639      	mov	r1, r7
 8004f34:	f7fb fe78 	bl	8000c28 <__aeabi_d2f>
 8004f38:	f8c8 0000 	str.w	r0, [r8]
 8004f3c:	e7c6      	b.n	8004ecc <_scanf_float+0x3a0>
 8004f3e:	2500      	movs	r5, #0
 8004f40:	e635      	b.n	8004bae <_scanf_float+0x82>
 8004f42:	bf00      	nop
 8004f44:	0800a14e 	.word	0x0800a14e
 8004f48:	0800a1ff 	.word	0x0800a1ff

08004f4c <std>:
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	4604      	mov	r4, r0
 8004f52:	e9c0 3300 	strd	r3, r3, [r0]
 8004f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f5a:	6083      	str	r3, [r0, #8]
 8004f5c:	8181      	strh	r1, [r0, #12]
 8004f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f60:	81c2      	strh	r2, [r0, #14]
 8004f62:	6183      	str	r3, [r0, #24]
 8004f64:	4619      	mov	r1, r3
 8004f66:	2208      	movs	r2, #8
 8004f68:	305c      	adds	r0, #92	; 0x5c
 8004f6a:	f000 f930 	bl	80051ce <memset>
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <std+0x38>)
 8004f70:	6263      	str	r3, [r4, #36]	; 0x24
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <std+0x3c>)
 8004f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <std+0x40>)
 8004f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <std+0x44>)
 8004f7c:	6224      	str	r4, [r4, #32]
 8004f7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004f80:	bd10      	pop	{r4, pc}
 8004f82:	bf00      	nop
 8004f84:	08005145 	.word	0x08005145
 8004f88:	0800516b 	.word	0x0800516b
 8004f8c:	080051a3 	.word	0x080051a3
 8004f90:	080051c7 	.word	0x080051c7

08004f94 <stdio_exit_handler>:
 8004f94:	4a02      	ldr	r2, [pc, #8]	; (8004fa0 <stdio_exit_handler+0xc>)
 8004f96:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <stdio_exit_handler+0x10>)
 8004f98:	4803      	ldr	r0, [pc, #12]	; (8004fa8 <stdio_exit_handler+0x14>)
 8004f9a:	f000 b869 	b.w	8005070 <_fwalk_sglue>
 8004f9e:	bf00      	nop
 8004fa0:	20000028 	.word	0x20000028
 8004fa4:	08008271 	.word	0x08008271
 8004fa8:	20000034 	.word	0x20000034

08004fac <cleanup_stdio>:
 8004fac:	6841      	ldr	r1, [r0, #4]
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <cleanup_stdio+0x34>)
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	d001      	beq.n	8004fbc <cleanup_stdio+0x10>
 8004fb8:	f003 f95a 	bl	8008270 <_fflush_r>
 8004fbc:	68a1      	ldr	r1, [r4, #8]
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <cleanup_stdio+0x38>)
 8004fc0:	4299      	cmp	r1, r3
 8004fc2:	d002      	beq.n	8004fca <cleanup_stdio+0x1e>
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f003 f953 	bl	8008270 <_fflush_r>
 8004fca:	68e1      	ldr	r1, [r4, #12]
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <cleanup_stdio+0x3c>)
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	d004      	beq.n	8004fdc <cleanup_stdio+0x30>
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd8:	f003 b94a 	b.w	8008270 <_fflush_r>
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000354 	.word	0x20000354
 8004fe4:	200003bc 	.word	0x200003bc
 8004fe8:	20000424 	.word	0x20000424

08004fec <global_stdio_init.part.0>:
 8004fec:	b510      	push	{r4, lr}
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <global_stdio_init.part.0+0x30>)
 8004ff0:	4c0b      	ldr	r4, [pc, #44]	; (8005020 <global_stdio_init.part.0+0x34>)
 8004ff2:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <global_stdio_init.part.0+0x38>)
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2104      	movs	r1, #4
 8004ffc:	f7ff ffa6 	bl	8004f4c <std>
 8005000:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005004:	2201      	movs	r2, #1
 8005006:	2109      	movs	r1, #9
 8005008:	f7ff ffa0 	bl	8004f4c <std>
 800500c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005010:	2202      	movs	r2, #2
 8005012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005016:	2112      	movs	r1, #18
 8005018:	f7ff bf98 	b.w	8004f4c <std>
 800501c:	2000048c 	.word	0x2000048c
 8005020:	20000354 	.word	0x20000354
 8005024:	08004f95 	.word	0x08004f95

08005028 <__sfp_lock_acquire>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__sfp_lock_acquire+0x8>)
 800502a:	f000 b9dd 	b.w	80053e8 <__retarget_lock_acquire_recursive>
 800502e:	bf00      	nop
 8005030:	20000495 	.word	0x20000495

08005034 <__sfp_lock_release>:
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <__sfp_lock_release+0x8>)
 8005036:	f000 b9d8 	b.w	80053ea <__retarget_lock_release_recursive>
 800503a:	bf00      	nop
 800503c:	20000495 	.word	0x20000495

08005040 <__sinit>:
 8005040:	b510      	push	{r4, lr}
 8005042:	4604      	mov	r4, r0
 8005044:	f7ff fff0 	bl	8005028 <__sfp_lock_acquire>
 8005048:	6a23      	ldr	r3, [r4, #32]
 800504a:	b11b      	cbz	r3, 8005054 <__sinit+0x14>
 800504c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005050:	f7ff bff0 	b.w	8005034 <__sfp_lock_release>
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <__sinit+0x28>)
 8005056:	6223      	str	r3, [r4, #32]
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <__sinit+0x2c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f5      	bne.n	800504c <__sinit+0xc>
 8005060:	f7ff ffc4 	bl	8004fec <global_stdio_init.part.0>
 8005064:	e7f2      	b.n	800504c <__sinit+0xc>
 8005066:	bf00      	nop
 8005068:	08004fad 	.word	0x08004fad
 800506c:	2000048c 	.word	0x2000048c

08005070 <_fwalk_sglue>:
 8005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005074:	4607      	mov	r7, r0
 8005076:	4688      	mov	r8, r1
 8005078:	4614      	mov	r4, r2
 800507a:	2600      	movs	r6, #0
 800507c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005080:	f1b9 0901 	subs.w	r9, r9, #1
 8005084:	d505      	bpl.n	8005092 <_fwalk_sglue+0x22>
 8005086:	6824      	ldr	r4, [r4, #0]
 8005088:	2c00      	cmp	r4, #0
 800508a:	d1f7      	bne.n	800507c <_fwalk_sglue+0xc>
 800508c:	4630      	mov	r0, r6
 800508e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005092:	89ab      	ldrh	r3, [r5, #12]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d907      	bls.n	80050a8 <_fwalk_sglue+0x38>
 8005098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800509c:	3301      	adds	r3, #1
 800509e:	d003      	beq.n	80050a8 <_fwalk_sglue+0x38>
 80050a0:	4629      	mov	r1, r5
 80050a2:	4638      	mov	r0, r7
 80050a4:	47c0      	blx	r8
 80050a6:	4306      	orrs	r6, r0
 80050a8:	3568      	adds	r5, #104	; 0x68
 80050aa:	e7e9      	b.n	8005080 <_fwalk_sglue+0x10>

080050ac <siprintf>:
 80050ac:	b40e      	push	{r1, r2, r3}
 80050ae:	b500      	push	{lr}
 80050b0:	b09c      	sub	sp, #112	; 0x70
 80050b2:	ab1d      	add	r3, sp, #116	; 0x74
 80050b4:	9002      	str	r0, [sp, #8]
 80050b6:	9006      	str	r0, [sp, #24]
 80050b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050bc:	4809      	ldr	r0, [pc, #36]	; (80050e4 <siprintf+0x38>)
 80050be:	9107      	str	r1, [sp, #28]
 80050c0:	9104      	str	r1, [sp, #16]
 80050c2:	4909      	ldr	r1, [pc, #36]	; (80050e8 <siprintf+0x3c>)
 80050c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c8:	9105      	str	r1, [sp, #20]
 80050ca:	6800      	ldr	r0, [r0, #0]
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	a902      	add	r1, sp, #8
 80050d0:	f002 fc2a 	bl	8007928 <_svfiprintf_r>
 80050d4:	9b02      	ldr	r3, [sp, #8]
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	b01c      	add	sp, #112	; 0x70
 80050dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e0:	b003      	add	sp, #12
 80050e2:	4770      	bx	lr
 80050e4:	20000080 	.word	0x20000080
 80050e8:	ffff0208 	.word	0xffff0208

080050ec <siscanf>:
 80050ec:	b40e      	push	{r1, r2, r3}
 80050ee:	b510      	push	{r4, lr}
 80050f0:	b09f      	sub	sp, #124	; 0x7c
 80050f2:	ac21      	add	r4, sp, #132	; 0x84
 80050f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80050f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80050fc:	9201      	str	r2, [sp, #4]
 80050fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005102:	9004      	str	r0, [sp, #16]
 8005104:	9008      	str	r0, [sp, #32]
 8005106:	f7fb f8d3 	bl	80002b0 <strlen>
 800510a:	4b0c      	ldr	r3, [pc, #48]	; (800513c <siscanf+0x50>)
 800510c:	9005      	str	r0, [sp, #20]
 800510e:	9009      	str	r0, [sp, #36]	; 0x24
 8005110:	930d      	str	r3, [sp, #52]	; 0x34
 8005112:	480b      	ldr	r0, [pc, #44]	; (8005140 <siscanf+0x54>)
 8005114:	9a01      	ldr	r2, [sp, #4]
 8005116:	6800      	ldr	r0, [r0, #0]
 8005118:	9403      	str	r4, [sp, #12]
 800511a:	2300      	movs	r3, #0
 800511c:	9311      	str	r3, [sp, #68]	; 0x44
 800511e:	9316      	str	r3, [sp, #88]	; 0x58
 8005120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005124:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005128:	a904      	add	r1, sp, #16
 800512a:	4623      	mov	r3, r4
 800512c:	f002 fd54 	bl	8007bd8 <__ssvfiscanf_r>
 8005130:	b01f      	add	sp, #124	; 0x7c
 8005132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005136:	b003      	add	sp, #12
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	08005167 	.word	0x08005167
 8005140:	20000080 	.word	0x20000080

08005144 <__sread>:
 8005144:	b510      	push	{r4, lr}
 8005146:	460c      	mov	r4, r1
 8005148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514c:	f000 f8ee 	bl	800532c <_read_r>
 8005150:	2800      	cmp	r0, #0
 8005152:	bfab      	itete	ge
 8005154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005156:	89a3      	ldrhlt	r3, [r4, #12]
 8005158:	181b      	addge	r3, r3, r0
 800515a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800515e:	bfac      	ite	ge
 8005160:	6563      	strge	r3, [r4, #84]	; 0x54
 8005162:	81a3      	strhlt	r3, [r4, #12]
 8005164:	bd10      	pop	{r4, pc}

08005166 <__seofread>:
 8005166:	2000      	movs	r0, #0
 8005168:	4770      	bx	lr

0800516a <__swrite>:
 800516a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516e:	461f      	mov	r7, r3
 8005170:	898b      	ldrh	r3, [r1, #12]
 8005172:	05db      	lsls	r3, r3, #23
 8005174:	4605      	mov	r5, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4616      	mov	r6, r2
 800517a:	d505      	bpl.n	8005188 <__swrite+0x1e>
 800517c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005180:	2302      	movs	r3, #2
 8005182:	2200      	movs	r2, #0
 8005184:	f000 f8c0 	bl	8005308 <_lseek_r>
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800518e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	4632      	mov	r2, r6
 8005196:	463b      	mov	r3, r7
 8005198:	4628      	mov	r0, r5
 800519a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800519e:	f000 b8e7 	b.w	8005370 <_write_r>

080051a2 <__sseek>:
 80051a2:	b510      	push	{r4, lr}
 80051a4:	460c      	mov	r4, r1
 80051a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051aa:	f000 f8ad 	bl	8005308 <_lseek_r>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	bf15      	itete	ne
 80051b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80051b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051be:	81a3      	strheq	r3, [r4, #12]
 80051c0:	bf18      	it	ne
 80051c2:	81a3      	strhne	r3, [r4, #12]
 80051c4:	bd10      	pop	{r4, pc}

080051c6 <__sclose>:
 80051c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ca:	f000 b88d 	b.w	80052e8 <_close_r>

080051ce <memset>:
 80051ce:	4402      	add	r2, r0
 80051d0:	4603      	mov	r3, r0
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d100      	bne.n	80051d8 <memset+0xa>
 80051d6:	4770      	bx	lr
 80051d8:	f803 1b01 	strb.w	r1, [r3], #1
 80051dc:	e7f9      	b.n	80051d2 <memset+0x4>

080051de <strcat>:
 80051de:	b510      	push	{r4, lr}
 80051e0:	4602      	mov	r2, r0
 80051e2:	7814      	ldrb	r4, [r2, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	3201      	adds	r2, #1
 80051e8:	2c00      	cmp	r4, #0
 80051ea:	d1fa      	bne.n	80051e2 <strcat+0x4>
 80051ec:	3b01      	subs	r3, #1
 80051ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	d1f9      	bne.n	80051ee <strcat+0x10>
 80051fa:	bd10      	pop	{r4, pc}

080051fc <strtok>:
 80051fc:	4b16      	ldr	r3, [pc, #88]	; (8005258 <strtok+0x5c>)
 80051fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005200:	681e      	ldr	r6, [r3, #0]
 8005202:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005204:	4605      	mov	r5, r0
 8005206:	b9fc      	cbnz	r4, 8005248 <strtok+0x4c>
 8005208:	2050      	movs	r0, #80	; 0x50
 800520a:	9101      	str	r1, [sp, #4]
 800520c:	f7fe ff74 	bl	80040f8 <malloc>
 8005210:	9901      	ldr	r1, [sp, #4]
 8005212:	6470      	str	r0, [r6, #68]	; 0x44
 8005214:	4602      	mov	r2, r0
 8005216:	b920      	cbnz	r0, 8005222 <strtok+0x26>
 8005218:	4b10      	ldr	r3, [pc, #64]	; (800525c <strtok+0x60>)
 800521a:	4811      	ldr	r0, [pc, #68]	; (8005260 <strtok+0x64>)
 800521c:	215b      	movs	r1, #91	; 0x5b
 800521e:	f000 f901 	bl	8005424 <__assert_func>
 8005222:	e9c0 4400 	strd	r4, r4, [r0]
 8005226:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800522a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800522e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005232:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005236:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800523a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800523e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005242:	6184      	str	r4, [r0, #24]
 8005244:	7704      	strb	r4, [r0, #28]
 8005246:	6244      	str	r4, [r0, #36]	; 0x24
 8005248:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800524a:	2301      	movs	r3, #1
 800524c:	4628      	mov	r0, r5
 800524e:	b002      	add	sp, #8
 8005250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005254:	f000 b806 	b.w	8005264 <__strtok_r>
 8005258:	20000080 	.word	0x20000080
 800525c:	0800a153 	.word	0x0800a153
 8005260:	0800a16a 	.word	0x0800a16a

08005264 <__strtok_r>:
 8005264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005266:	b908      	cbnz	r0, 800526c <__strtok_r+0x8>
 8005268:	6810      	ldr	r0, [r2, #0]
 800526a:	b188      	cbz	r0, 8005290 <__strtok_r+0x2c>
 800526c:	4604      	mov	r4, r0
 800526e:	4620      	mov	r0, r4
 8005270:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005274:	460f      	mov	r7, r1
 8005276:	f817 6b01 	ldrb.w	r6, [r7], #1
 800527a:	b91e      	cbnz	r6, 8005284 <__strtok_r+0x20>
 800527c:	b965      	cbnz	r5, 8005298 <__strtok_r+0x34>
 800527e:	6015      	str	r5, [r2, #0]
 8005280:	4628      	mov	r0, r5
 8005282:	e005      	b.n	8005290 <__strtok_r+0x2c>
 8005284:	42b5      	cmp	r5, r6
 8005286:	d1f6      	bne.n	8005276 <__strtok_r+0x12>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <__strtok_r+0xa>
 800528c:	6014      	str	r4, [r2, #0]
 800528e:	7003      	strb	r3, [r0, #0]
 8005290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005292:	461c      	mov	r4, r3
 8005294:	e00c      	b.n	80052b0 <__strtok_r+0x4c>
 8005296:	b915      	cbnz	r5, 800529e <__strtok_r+0x3a>
 8005298:	f814 3b01 	ldrb.w	r3, [r4], #1
 800529c:	460e      	mov	r6, r1
 800529e:	f816 5b01 	ldrb.w	r5, [r6], #1
 80052a2:	42ab      	cmp	r3, r5
 80052a4:	d1f7      	bne.n	8005296 <__strtok_r+0x32>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f3      	beq.n	8005292 <__strtok_r+0x2e>
 80052aa:	2300      	movs	r3, #0
 80052ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 80052b0:	6014      	str	r4, [r2, #0]
 80052b2:	e7ed      	b.n	8005290 <__strtok_r+0x2c>

080052b4 <strstr>:
 80052b4:	780a      	ldrb	r2, [r1, #0]
 80052b6:	b570      	push	{r4, r5, r6, lr}
 80052b8:	b96a      	cbnz	r2, 80052d6 <strstr+0x22>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	429a      	cmp	r2, r3
 80052be:	d109      	bne.n	80052d4 <strstr+0x20>
 80052c0:	460c      	mov	r4, r1
 80052c2:	4605      	mov	r5, r0
 80052c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f6      	beq.n	80052ba <strstr+0x6>
 80052cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80052d0:	429e      	cmp	r6, r3
 80052d2:	d0f7      	beq.n	80052c4 <strstr+0x10>
 80052d4:	3001      	adds	r0, #1
 80052d6:	7803      	ldrb	r3, [r0, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ef      	bne.n	80052bc <strstr+0x8>
 80052dc:	4618      	mov	r0, r3
 80052de:	e7ec      	b.n	80052ba <strstr+0x6>

080052e0 <_localeconv_r>:
 80052e0:	4800      	ldr	r0, [pc, #0]	; (80052e4 <_localeconv_r+0x4>)
 80052e2:	4770      	bx	lr
 80052e4:	20000174 	.word	0x20000174

080052e8 <_close_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4d06      	ldr	r5, [pc, #24]	; (8005304 <_close_r+0x1c>)
 80052ec:	2300      	movs	r3, #0
 80052ee:	4604      	mov	r4, r0
 80052f0:	4608      	mov	r0, r1
 80052f2:	602b      	str	r3, [r5, #0]
 80052f4:	f7fc fc6b 	bl	8001bce <_close>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_close_r+0x1a>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_close_r+0x1a>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	20000490 	.word	0x20000490

08005308 <_lseek_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d07      	ldr	r5, [pc, #28]	; (8005328 <_lseek_r+0x20>)
 800530c:	4604      	mov	r4, r0
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	2200      	movs	r2, #0
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f7fc fc80 	bl	8001c1c <_lseek>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_lseek_r+0x1e>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_lseek_r+0x1e>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	20000490 	.word	0x20000490

0800532c <_read_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d07      	ldr	r5, [pc, #28]	; (800534c <_read_r+0x20>)
 8005330:	4604      	mov	r4, r0
 8005332:	4608      	mov	r0, r1
 8005334:	4611      	mov	r1, r2
 8005336:	2200      	movs	r2, #0
 8005338:	602a      	str	r2, [r5, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f7fc fc0e 	bl	8001b5c <_read>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_read_r+0x1e>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_read_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20000490 	.word	0x20000490

08005350 <_sbrk_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4d06      	ldr	r5, [pc, #24]	; (800536c <_sbrk_r+0x1c>)
 8005354:	2300      	movs	r3, #0
 8005356:	4604      	mov	r4, r0
 8005358:	4608      	mov	r0, r1
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	f7fc fc6c 	bl	8001c38 <_sbrk>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_sbrk_r+0x1a>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	b103      	cbz	r3, 800536a <_sbrk_r+0x1a>
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	20000490 	.word	0x20000490

08005370 <_write_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d07      	ldr	r5, [pc, #28]	; (8005390 <_write_r+0x20>)
 8005374:	4604      	mov	r4, r0
 8005376:	4608      	mov	r0, r1
 8005378:	4611      	mov	r1, r2
 800537a:	2200      	movs	r2, #0
 800537c:	602a      	str	r2, [r5, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	f7fc fc09 	bl	8001b96 <_write>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_write_r+0x1e>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_write_r+0x1e>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	20000490 	.word	0x20000490

08005394 <__errno>:
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <__errno+0x8>)
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000080 	.word	0x20000080

080053a0 <__libc_init_array>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	4d0d      	ldr	r5, [pc, #52]	; (80053d8 <__libc_init_array+0x38>)
 80053a4:	4c0d      	ldr	r4, [pc, #52]	; (80053dc <__libc_init_array+0x3c>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	2600      	movs	r6, #0
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d109      	bne.n	80053c4 <__libc_init_array+0x24>
 80053b0:	4d0b      	ldr	r5, [pc, #44]	; (80053e0 <__libc_init_array+0x40>)
 80053b2:	4c0c      	ldr	r4, [pc, #48]	; (80053e4 <__libc_init_array+0x44>)
 80053b4:	f004 fe58 	bl	800a068 <_init>
 80053b8:	1b64      	subs	r4, r4, r5
 80053ba:	10a4      	asrs	r4, r4, #2
 80053bc:	2600      	movs	r6, #0
 80053be:	42a6      	cmp	r6, r4
 80053c0:	d105      	bne.n	80053ce <__libc_init_array+0x2e>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c8:	4798      	blx	r3
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7ee      	b.n	80053ac <__libc_init_array+0xc>
 80053ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d2:	4798      	blx	r3
 80053d4:	3601      	adds	r6, #1
 80053d6:	e7f2      	b.n	80053be <__libc_init_array+0x1e>
 80053d8:	0800a5f0 	.word	0x0800a5f0
 80053dc:	0800a5f0 	.word	0x0800a5f0
 80053e0:	0800a5f0 	.word	0x0800a5f0
 80053e4:	0800a5f4 	.word	0x0800a5f4

080053e8 <__retarget_lock_acquire_recursive>:
 80053e8:	4770      	bx	lr

080053ea <__retarget_lock_release_recursive>:
 80053ea:	4770      	bx	lr

080053ec <strcpy>:
 80053ec:	4603      	mov	r3, r0
 80053ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053f2:	f803 2b01 	strb.w	r2, [r3], #1
 80053f6:	2a00      	cmp	r2, #0
 80053f8:	d1f9      	bne.n	80053ee <strcpy+0x2>
 80053fa:	4770      	bx	lr

080053fc <memcpy>:
 80053fc:	440a      	add	r2, r1
 80053fe:	4291      	cmp	r1, r2
 8005400:	f100 33ff 	add.w	r3, r0, #4294967295
 8005404:	d100      	bne.n	8005408 <memcpy+0xc>
 8005406:	4770      	bx	lr
 8005408:	b510      	push	{r4, lr}
 800540a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800540e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005412:	4291      	cmp	r1, r2
 8005414:	d1f9      	bne.n	800540a <memcpy+0xe>
 8005416:	bd10      	pop	{r4, pc}

08005418 <nanf>:
 8005418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005420 <nanf+0x8>
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	7fc00000 	.word	0x7fc00000

08005424 <__assert_func>:
 8005424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005426:	4614      	mov	r4, r2
 8005428:	461a      	mov	r2, r3
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <__assert_func+0x2c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4605      	mov	r5, r0
 8005430:	68d8      	ldr	r0, [r3, #12]
 8005432:	b14c      	cbz	r4, 8005448 <__assert_func+0x24>
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <__assert_func+0x30>)
 8005436:	9100      	str	r1, [sp, #0]
 8005438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800543c:	4906      	ldr	r1, [pc, #24]	; (8005458 <__assert_func+0x34>)
 800543e:	462b      	mov	r3, r5
 8005440:	f002 ff3e 	bl	80082c0 <fiprintf>
 8005444:	f002 fff8 	bl	8008438 <abort>
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <__assert_func+0x38>)
 800544a:	461c      	mov	r4, r3
 800544c:	e7f3      	b.n	8005436 <__assert_func+0x12>
 800544e:	bf00      	nop
 8005450:	20000080 	.word	0x20000080
 8005454:	0800a1c4 	.word	0x0800a1c4
 8005458:	0800a1d1 	.word	0x0800a1d1
 800545c:	0800a1ff 	.word	0x0800a1ff

08005460 <quorem>:
 8005460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	6903      	ldr	r3, [r0, #16]
 8005466:	690c      	ldr	r4, [r1, #16]
 8005468:	42a3      	cmp	r3, r4
 800546a:	4607      	mov	r7, r0
 800546c:	db7e      	blt.n	800556c <quorem+0x10c>
 800546e:	3c01      	subs	r4, #1
 8005470:	f101 0814 	add.w	r8, r1, #20
 8005474:	f100 0514 	add.w	r5, r0, #20
 8005478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005486:	3301      	adds	r3, #1
 8005488:	429a      	cmp	r2, r3
 800548a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800548e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005492:	fbb2 f6f3 	udiv	r6, r2, r3
 8005496:	d331      	bcc.n	80054fc <quorem+0x9c>
 8005498:	f04f 0e00 	mov.w	lr, #0
 800549c:	4640      	mov	r0, r8
 800549e:	46ac      	mov	ip, r5
 80054a0:	46f2      	mov	sl, lr
 80054a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80054a6:	b293      	uxth	r3, r2
 80054a8:	fb06 e303 	mla	r3, r6, r3, lr
 80054ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054b0:	0c1a      	lsrs	r2, r3, #16
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	ebaa 0303 	sub.w	r3, sl, r3
 80054b8:	f8dc a000 	ldr.w	sl, [ip]
 80054bc:	fa13 f38a 	uxtah	r3, r3, sl
 80054c0:	fb06 220e 	mla	r2, r6, lr, r2
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	9b00      	ldr	r3, [sp, #0]
 80054c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054cc:	b292      	uxth	r2, r2
 80054ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80054d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80054da:	4581      	cmp	r9, r0
 80054dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054e0:	f84c 3b04 	str.w	r3, [ip], #4
 80054e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054e8:	d2db      	bcs.n	80054a2 <quorem+0x42>
 80054ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80054ee:	b92b      	cbnz	r3, 80054fc <quorem+0x9c>
 80054f0:	9b01      	ldr	r3, [sp, #4]
 80054f2:	3b04      	subs	r3, #4
 80054f4:	429d      	cmp	r5, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	d32c      	bcc.n	8005554 <quorem+0xf4>
 80054fa:	613c      	str	r4, [r7, #16]
 80054fc:	4638      	mov	r0, r7
 80054fe:	f001 f93b 	bl	8006778 <__mcmp>
 8005502:	2800      	cmp	r0, #0
 8005504:	db22      	blt.n	800554c <quorem+0xec>
 8005506:	3601      	adds	r6, #1
 8005508:	4629      	mov	r1, r5
 800550a:	2000      	movs	r0, #0
 800550c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005510:	f8d1 c000 	ldr.w	ip, [r1]
 8005514:	b293      	uxth	r3, r2
 8005516:	1ac3      	subs	r3, r0, r3
 8005518:	0c12      	lsrs	r2, r2, #16
 800551a:	fa13 f38c 	uxtah	r3, r3, ip
 800551e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005522:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005526:	b29b      	uxth	r3, r3
 8005528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800552c:	45c1      	cmp	r9, r8
 800552e:	f841 3b04 	str.w	r3, [r1], #4
 8005532:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005536:	d2e9      	bcs.n	800550c <quorem+0xac>
 8005538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800553c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005540:	b922      	cbnz	r2, 800554c <quorem+0xec>
 8005542:	3b04      	subs	r3, #4
 8005544:	429d      	cmp	r5, r3
 8005546:	461a      	mov	r2, r3
 8005548:	d30a      	bcc.n	8005560 <quorem+0x100>
 800554a:	613c      	str	r4, [r7, #16]
 800554c:	4630      	mov	r0, r6
 800554e:	b003      	add	sp, #12
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	3b04      	subs	r3, #4
 8005558:	2a00      	cmp	r2, #0
 800555a:	d1ce      	bne.n	80054fa <quorem+0x9a>
 800555c:	3c01      	subs	r4, #1
 800555e:	e7c9      	b.n	80054f4 <quorem+0x94>
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	3b04      	subs	r3, #4
 8005564:	2a00      	cmp	r2, #0
 8005566:	d1f0      	bne.n	800554a <quorem+0xea>
 8005568:	3c01      	subs	r4, #1
 800556a:	e7eb      	b.n	8005544 <quorem+0xe4>
 800556c:	2000      	movs	r0, #0
 800556e:	e7ee      	b.n	800554e <quorem+0xee>

08005570 <_dtoa_r>:
 8005570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	ed2d 8b04 	vpush	{d8-d9}
 8005578:	69c5      	ldr	r5, [r0, #28]
 800557a:	b093      	sub	sp, #76	; 0x4c
 800557c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005580:	ec57 6b10 	vmov	r6, r7, d0
 8005584:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005588:	9107      	str	r1, [sp, #28]
 800558a:	4604      	mov	r4, r0
 800558c:	920a      	str	r2, [sp, #40]	; 0x28
 800558e:	930d      	str	r3, [sp, #52]	; 0x34
 8005590:	b975      	cbnz	r5, 80055b0 <_dtoa_r+0x40>
 8005592:	2010      	movs	r0, #16
 8005594:	f7fe fdb0 	bl	80040f8 <malloc>
 8005598:	4602      	mov	r2, r0
 800559a:	61e0      	str	r0, [r4, #28]
 800559c:	b920      	cbnz	r0, 80055a8 <_dtoa_r+0x38>
 800559e:	4bae      	ldr	r3, [pc, #696]	; (8005858 <_dtoa_r+0x2e8>)
 80055a0:	21ef      	movs	r1, #239	; 0xef
 80055a2:	48ae      	ldr	r0, [pc, #696]	; (800585c <_dtoa_r+0x2ec>)
 80055a4:	f7ff ff3e 	bl	8005424 <__assert_func>
 80055a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055ac:	6005      	str	r5, [r0, #0]
 80055ae:	60c5      	str	r5, [r0, #12]
 80055b0:	69e3      	ldr	r3, [r4, #28]
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	b151      	cbz	r1, 80055cc <_dtoa_r+0x5c>
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	604a      	str	r2, [r1, #4]
 80055ba:	2301      	movs	r3, #1
 80055bc:	4093      	lsls	r3, r2
 80055be:	608b      	str	r3, [r1, #8]
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fe53 	bl	800626c <_Bfree>
 80055c6:	69e3      	ldr	r3, [r4, #28]
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	1e3b      	subs	r3, r7, #0
 80055ce:	bfbb      	ittet	lt
 80055d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055d4:	9303      	strlt	r3, [sp, #12]
 80055d6:	2300      	movge	r3, #0
 80055d8:	2201      	movlt	r2, #1
 80055da:	bfac      	ite	ge
 80055dc:	f8c8 3000 	strge.w	r3, [r8]
 80055e0:	f8c8 2000 	strlt.w	r2, [r8]
 80055e4:	4b9e      	ldr	r3, [pc, #632]	; (8005860 <_dtoa_r+0x2f0>)
 80055e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80055ea:	ea33 0308 	bics.w	r3, r3, r8
 80055ee:	d11b      	bne.n	8005628 <_dtoa_r+0xb8>
 80055f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80055fc:	4333      	orrs	r3, r6
 80055fe:	f000 8593 	beq.w	8006128 <_dtoa_r+0xbb8>
 8005602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005604:	b963      	cbnz	r3, 8005620 <_dtoa_r+0xb0>
 8005606:	4b97      	ldr	r3, [pc, #604]	; (8005864 <_dtoa_r+0x2f4>)
 8005608:	e027      	b.n	800565a <_dtoa_r+0xea>
 800560a:	4b97      	ldr	r3, [pc, #604]	; (8005868 <_dtoa_r+0x2f8>)
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	3308      	adds	r3, #8
 8005610:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	9800      	ldr	r0, [sp, #0]
 8005616:	b013      	add	sp, #76	; 0x4c
 8005618:	ecbd 8b04 	vpop	{d8-d9}
 800561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005620:	4b90      	ldr	r3, [pc, #576]	; (8005864 <_dtoa_r+0x2f4>)
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	3303      	adds	r3, #3
 8005626:	e7f3      	b.n	8005610 <_dtoa_r+0xa0>
 8005628:	ed9d 7b02 	vldr	d7, [sp, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	ec51 0b17 	vmov	r0, r1, d7
 8005632:	eeb0 8a47 	vmov.f32	s16, s14
 8005636:	eef0 8a67 	vmov.f32	s17, s15
 800563a:	2300      	movs	r3, #0
 800563c:	f7fb fa64 	bl	8000b08 <__aeabi_dcmpeq>
 8005640:	4681      	mov	r9, r0
 8005642:	b160      	cbz	r0, 800565e <_dtoa_r+0xee>
 8005644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005646:	2301      	movs	r3, #1
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8568 	beq.w	8006122 <_dtoa_r+0xbb2>
 8005652:	4b86      	ldr	r3, [pc, #536]	; (800586c <_dtoa_r+0x2fc>)
 8005654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	e7da      	b.n	8005614 <_dtoa_r+0xa4>
 800565e:	aa10      	add	r2, sp, #64	; 0x40
 8005660:	a911      	add	r1, sp, #68	; 0x44
 8005662:	4620      	mov	r0, r4
 8005664:	eeb0 0a48 	vmov.f32	s0, s16
 8005668:	eef0 0a68 	vmov.f32	s1, s17
 800566c:	f001 f99a 	bl	80069a4 <__d2b>
 8005670:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005674:	4682      	mov	sl, r0
 8005676:	2d00      	cmp	r5, #0
 8005678:	d07f      	beq.n	800577a <_dtoa_r+0x20a>
 800567a:	ee18 3a90 	vmov	r3, s17
 800567e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005682:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005686:	ec51 0b18 	vmov	r0, r1, d8
 800568a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800568e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005692:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005696:	4619      	mov	r1, r3
 8005698:	2200      	movs	r2, #0
 800569a:	4b75      	ldr	r3, [pc, #468]	; (8005870 <_dtoa_r+0x300>)
 800569c:	f7fa fe14 	bl	80002c8 <__aeabi_dsub>
 80056a0:	a367      	add	r3, pc, #412	; (adr r3, 8005840 <_dtoa_r+0x2d0>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	f7fa ffc7 	bl	8000638 <__aeabi_dmul>
 80056aa:	a367      	add	r3, pc, #412	; (adr r3, 8005848 <_dtoa_r+0x2d8>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f7fa fe0c 	bl	80002cc <__adddf3>
 80056b4:	4606      	mov	r6, r0
 80056b6:	4628      	mov	r0, r5
 80056b8:	460f      	mov	r7, r1
 80056ba:	f7fa ff53 	bl	8000564 <__aeabi_i2d>
 80056be:	a364      	add	r3, pc, #400	; (adr r3, 8005850 <_dtoa_r+0x2e0>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f7fa ffb8 	bl	8000638 <__aeabi_dmul>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4630      	mov	r0, r6
 80056ce:	4639      	mov	r1, r7
 80056d0:	f7fa fdfc 	bl	80002cc <__adddf3>
 80056d4:	4606      	mov	r6, r0
 80056d6:	460f      	mov	r7, r1
 80056d8:	f7fb fa5e 	bl	8000b98 <__aeabi_d2iz>
 80056dc:	2200      	movs	r2, #0
 80056de:	4683      	mov	fp, r0
 80056e0:	2300      	movs	r3, #0
 80056e2:	4630      	mov	r0, r6
 80056e4:	4639      	mov	r1, r7
 80056e6:	f7fb fa19 	bl	8000b1c <__aeabi_dcmplt>
 80056ea:	b148      	cbz	r0, 8005700 <_dtoa_r+0x190>
 80056ec:	4658      	mov	r0, fp
 80056ee:	f7fa ff39 	bl	8000564 <__aeabi_i2d>
 80056f2:	4632      	mov	r2, r6
 80056f4:	463b      	mov	r3, r7
 80056f6:	f7fb fa07 	bl	8000b08 <__aeabi_dcmpeq>
 80056fa:	b908      	cbnz	r0, 8005700 <_dtoa_r+0x190>
 80056fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005700:	f1bb 0f16 	cmp.w	fp, #22
 8005704:	d857      	bhi.n	80057b6 <_dtoa_r+0x246>
 8005706:	4b5b      	ldr	r3, [pc, #364]	; (8005874 <_dtoa_r+0x304>)
 8005708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	ec51 0b18 	vmov	r0, r1, d8
 8005714:	f7fb fa02 	bl	8000b1c <__aeabi_dcmplt>
 8005718:	2800      	cmp	r0, #0
 800571a:	d04e      	beq.n	80057ba <_dtoa_r+0x24a>
 800571c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005720:	2300      	movs	r3, #0
 8005722:	930c      	str	r3, [sp, #48]	; 0x30
 8005724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005726:	1b5b      	subs	r3, r3, r5
 8005728:	1e5a      	subs	r2, r3, #1
 800572a:	bf45      	ittet	mi
 800572c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005730:	9305      	strmi	r3, [sp, #20]
 8005732:	2300      	movpl	r3, #0
 8005734:	2300      	movmi	r3, #0
 8005736:	9206      	str	r2, [sp, #24]
 8005738:	bf54      	ite	pl
 800573a:	9305      	strpl	r3, [sp, #20]
 800573c:	9306      	strmi	r3, [sp, #24]
 800573e:	f1bb 0f00 	cmp.w	fp, #0
 8005742:	db3c      	blt.n	80057be <_dtoa_r+0x24e>
 8005744:	9b06      	ldr	r3, [sp, #24]
 8005746:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800574a:	445b      	add	r3, fp
 800574c:	9306      	str	r3, [sp, #24]
 800574e:	2300      	movs	r3, #0
 8005750:	9308      	str	r3, [sp, #32]
 8005752:	9b07      	ldr	r3, [sp, #28]
 8005754:	2b09      	cmp	r3, #9
 8005756:	d868      	bhi.n	800582a <_dtoa_r+0x2ba>
 8005758:	2b05      	cmp	r3, #5
 800575a:	bfc4      	itt	gt
 800575c:	3b04      	subgt	r3, #4
 800575e:	9307      	strgt	r3, [sp, #28]
 8005760:	9b07      	ldr	r3, [sp, #28]
 8005762:	f1a3 0302 	sub.w	r3, r3, #2
 8005766:	bfcc      	ite	gt
 8005768:	2500      	movgt	r5, #0
 800576a:	2501      	movle	r5, #1
 800576c:	2b03      	cmp	r3, #3
 800576e:	f200 8085 	bhi.w	800587c <_dtoa_r+0x30c>
 8005772:	e8df f003 	tbb	[pc, r3]
 8005776:	3b2e      	.short	0x3b2e
 8005778:	5839      	.short	0x5839
 800577a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800577e:	441d      	add	r5, r3
 8005780:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005784:	2b20      	cmp	r3, #32
 8005786:	bfc1      	itttt	gt
 8005788:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800578c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005790:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005794:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005798:	bfd6      	itet	le
 800579a:	f1c3 0320 	rsble	r3, r3, #32
 800579e:	ea48 0003 	orrgt.w	r0, r8, r3
 80057a2:	fa06 f003 	lslle.w	r0, r6, r3
 80057a6:	f7fa fecd 	bl	8000544 <__aeabi_ui2d>
 80057aa:	2201      	movs	r2, #1
 80057ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80057b0:	3d01      	subs	r5, #1
 80057b2:	920e      	str	r2, [sp, #56]	; 0x38
 80057b4:	e76f      	b.n	8005696 <_dtoa_r+0x126>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e7b3      	b.n	8005722 <_dtoa_r+0x1b2>
 80057ba:	900c      	str	r0, [sp, #48]	; 0x30
 80057bc:	e7b2      	b.n	8005724 <_dtoa_r+0x1b4>
 80057be:	9b05      	ldr	r3, [sp, #20]
 80057c0:	eba3 030b 	sub.w	r3, r3, fp
 80057c4:	9305      	str	r3, [sp, #20]
 80057c6:	f1cb 0300 	rsb	r3, fp, #0
 80057ca:	9308      	str	r3, [sp, #32]
 80057cc:	2300      	movs	r3, #0
 80057ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80057d0:	e7bf      	b.n	8005752 <_dtoa_r+0x1e2>
 80057d2:	2300      	movs	r3, #0
 80057d4:	9309      	str	r3, [sp, #36]	; 0x24
 80057d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dc52      	bgt.n	8005882 <_dtoa_r+0x312>
 80057dc:	2301      	movs	r3, #1
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	461a      	mov	r2, r3
 80057e4:	920a      	str	r2, [sp, #40]	; 0x28
 80057e6:	e00b      	b.n	8005800 <_dtoa_r+0x290>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e7f3      	b.n	80057d4 <_dtoa_r+0x264>
 80057ec:	2300      	movs	r3, #0
 80057ee:	9309      	str	r3, [sp, #36]	; 0x24
 80057f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f2:	445b      	add	r3, fp
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	3301      	adds	r3, #1
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	bfb8      	it	lt
 80057fe:	2301      	movlt	r3, #1
 8005800:	69e0      	ldr	r0, [r4, #28]
 8005802:	2100      	movs	r1, #0
 8005804:	2204      	movs	r2, #4
 8005806:	f102 0614 	add.w	r6, r2, #20
 800580a:	429e      	cmp	r6, r3
 800580c:	d93d      	bls.n	800588a <_dtoa_r+0x31a>
 800580e:	6041      	str	r1, [r0, #4]
 8005810:	4620      	mov	r0, r4
 8005812:	f000 fceb 	bl	80061ec <_Balloc>
 8005816:	9000      	str	r0, [sp, #0]
 8005818:	2800      	cmp	r0, #0
 800581a:	d139      	bne.n	8005890 <_dtoa_r+0x320>
 800581c:	4b16      	ldr	r3, [pc, #88]	; (8005878 <_dtoa_r+0x308>)
 800581e:	4602      	mov	r2, r0
 8005820:	f240 11af 	movw	r1, #431	; 0x1af
 8005824:	e6bd      	b.n	80055a2 <_dtoa_r+0x32>
 8005826:	2301      	movs	r3, #1
 8005828:	e7e1      	b.n	80057ee <_dtoa_r+0x27e>
 800582a:	2501      	movs	r5, #1
 800582c:	2300      	movs	r3, #0
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	9509      	str	r5, [sp, #36]	; 0x24
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	9304      	str	r3, [sp, #16]
 800583a:	2200      	movs	r2, #0
 800583c:	2312      	movs	r3, #18
 800583e:	e7d1      	b.n	80057e4 <_dtoa_r+0x274>
 8005840:	636f4361 	.word	0x636f4361
 8005844:	3fd287a7 	.word	0x3fd287a7
 8005848:	8b60c8b3 	.word	0x8b60c8b3
 800584c:	3fc68a28 	.word	0x3fc68a28
 8005850:	509f79fb 	.word	0x509f79fb
 8005854:	3fd34413 	.word	0x3fd34413
 8005858:	0800a153 	.word	0x0800a153
 800585c:	0800a20d 	.word	0x0800a20d
 8005860:	7ff00000 	.word	0x7ff00000
 8005864:	0800a209 	.word	0x0800a209
 8005868:	0800a200 	.word	0x0800a200
 800586c:	0800a549 	.word	0x0800a549
 8005870:	3ff80000 	.word	0x3ff80000
 8005874:	0800a2f8 	.word	0x0800a2f8
 8005878:	0800a265 	.word	0x0800a265
 800587c:	2301      	movs	r3, #1
 800587e:	9309      	str	r3, [sp, #36]	; 0x24
 8005880:	e7d7      	b.n	8005832 <_dtoa_r+0x2c2>
 8005882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	e7ba      	b.n	8005800 <_dtoa_r+0x290>
 800588a:	3101      	adds	r1, #1
 800588c:	0052      	lsls	r2, r2, #1
 800588e:	e7ba      	b.n	8005806 <_dtoa_r+0x296>
 8005890:	69e3      	ldr	r3, [r4, #28]
 8005892:	9a00      	ldr	r2, [sp, #0]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	9b04      	ldr	r3, [sp, #16]
 8005898:	2b0e      	cmp	r3, #14
 800589a:	f200 80a8 	bhi.w	80059ee <_dtoa_r+0x47e>
 800589e:	2d00      	cmp	r5, #0
 80058a0:	f000 80a5 	beq.w	80059ee <_dtoa_r+0x47e>
 80058a4:	f1bb 0f00 	cmp.w	fp, #0
 80058a8:	dd38      	ble.n	800591c <_dtoa_r+0x3ac>
 80058aa:	4bc0      	ldr	r3, [pc, #768]	; (8005bac <_dtoa_r+0x63c>)
 80058ac:	f00b 020f 	and.w	r2, fp, #15
 80058b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80058b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80058bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80058c0:	d019      	beq.n	80058f6 <_dtoa_r+0x386>
 80058c2:	4bbb      	ldr	r3, [pc, #748]	; (8005bb0 <_dtoa_r+0x640>)
 80058c4:	ec51 0b18 	vmov	r0, r1, d8
 80058c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058cc:	f7fa ffde 	bl	800088c <__aeabi_ddiv>
 80058d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058d4:	f008 080f 	and.w	r8, r8, #15
 80058d8:	2503      	movs	r5, #3
 80058da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005bb0 <_dtoa_r+0x640>
 80058de:	f1b8 0f00 	cmp.w	r8, #0
 80058e2:	d10a      	bne.n	80058fa <_dtoa_r+0x38a>
 80058e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058e8:	4632      	mov	r2, r6
 80058ea:	463b      	mov	r3, r7
 80058ec:	f7fa ffce 	bl	800088c <__aeabi_ddiv>
 80058f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058f4:	e02b      	b.n	800594e <_dtoa_r+0x3de>
 80058f6:	2502      	movs	r5, #2
 80058f8:	e7ef      	b.n	80058da <_dtoa_r+0x36a>
 80058fa:	f018 0f01 	tst.w	r8, #1
 80058fe:	d008      	beq.n	8005912 <_dtoa_r+0x3a2>
 8005900:	4630      	mov	r0, r6
 8005902:	4639      	mov	r1, r7
 8005904:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005908:	f7fa fe96 	bl	8000638 <__aeabi_dmul>
 800590c:	3501      	adds	r5, #1
 800590e:	4606      	mov	r6, r0
 8005910:	460f      	mov	r7, r1
 8005912:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005916:	f109 0908 	add.w	r9, r9, #8
 800591a:	e7e0      	b.n	80058de <_dtoa_r+0x36e>
 800591c:	f000 809f 	beq.w	8005a5e <_dtoa_r+0x4ee>
 8005920:	f1cb 0600 	rsb	r6, fp, #0
 8005924:	4ba1      	ldr	r3, [pc, #644]	; (8005bac <_dtoa_r+0x63c>)
 8005926:	4fa2      	ldr	r7, [pc, #648]	; (8005bb0 <_dtoa_r+0x640>)
 8005928:	f006 020f 	and.w	r2, r6, #15
 800592c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	ec51 0b18 	vmov	r0, r1, d8
 8005938:	f7fa fe7e 	bl	8000638 <__aeabi_dmul>
 800593c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005940:	1136      	asrs	r6, r6, #4
 8005942:	2300      	movs	r3, #0
 8005944:	2502      	movs	r5, #2
 8005946:	2e00      	cmp	r6, #0
 8005948:	d17e      	bne.n	8005a48 <_dtoa_r+0x4d8>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1d0      	bne.n	80058f0 <_dtoa_r+0x380>
 800594e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005950:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8084 	beq.w	8005a62 <_dtoa_r+0x4f2>
 800595a:	4b96      	ldr	r3, [pc, #600]	; (8005bb4 <_dtoa_r+0x644>)
 800595c:	2200      	movs	r2, #0
 800595e:	4640      	mov	r0, r8
 8005960:	4649      	mov	r1, r9
 8005962:	f7fb f8db 	bl	8000b1c <__aeabi_dcmplt>
 8005966:	2800      	cmp	r0, #0
 8005968:	d07b      	beq.n	8005a62 <_dtoa_r+0x4f2>
 800596a:	9b04      	ldr	r3, [sp, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d078      	beq.n	8005a62 <_dtoa_r+0x4f2>
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	dd39      	ble.n	80059ea <_dtoa_r+0x47a>
 8005976:	4b90      	ldr	r3, [pc, #576]	; (8005bb8 <_dtoa_r+0x648>)
 8005978:	2200      	movs	r2, #0
 800597a:	4640      	mov	r0, r8
 800597c:	4649      	mov	r1, r9
 800597e:	f7fa fe5b 	bl	8000638 <__aeabi_dmul>
 8005982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005986:	9e01      	ldr	r6, [sp, #4]
 8005988:	f10b 37ff 	add.w	r7, fp, #4294967295
 800598c:	3501      	adds	r5, #1
 800598e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005992:	4628      	mov	r0, r5
 8005994:	f7fa fde6 	bl	8000564 <__aeabi_i2d>
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	f7fa fe4c 	bl	8000638 <__aeabi_dmul>
 80059a0:	4b86      	ldr	r3, [pc, #536]	; (8005bbc <_dtoa_r+0x64c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	f7fa fc92 	bl	80002cc <__adddf3>
 80059a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80059ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b0:	9303      	str	r3, [sp, #12]
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	d158      	bne.n	8005a68 <_dtoa_r+0x4f8>
 80059b6:	4b82      	ldr	r3, [pc, #520]	; (8005bc0 <_dtoa_r+0x650>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	4640      	mov	r0, r8
 80059bc:	4649      	mov	r1, r9
 80059be:	f7fa fc83 	bl	80002c8 <__aeabi_dsub>
 80059c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059c6:	4680      	mov	r8, r0
 80059c8:	4689      	mov	r9, r1
 80059ca:	f7fb f8c5 	bl	8000b58 <__aeabi_dcmpgt>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f040 8296 	bne.w	8005f00 <_dtoa_r+0x990>
 80059d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80059d8:	4640      	mov	r0, r8
 80059da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059de:	4649      	mov	r1, r9
 80059e0:	f7fb f89c 	bl	8000b1c <__aeabi_dcmplt>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f040 8289 	bne.w	8005efc <_dtoa_r+0x98c>
 80059ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80059ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f2c0 814e 	blt.w	8005c92 <_dtoa_r+0x722>
 80059f6:	f1bb 0f0e 	cmp.w	fp, #14
 80059fa:	f300 814a 	bgt.w	8005c92 <_dtoa_r+0x722>
 80059fe:	4b6b      	ldr	r3, [pc, #428]	; (8005bac <_dtoa_r+0x63c>)
 8005a00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f280 80dc 	bge.w	8005bc8 <_dtoa_r+0x658>
 8005a10:	9b04      	ldr	r3, [sp, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f300 80d8 	bgt.w	8005bc8 <_dtoa_r+0x658>
 8005a18:	f040 826f 	bne.w	8005efa <_dtoa_r+0x98a>
 8005a1c:	4b68      	ldr	r3, [pc, #416]	; (8005bc0 <_dtoa_r+0x650>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4640      	mov	r0, r8
 8005a22:	4649      	mov	r1, r9
 8005a24:	f7fa fe08 	bl	8000638 <__aeabi_dmul>
 8005a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a2c:	f7fb f88a 	bl	8000b44 <__aeabi_dcmpge>
 8005a30:	9e04      	ldr	r6, [sp, #16]
 8005a32:	4637      	mov	r7, r6
 8005a34:	2800      	cmp	r0, #0
 8005a36:	f040 8245 	bne.w	8005ec4 <_dtoa_r+0x954>
 8005a3a:	9d00      	ldr	r5, [sp, #0]
 8005a3c:	2331      	movs	r3, #49	; 0x31
 8005a3e:	f805 3b01 	strb.w	r3, [r5], #1
 8005a42:	f10b 0b01 	add.w	fp, fp, #1
 8005a46:	e241      	b.n	8005ecc <_dtoa_r+0x95c>
 8005a48:	07f2      	lsls	r2, r6, #31
 8005a4a:	d505      	bpl.n	8005a58 <_dtoa_r+0x4e8>
 8005a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a50:	f7fa fdf2 	bl	8000638 <__aeabi_dmul>
 8005a54:	3501      	adds	r5, #1
 8005a56:	2301      	movs	r3, #1
 8005a58:	1076      	asrs	r6, r6, #1
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	e773      	b.n	8005946 <_dtoa_r+0x3d6>
 8005a5e:	2502      	movs	r5, #2
 8005a60:	e775      	b.n	800594e <_dtoa_r+0x3de>
 8005a62:	9e04      	ldr	r6, [sp, #16]
 8005a64:	465f      	mov	r7, fp
 8005a66:	e792      	b.n	800598e <_dtoa_r+0x41e>
 8005a68:	9900      	ldr	r1, [sp, #0]
 8005a6a:	4b50      	ldr	r3, [pc, #320]	; (8005bac <_dtoa_r+0x63c>)
 8005a6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a70:	4431      	add	r1, r6
 8005a72:	9102      	str	r1, [sp, #8]
 8005a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a76:	eeb0 9a47 	vmov.f32	s18, s14
 8005a7a:	eef0 9a67 	vmov.f32	s19, s15
 8005a7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a86:	2900      	cmp	r1, #0
 8005a88:	d044      	beq.n	8005b14 <_dtoa_r+0x5a4>
 8005a8a:	494e      	ldr	r1, [pc, #312]	; (8005bc4 <_dtoa_r+0x654>)
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f7fa fefd 	bl	800088c <__aeabi_ddiv>
 8005a92:	ec53 2b19 	vmov	r2, r3, d9
 8005a96:	f7fa fc17 	bl	80002c8 <__aeabi_dsub>
 8005a9a:	9d00      	ldr	r5, [sp, #0]
 8005a9c:	ec41 0b19 	vmov	d9, r0, r1
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	f7fb f878 	bl	8000b98 <__aeabi_d2iz>
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	f7fa fd5b 	bl	8000564 <__aeabi_i2d>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	f7fa fc07 	bl	80002c8 <__aeabi_dsub>
 8005aba:	3630      	adds	r6, #48	; 0x30
 8005abc:	f805 6b01 	strb.w	r6, [r5], #1
 8005ac0:	ec53 2b19 	vmov	r2, r3, d9
 8005ac4:	4680      	mov	r8, r0
 8005ac6:	4689      	mov	r9, r1
 8005ac8:	f7fb f828 	bl	8000b1c <__aeabi_dcmplt>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d164      	bne.n	8005b9a <_dtoa_r+0x62a>
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	4937      	ldr	r1, [pc, #220]	; (8005bb4 <_dtoa_r+0x644>)
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f7fa fbf6 	bl	80002c8 <__aeabi_dsub>
 8005adc:	ec53 2b19 	vmov	r2, r3, d9
 8005ae0:	f7fb f81c 	bl	8000b1c <__aeabi_dcmplt>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	f040 80b6 	bne.w	8005c56 <_dtoa_r+0x6e6>
 8005aea:	9b02      	ldr	r3, [sp, #8]
 8005aec:	429d      	cmp	r5, r3
 8005aee:	f43f af7c 	beq.w	80059ea <_dtoa_r+0x47a>
 8005af2:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <_dtoa_r+0x648>)
 8005af4:	ec51 0b19 	vmov	r0, r1, d9
 8005af8:	2200      	movs	r2, #0
 8005afa:	f7fa fd9d 	bl	8000638 <__aeabi_dmul>
 8005afe:	4b2e      	ldr	r3, [pc, #184]	; (8005bb8 <_dtoa_r+0x648>)
 8005b00:	ec41 0b19 	vmov	d9, r0, r1
 8005b04:	2200      	movs	r2, #0
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa fd95 	bl	8000638 <__aeabi_dmul>
 8005b0e:	4680      	mov	r8, r0
 8005b10:	4689      	mov	r9, r1
 8005b12:	e7c5      	b.n	8005aa0 <_dtoa_r+0x530>
 8005b14:	ec51 0b17 	vmov	r0, r1, d7
 8005b18:	f7fa fd8e 	bl	8000638 <__aeabi_dmul>
 8005b1c:	9b02      	ldr	r3, [sp, #8]
 8005b1e:	9d00      	ldr	r5, [sp, #0]
 8005b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b22:	ec41 0b19 	vmov	d9, r0, r1
 8005b26:	4649      	mov	r1, r9
 8005b28:	4640      	mov	r0, r8
 8005b2a:	f7fb f835 	bl	8000b98 <__aeabi_d2iz>
 8005b2e:	4606      	mov	r6, r0
 8005b30:	f7fa fd18 	bl	8000564 <__aeabi_i2d>
 8005b34:	3630      	adds	r6, #48	; 0x30
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	f7fa fbc3 	bl	80002c8 <__aeabi_dsub>
 8005b42:	f805 6b01 	strb.w	r6, [r5], #1
 8005b46:	9b02      	ldr	r3, [sp, #8]
 8005b48:	429d      	cmp	r5, r3
 8005b4a:	4680      	mov	r8, r0
 8005b4c:	4689      	mov	r9, r1
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	d124      	bne.n	8005b9e <_dtoa_r+0x62e>
 8005b54:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <_dtoa_r+0x654>)
 8005b56:	ec51 0b19 	vmov	r0, r1, d9
 8005b5a:	f7fa fbb7 	bl	80002cc <__adddf3>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4640      	mov	r0, r8
 8005b64:	4649      	mov	r1, r9
 8005b66:	f7fa fff7 	bl	8000b58 <__aeabi_dcmpgt>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d173      	bne.n	8005c56 <_dtoa_r+0x6e6>
 8005b6e:	ec53 2b19 	vmov	r2, r3, d9
 8005b72:	4914      	ldr	r1, [pc, #80]	; (8005bc4 <_dtoa_r+0x654>)
 8005b74:	2000      	movs	r0, #0
 8005b76:	f7fa fba7 	bl	80002c8 <__aeabi_dsub>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	f7fa ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f43f af2f 	beq.w	80059ea <_dtoa_r+0x47a>
 8005b8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b8e:	1e6b      	subs	r3, r5, #1
 8005b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b96:	2b30      	cmp	r3, #48	; 0x30
 8005b98:	d0f8      	beq.n	8005b8c <_dtoa_r+0x61c>
 8005b9a:	46bb      	mov	fp, r7
 8005b9c:	e04a      	b.n	8005c34 <_dtoa_r+0x6c4>
 8005b9e:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <_dtoa_r+0x648>)
 8005ba0:	f7fa fd4a 	bl	8000638 <__aeabi_dmul>
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	4689      	mov	r9, r1
 8005ba8:	e7bd      	b.n	8005b26 <_dtoa_r+0x5b6>
 8005baa:	bf00      	nop
 8005bac:	0800a2f8 	.word	0x0800a2f8
 8005bb0:	0800a2d0 	.word	0x0800a2d0
 8005bb4:	3ff00000 	.word	0x3ff00000
 8005bb8:	40240000 	.word	0x40240000
 8005bbc:	401c0000 	.word	0x401c0000
 8005bc0:	40140000 	.word	0x40140000
 8005bc4:	3fe00000 	.word	0x3fe00000
 8005bc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005bcc:	9d00      	ldr	r5, [sp, #0]
 8005bce:	4642      	mov	r2, r8
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa fe59 	bl	800088c <__aeabi_ddiv>
 8005bda:	f7fa ffdd 	bl	8000b98 <__aeabi_d2iz>
 8005bde:	9001      	str	r0, [sp, #4]
 8005be0:	f7fa fcc0 	bl	8000564 <__aeabi_i2d>
 8005be4:	4642      	mov	r2, r8
 8005be6:	464b      	mov	r3, r9
 8005be8:	f7fa fd26 	bl	8000638 <__aeabi_dmul>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f7fa fb68 	bl	80002c8 <__aeabi_dsub>
 8005bf8:	9e01      	ldr	r6, [sp, #4]
 8005bfa:	9f04      	ldr	r7, [sp, #16]
 8005bfc:	3630      	adds	r6, #48	; 0x30
 8005bfe:	f805 6b01 	strb.w	r6, [r5], #1
 8005c02:	9e00      	ldr	r6, [sp, #0]
 8005c04:	1bae      	subs	r6, r5, r6
 8005c06:	42b7      	cmp	r7, r6
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	d134      	bne.n	8005c78 <_dtoa_r+0x708>
 8005c0e:	f7fa fb5d 	bl	80002cc <__adddf3>
 8005c12:	4642      	mov	r2, r8
 8005c14:	464b      	mov	r3, r9
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	f7fa ff9d 	bl	8000b58 <__aeabi_dcmpgt>
 8005c1e:	b9c8      	cbnz	r0, 8005c54 <_dtoa_r+0x6e4>
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f7fa ff6e 	bl	8000b08 <__aeabi_dcmpeq>
 8005c2c:	b110      	cbz	r0, 8005c34 <_dtoa_r+0x6c4>
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	07db      	lsls	r3, r3, #31
 8005c32:	d40f      	bmi.n	8005c54 <_dtoa_r+0x6e4>
 8005c34:	4651      	mov	r1, sl
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 fb18 	bl	800626c <_Bfree>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c40:	702b      	strb	r3, [r5, #0]
 8005c42:	f10b 0301 	add.w	r3, fp, #1
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f43f ace2 	beq.w	8005614 <_dtoa_r+0xa4>
 8005c50:	601d      	str	r5, [r3, #0]
 8005c52:	e4df      	b.n	8005614 <_dtoa_r+0xa4>
 8005c54:	465f      	mov	r7, fp
 8005c56:	462b      	mov	r3, r5
 8005c58:	461d      	mov	r5, r3
 8005c5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c5e:	2a39      	cmp	r2, #57	; 0x39
 8005c60:	d106      	bne.n	8005c70 <_dtoa_r+0x700>
 8005c62:	9a00      	ldr	r2, [sp, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d1f7      	bne.n	8005c58 <_dtoa_r+0x6e8>
 8005c68:	9900      	ldr	r1, [sp, #0]
 8005c6a:	2230      	movs	r2, #48	; 0x30
 8005c6c:	3701      	adds	r7, #1
 8005c6e:	700a      	strb	r2, [r1, #0]
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	3201      	adds	r2, #1
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	e790      	b.n	8005b9a <_dtoa_r+0x62a>
 8005c78:	4ba3      	ldr	r3, [pc, #652]	; (8005f08 <_dtoa_r+0x998>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f7fa fcdc 	bl	8000638 <__aeabi_dmul>
 8005c80:	2200      	movs	r2, #0
 8005c82:	2300      	movs	r3, #0
 8005c84:	4606      	mov	r6, r0
 8005c86:	460f      	mov	r7, r1
 8005c88:	f7fa ff3e 	bl	8000b08 <__aeabi_dcmpeq>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d09e      	beq.n	8005bce <_dtoa_r+0x65e>
 8005c90:	e7d0      	b.n	8005c34 <_dtoa_r+0x6c4>
 8005c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c94:	2a00      	cmp	r2, #0
 8005c96:	f000 80ca 	beq.w	8005e2e <_dtoa_r+0x8be>
 8005c9a:	9a07      	ldr	r2, [sp, #28]
 8005c9c:	2a01      	cmp	r2, #1
 8005c9e:	f300 80ad 	bgt.w	8005dfc <_dtoa_r+0x88c>
 8005ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	f000 80a5 	beq.w	8005df4 <_dtoa_r+0x884>
 8005caa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005cae:	9e08      	ldr	r6, [sp, #32]
 8005cb0:	9d05      	ldr	r5, [sp, #20]
 8005cb2:	9a05      	ldr	r2, [sp, #20]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	9205      	str	r2, [sp, #20]
 8005cb8:	9a06      	ldr	r2, [sp, #24]
 8005cba:	2101      	movs	r1, #1
 8005cbc:	441a      	add	r2, r3
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	9206      	str	r2, [sp, #24]
 8005cc2:	f000 fbd3 	bl	800646c <__i2b>
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	b165      	cbz	r5, 8005ce4 <_dtoa_r+0x774>
 8005cca:	9b06      	ldr	r3, [sp, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dd09      	ble.n	8005ce4 <_dtoa_r+0x774>
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	9a05      	ldr	r2, [sp, #20]
 8005cd4:	bfa8      	it	ge
 8005cd6:	462b      	movge	r3, r5
 8005cd8:	1ad2      	subs	r2, r2, r3
 8005cda:	9205      	str	r2, [sp, #20]
 8005cdc:	9a06      	ldr	r2, [sp, #24]
 8005cde:	1aed      	subs	r5, r5, r3
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	9306      	str	r3, [sp, #24]
 8005ce4:	9b08      	ldr	r3, [sp, #32]
 8005ce6:	b1f3      	cbz	r3, 8005d26 <_dtoa_r+0x7b6>
 8005ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80a3 	beq.w	8005e36 <_dtoa_r+0x8c6>
 8005cf0:	2e00      	cmp	r6, #0
 8005cf2:	dd10      	ble.n	8005d16 <_dtoa_r+0x7a6>
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f000 fc77 	bl	80065ec <__pow5mult>
 8005cfe:	4652      	mov	r2, sl
 8005d00:	4601      	mov	r1, r0
 8005d02:	4607      	mov	r7, r0
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fbc7 	bl	8006498 <__multiply>
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	4680      	mov	r8, r0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 faac 	bl	800626c <_Bfree>
 8005d14:	46c2      	mov	sl, r8
 8005d16:	9b08      	ldr	r3, [sp, #32]
 8005d18:	1b9a      	subs	r2, r3, r6
 8005d1a:	d004      	beq.n	8005d26 <_dtoa_r+0x7b6>
 8005d1c:	4651      	mov	r1, sl
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f000 fc64 	bl	80065ec <__pow5mult>
 8005d24:	4682      	mov	sl, r0
 8005d26:	2101      	movs	r1, #1
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fb9f 	bl	800646c <__i2b>
 8005d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	4606      	mov	r6, r0
 8005d34:	f340 8081 	ble.w	8005e3a <_dtoa_r+0x8ca>
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 fc55 	bl	80065ec <__pow5mult>
 8005d42:	9b07      	ldr	r3, [sp, #28]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	4606      	mov	r6, r0
 8005d48:	dd7a      	ble.n	8005e40 <_dtoa_r+0x8d0>
 8005d4a:	f04f 0800 	mov.w	r8, #0
 8005d4e:	6933      	ldr	r3, [r6, #16]
 8005d50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005d54:	6918      	ldr	r0, [r3, #16]
 8005d56:	f000 fb3b 	bl	80063d0 <__hi0bits>
 8005d5a:	f1c0 0020 	rsb	r0, r0, #32
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	4418      	add	r0, r3
 8005d62:	f010 001f 	ands.w	r0, r0, #31
 8005d66:	f000 8094 	beq.w	8005e92 <_dtoa_r+0x922>
 8005d6a:	f1c0 0320 	rsb	r3, r0, #32
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	f340 8085 	ble.w	8005e7e <_dtoa_r+0x90e>
 8005d74:	9b05      	ldr	r3, [sp, #20]
 8005d76:	f1c0 001c 	rsb	r0, r0, #28
 8005d7a:	4403      	add	r3, r0
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	9b06      	ldr	r3, [sp, #24]
 8005d80:	4403      	add	r3, r0
 8005d82:	4405      	add	r5, r0
 8005d84:	9306      	str	r3, [sp, #24]
 8005d86:	9b05      	ldr	r3, [sp, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	dd05      	ble.n	8005d98 <_dtoa_r+0x828>
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fc85 	bl	80066a0 <__lshift>
 8005d96:	4682      	mov	sl, r0
 8005d98:	9b06      	ldr	r3, [sp, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	dd05      	ble.n	8005daa <_dtoa_r+0x83a>
 8005d9e:	4631      	mov	r1, r6
 8005da0:	461a      	mov	r2, r3
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 fc7c 	bl	80066a0 <__lshift>
 8005da8:	4606      	mov	r6, r0
 8005daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d072      	beq.n	8005e96 <_dtoa_r+0x926>
 8005db0:	4631      	mov	r1, r6
 8005db2:	4650      	mov	r0, sl
 8005db4:	f000 fce0 	bl	8006778 <__mcmp>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	da6c      	bge.n	8005e96 <_dtoa_r+0x926>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	220a      	movs	r2, #10
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 fa74 	bl	80062b0 <__multadd>
 8005dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005dce:	4682      	mov	sl, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 81b0 	beq.w	8006136 <_dtoa_r+0xbc6>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4639      	mov	r1, r7
 8005dda:	220a      	movs	r2, #10
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 fa67 	bl	80062b0 <__multadd>
 8005de2:	9b01      	ldr	r3, [sp, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	4607      	mov	r7, r0
 8005de8:	f300 8096 	bgt.w	8005f18 <_dtoa_r+0x9a8>
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	dc59      	bgt.n	8005ea6 <_dtoa_r+0x936>
 8005df2:	e091      	b.n	8005f18 <_dtoa_r+0x9a8>
 8005df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dfa:	e758      	b.n	8005cae <_dtoa_r+0x73e>
 8005dfc:	9b04      	ldr	r3, [sp, #16]
 8005dfe:	1e5e      	subs	r6, r3, #1
 8005e00:	9b08      	ldr	r3, [sp, #32]
 8005e02:	42b3      	cmp	r3, r6
 8005e04:	bfbf      	itttt	lt
 8005e06:	9b08      	ldrlt	r3, [sp, #32]
 8005e08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005e0a:	9608      	strlt	r6, [sp, #32]
 8005e0c:	1af3      	sublt	r3, r6, r3
 8005e0e:	bfb4      	ite	lt
 8005e10:	18d2      	addlt	r2, r2, r3
 8005e12:	1b9e      	subge	r6, r3, r6
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	bfbc      	itt	lt
 8005e18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005e1a:	2600      	movlt	r6, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bfb7      	itett	lt
 8005e20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005e24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005e28:	1a9d      	sublt	r5, r3, r2
 8005e2a:	2300      	movlt	r3, #0
 8005e2c:	e741      	b.n	8005cb2 <_dtoa_r+0x742>
 8005e2e:	9e08      	ldr	r6, [sp, #32]
 8005e30:	9d05      	ldr	r5, [sp, #20]
 8005e32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e34:	e748      	b.n	8005cc8 <_dtoa_r+0x758>
 8005e36:	9a08      	ldr	r2, [sp, #32]
 8005e38:	e770      	b.n	8005d1c <_dtoa_r+0x7ac>
 8005e3a:	9b07      	ldr	r3, [sp, #28]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	dc19      	bgt.n	8005e74 <_dtoa_r+0x904>
 8005e40:	9b02      	ldr	r3, [sp, #8]
 8005e42:	b9bb      	cbnz	r3, 8005e74 <_dtoa_r+0x904>
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e4a:	b99b      	cbnz	r3, 8005e74 <_dtoa_r+0x904>
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e52:	0d1b      	lsrs	r3, r3, #20
 8005e54:	051b      	lsls	r3, r3, #20
 8005e56:	b183      	cbz	r3, 8005e7a <_dtoa_r+0x90a>
 8005e58:	9b05      	ldr	r3, [sp, #20]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	9305      	str	r3, [sp, #20]
 8005e5e:	9b06      	ldr	r3, [sp, #24]
 8005e60:	3301      	adds	r3, #1
 8005e62:	9306      	str	r3, [sp, #24]
 8005e64:	f04f 0801 	mov.w	r8, #1
 8005e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f47f af6f 	bne.w	8005d4e <_dtoa_r+0x7de>
 8005e70:	2001      	movs	r0, #1
 8005e72:	e774      	b.n	8005d5e <_dtoa_r+0x7ee>
 8005e74:	f04f 0800 	mov.w	r8, #0
 8005e78:	e7f6      	b.n	8005e68 <_dtoa_r+0x8f8>
 8005e7a:	4698      	mov	r8, r3
 8005e7c:	e7f4      	b.n	8005e68 <_dtoa_r+0x8f8>
 8005e7e:	d082      	beq.n	8005d86 <_dtoa_r+0x816>
 8005e80:	9a05      	ldr	r2, [sp, #20]
 8005e82:	331c      	adds	r3, #28
 8005e84:	441a      	add	r2, r3
 8005e86:	9205      	str	r2, [sp, #20]
 8005e88:	9a06      	ldr	r2, [sp, #24]
 8005e8a:	441a      	add	r2, r3
 8005e8c:	441d      	add	r5, r3
 8005e8e:	9206      	str	r2, [sp, #24]
 8005e90:	e779      	b.n	8005d86 <_dtoa_r+0x816>
 8005e92:	4603      	mov	r3, r0
 8005e94:	e7f4      	b.n	8005e80 <_dtoa_r+0x910>
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dc37      	bgt.n	8005f0c <_dtoa_r+0x99c>
 8005e9c:	9b07      	ldr	r3, [sp, #28]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	dd34      	ble.n	8005f0c <_dtoa_r+0x99c>
 8005ea2:	9b04      	ldr	r3, [sp, #16]
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	b963      	cbnz	r3, 8005ec4 <_dtoa_r+0x954>
 8005eaa:	4631      	mov	r1, r6
 8005eac:	2205      	movs	r2, #5
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f9fe 	bl	80062b0 <__multadd>
 8005eb4:	4601      	mov	r1, r0
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	4650      	mov	r0, sl
 8005eba:	f000 fc5d 	bl	8006778 <__mcmp>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f73f adbb 	bgt.w	8005a3a <_dtoa_r+0x4ca>
 8005ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec6:	9d00      	ldr	r5, [sp, #0]
 8005ec8:	ea6f 0b03 	mvn.w	fp, r3
 8005ecc:	f04f 0800 	mov.w	r8, #0
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 f9ca 	bl	800626c <_Bfree>
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	f43f aeab 	beq.w	8005c34 <_dtoa_r+0x6c4>
 8005ede:	f1b8 0f00 	cmp.w	r8, #0
 8005ee2:	d005      	beq.n	8005ef0 <_dtoa_r+0x980>
 8005ee4:	45b8      	cmp	r8, r7
 8005ee6:	d003      	beq.n	8005ef0 <_dtoa_r+0x980>
 8005ee8:	4641      	mov	r1, r8
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 f9be 	bl	800626c <_Bfree>
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f9ba 	bl	800626c <_Bfree>
 8005ef8:	e69c      	b.n	8005c34 <_dtoa_r+0x6c4>
 8005efa:	2600      	movs	r6, #0
 8005efc:	4637      	mov	r7, r6
 8005efe:	e7e1      	b.n	8005ec4 <_dtoa_r+0x954>
 8005f00:	46bb      	mov	fp, r7
 8005f02:	4637      	mov	r7, r6
 8005f04:	e599      	b.n	8005a3a <_dtoa_r+0x4ca>
 8005f06:	bf00      	nop
 8005f08:	40240000 	.word	0x40240000
 8005f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80c8 	beq.w	80060a4 <_dtoa_r+0xb34>
 8005f14:	9b04      	ldr	r3, [sp, #16]
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	dd05      	ble.n	8005f28 <_dtoa_r+0x9b8>
 8005f1c:	4639      	mov	r1, r7
 8005f1e:	462a      	mov	r2, r5
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fbbd 	bl	80066a0 <__lshift>
 8005f26:	4607      	mov	r7, r0
 8005f28:	f1b8 0f00 	cmp.w	r8, #0
 8005f2c:	d05b      	beq.n	8005fe6 <_dtoa_r+0xa76>
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 f95b 	bl	80061ec <_Balloc>
 8005f36:	4605      	mov	r5, r0
 8005f38:	b928      	cbnz	r0, 8005f46 <_dtoa_r+0x9d6>
 8005f3a:	4b83      	ldr	r3, [pc, #524]	; (8006148 <_dtoa_r+0xbd8>)
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005f42:	f7ff bb2e 	b.w	80055a2 <_dtoa_r+0x32>
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	3202      	adds	r2, #2
 8005f4a:	0092      	lsls	r2, r2, #2
 8005f4c:	f107 010c 	add.w	r1, r7, #12
 8005f50:	300c      	adds	r0, #12
 8005f52:	f7ff fa53 	bl	80053fc <memcpy>
 8005f56:	2201      	movs	r2, #1
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fba0 	bl	80066a0 <__lshift>
 8005f60:	9b00      	ldr	r3, [sp, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	9308      	str	r3, [sp, #32]
 8005f6e:	9b02      	ldr	r3, [sp, #8]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	46b8      	mov	r8, r7
 8005f76:	9306      	str	r3, [sp, #24]
 8005f78:	4607      	mov	r7, r0
 8005f7a:	9b04      	ldr	r3, [sp, #16]
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	4650      	mov	r0, sl
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	f7ff fa6c 	bl	8005460 <quorem>
 8005f88:	4641      	mov	r1, r8
 8005f8a:	9002      	str	r0, [sp, #8]
 8005f8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f90:	4650      	mov	r0, sl
 8005f92:	f000 fbf1 	bl	8006778 <__mcmp>
 8005f96:	463a      	mov	r2, r7
 8005f98:	9005      	str	r0, [sp, #20]
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 fc07 	bl	80067b0 <__mdiff>
 8005fa2:	68c2      	ldr	r2, [r0, #12]
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	bb02      	cbnz	r2, 8005fea <_dtoa_r+0xa7a>
 8005fa8:	4601      	mov	r1, r0
 8005faa:	4650      	mov	r0, sl
 8005fac:	f000 fbe4 	bl	8006778 <__mcmp>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005fb8:	f000 f958 	bl	800626c <_Bfree>
 8005fbc:	9b07      	ldr	r3, [sp, #28]
 8005fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc0:	9d04      	ldr	r5, [sp, #16]
 8005fc2:	ea43 0102 	orr.w	r1, r3, r2
 8005fc6:	9b06      	ldr	r3, [sp, #24]
 8005fc8:	4319      	orrs	r1, r3
 8005fca:	d110      	bne.n	8005fee <_dtoa_r+0xa7e>
 8005fcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fd0:	d029      	beq.n	8006026 <_dtoa_r+0xab6>
 8005fd2:	9b05      	ldr	r3, [sp, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dd02      	ble.n	8005fde <_dtoa_r+0xa6e>
 8005fd8:	9b02      	ldr	r3, [sp, #8]
 8005fda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	f883 9000 	strb.w	r9, [r3]
 8005fe4:	e774      	b.n	8005ed0 <_dtoa_r+0x960>
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	e7ba      	b.n	8005f60 <_dtoa_r+0x9f0>
 8005fea:	2201      	movs	r2, #1
 8005fec:	e7e1      	b.n	8005fb2 <_dtoa_r+0xa42>
 8005fee:	9b05      	ldr	r3, [sp, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	db04      	blt.n	8005ffe <_dtoa_r+0xa8e>
 8005ff4:	9907      	ldr	r1, [sp, #28]
 8005ff6:	430b      	orrs	r3, r1
 8005ff8:	9906      	ldr	r1, [sp, #24]
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	d120      	bne.n	8006040 <_dtoa_r+0xad0>
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	dded      	ble.n	8005fde <_dtoa_r+0xa6e>
 8006002:	4651      	mov	r1, sl
 8006004:	2201      	movs	r2, #1
 8006006:	4620      	mov	r0, r4
 8006008:	f000 fb4a 	bl	80066a0 <__lshift>
 800600c:	4631      	mov	r1, r6
 800600e:	4682      	mov	sl, r0
 8006010:	f000 fbb2 	bl	8006778 <__mcmp>
 8006014:	2800      	cmp	r0, #0
 8006016:	dc03      	bgt.n	8006020 <_dtoa_r+0xab0>
 8006018:	d1e1      	bne.n	8005fde <_dtoa_r+0xa6e>
 800601a:	f019 0f01 	tst.w	r9, #1
 800601e:	d0de      	beq.n	8005fde <_dtoa_r+0xa6e>
 8006020:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006024:	d1d8      	bne.n	8005fd8 <_dtoa_r+0xa68>
 8006026:	9a01      	ldr	r2, [sp, #4]
 8006028:	2339      	movs	r3, #57	; 0x39
 800602a:	7013      	strb	r3, [r2, #0]
 800602c:	462b      	mov	r3, r5
 800602e:	461d      	mov	r5, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006036:	2a39      	cmp	r2, #57	; 0x39
 8006038:	d06c      	beq.n	8006114 <_dtoa_r+0xba4>
 800603a:	3201      	adds	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e747      	b.n	8005ed0 <_dtoa_r+0x960>
 8006040:	2a00      	cmp	r2, #0
 8006042:	dd07      	ble.n	8006054 <_dtoa_r+0xae4>
 8006044:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006048:	d0ed      	beq.n	8006026 <_dtoa_r+0xab6>
 800604a:	9a01      	ldr	r2, [sp, #4]
 800604c:	f109 0301 	add.w	r3, r9, #1
 8006050:	7013      	strb	r3, [r2, #0]
 8006052:	e73d      	b.n	8005ed0 <_dtoa_r+0x960>
 8006054:	9b04      	ldr	r3, [sp, #16]
 8006056:	9a08      	ldr	r2, [sp, #32]
 8006058:	f803 9c01 	strb.w	r9, [r3, #-1]
 800605c:	4293      	cmp	r3, r2
 800605e:	d043      	beq.n	80060e8 <_dtoa_r+0xb78>
 8006060:	4651      	mov	r1, sl
 8006062:	2300      	movs	r3, #0
 8006064:	220a      	movs	r2, #10
 8006066:	4620      	mov	r0, r4
 8006068:	f000 f922 	bl	80062b0 <__multadd>
 800606c:	45b8      	cmp	r8, r7
 800606e:	4682      	mov	sl, r0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	f04f 020a 	mov.w	r2, #10
 8006078:	4641      	mov	r1, r8
 800607a:	4620      	mov	r0, r4
 800607c:	d107      	bne.n	800608e <_dtoa_r+0xb1e>
 800607e:	f000 f917 	bl	80062b0 <__multadd>
 8006082:	4680      	mov	r8, r0
 8006084:	4607      	mov	r7, r0
 8006086:	9b04      	ldr	r3, [sp, #16]
 8006088:	3301      	adds	r3, #1
 800608a:	9304      	str	r3, [sp, #16]
 800608c:	e775      	b.n	8005f7a <_dtoa_r+0xa0a>
 800608e:	f000 f90f 	bl	80062b0 <__multadd>
 8006092:	4639      	mov	r1, r7
 8006094:	4680      	mov	r8, r0
 8006096:	2300      	movs	r3, #0
 8006098:	220a      	movs	r2, #10
 800609a:	4620      	mov	r0, r4
 800609c:	f000 f908 	bl	80062b0 <__multadd>
 80060a0:	4607      	mov	r7, r0
 80060a2:	e7f0      	b.n	8006086 <_dtoa_r+0xb16>
 80060a4:	9b04      	ldr	r3, [sp, #16]
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	9d00      	ldr	r5, [sp, #0]
 80060aa:	4631      	mov	r1, r6
 80060ac:	4650      	mov	r0, sl
 80060ae:	f7ff f9d7 	bl	8005460 <quorem>
 80060b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80060b6:	9b00      	ldr	r3, [sp, #0]
 80060b8:	f805 9b01 	strb.w	r9, [r5], #1
 80060bc:	1aea      	subs	r2, r5, r3
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	4293      	cmp	r3, r2
 80060c2:	dd07      	ble.n	80060d4 <_dtoa_r+0xb64>
 80060c4:	4651      	mov	r1, sl
 80060c6:	2300      	movs	r3, #0
 80060c8:	220a      	movs	r2, #10
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 f8f0 	bl	80062b0 <__multadd>
 80060d0:	4682      	mov	sl, r0
 80060d2:	e7ea      	b.n	80060aa <_dtoa_r+0xb3a>
 80060d4:	9b01      	ldr	r3, [sp, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bfc8      	it	gt
 80060da:	461d      	movgt	r5, r3
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	bfd8      	it	le
 80060e0:	2501      	movle	r5, #1
 80060e2:	441d      	add	r5, r3
 80060e4:	f04f 0800 	mov.w	r8, #0
 80060e8:	4651      	mov	r1, sl
 80060ea:	2201      	movs	r2, #1
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fad7 	bl	80066a0 <__lshift>
 80060f2:	4631      	mov	r1, r6
 80060f4:	4682      	mov	sl, r0
 80060f6:	f000 fb3f 	bl	8006778 <__mcmp>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	dc96      	bgt.n	800602c <_dtoa_r+0xabc>
 80060fe:	d102      	bne.n	8006106 <_dtoa_r+0xb96>
 8006100:	f019 0f01 	tst.w	r9, #1
 8006104:	d192      	bne.n	800602c <_dtoa_r+0xabc>
 8006106:	462b      	mov	r3, r5
 8006108:	461d      	mov	r5, r3
 800610a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800610e:	2a30      	cmp	r2, #48	; 0x30
 8006110:	d0fa      	beq.n	8006108 <_dtoa_r+0xb98>
 8006112:	e6dd      	b.n	8005ed0 <_dtoa_r+0x960>
 8006114:	9a00      	ldr	r2, [sp, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d189      	bne.n	800602e <_dtoa_r+0xabe>
 800611a:	f10b 0b01 	add.w	fp, fp, #1
 800611e:	2331      	movs	r3, #49	; 0x31
 8006120:	e796      	b.n	8006050 <_dtoa_r+0xae0>
 8006122:	4b0a      	ldr	r3, [pc, #40]	; (800614c <_dtoa_r+0xbdc>)
 8006124:	f7ff ba99 	b.w	800565a <_dtoa_r+0xea>
 8006128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800612a:	2b00      	cmp	r3, #0
 800612c:	f47f aa6d 	bne.w	800560a <_dtoa_r+0x9a>
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <_dtoa_r+0xbe0>)
 8006132:	f7ff ba92 	b.w	800565a <_dtoa_r+0xea>
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	dcb5      	bgt.n	80060a8 <_dtoa_r+0xb38>
 800613c:	9b07      	ldr	r3, [sp, #28]
 800613e:	2b02      	cmp	r3, #2
 8006140:	f73f aeb1 	bgt.w	8005ea6 <_dtoa_r+0x936>
 8006144:	e7b0      	b.n	80060a8 <_dtoa_r+0xb38>
 8006146:	bf00      	nop
 8006148:	0800a265 	.word	0x0800a265
 800614c:	0800a548 	.word	0x0800a548
 8006150:	0800a200 	.word	0x0800a200

08006154 <_free_r>:
 8006154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006156:	2900      	cmp	r1, #0
 8006158:	d044      	beq.n	80061e4 <_free_r+0x90>
 800615a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615e:	9001      	str	r0, [sp, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f1a1 0404 	sub.w	r4, r1, #4
 8006166:	bfb8      	it	lt
 8006168:	18e4      	addlt	r4, r4, r3
 800616a:	f7fe f86d 	bl	8004248 <__malloc_lock>
 800616e:	4a1e      	ldr	r2, [pc, #120]	; (80061e8 <_free_r+0x94>)
 8006170:	9801      	ldr	r0, [sp, #4]
 8006172:	6813      	ldr	r3, [r2, #0]
 8006174:	b933      	cbnz	r3, 8006184 <_free_r+0x30>
 8006176:	6063      	str	r3, [r4, #4]
 8006178:	6014      	str	r4, [r2, #0]
 800617a:	b003      	add	sp, #12
 800617c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006180:	f7fe b868 	b.w	8004254 <__malloc_unlock>
 8006184:	42a3      	cmp	r3, r4
 8006186:	d908      	bls.n	800619a <_free_r+0x46>
 8006188:	6825      	ldr	r5, [r4, #0]
 800618a:	1961      	adds	r1, r4, r5
 800618c:	428b      	cmp	r3, r1
 800618e:	bf01      	itttt	eq
 8006190:	6819      	ldreq	r1, [r3, #0]
 8006192:	685b      	ldreq	r3, [r3, #4]
 8006194:	1949      	addeq	r1, r1, r5
 8006196:	6021      	streq	r1, [r4, #0]
 8006198:	e7ed      	b.n	8006176 <_free_r+0x22>
 800619a:	461a      	mov	r2, r3
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	b10b      	cbz	r3, 80061a4 <_free_r+0x50>
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	d9fa      	bls.n	800619a <_free_r+0x46>
 80061a4:	6811      	ldr	r1, [r2, #0]
 80061a6:	1855      	adds	r5, r2, r1
 80061a8:	42a5      	cmp	r5, r4
 80061aa:	d10b      	bne.n	80061c4 <_free_r+0x70>
 80061ac:	6824      	ldr	r4, [r4, #0]
 80061ae:	4421      	add	r1, r4
 80061b0:	1854      	adds	r4, r2, r1
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	6011      	str	r1, [r2, #0]
 80061b6:	d1e0      	bne.n	800617a <_free_r+0x26>
 80061b8:	681c      	ldr	r4, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	6053      	str	r3, [r2, #4]
 80061be:	440c      	add	r4, r1
 80061c0:	6014      	str	r4, [r2, #0]
 80061c2:	e7da      	b.n	800617a <_free_r+0x26>
 80061c4:	d902      	bls.n	80061cc <_free_r+0x78>
 80061c6:	230c      	movs	r3, #12
 80061c8:	6003      	str	r3, [r0, #0]
 80061ca:	e7d6      	b.n	800617a <_free_r+0x26>
 80061cc:	6825      	ldr	r5, [r4, #0]
 80061ce:	1961      	adds	r1, r4, r5
 80061d0:	428b      	cmp	r3, r1
 80061d2:	bf04      	itt	eq
 80061d4:	6819      	ldreq	r1, [r3, #0]
 80061d6:	685b      	ldreq	r3, [r3, #4]
 80061d8:	6063      	str	r3, [r4, #4]
 80061da:	bf04      	itt	eq
 80061dc:	1949      	addeq	r1, r1, r5
 80061de:	6021      	streq	r1, [r4, #0]
 80061e0:	6054      	str	r4, [r2, #4]
 80061e2:	e7ca      	b.n	800617a <_free_r+0x26>
 80061e4:	b003      	add	sp, #12
 80061e6:	bd30      	pop	{r4, r5, pc}
 80061e8:	2000034c 	.word	0x2000034c

080061ec <_Balloc>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	69c6      	ldr	r6, [r0, #28]
 80061f0:	4604      	mov	r4, r0
 80061f2:	460d      	mov	r5, r1
 80061f4:	b976      	cbnz	r6, 8006214 <_Balloc+0x28>
 80061f6:	2010      	movs	r0, #16
 80061f8:	f7fd ff7e 	bl	80040f8 <malloc>
 80061fc:	4602      	mov	r2, r0
 80061fe:	61e0      	str	r0, [r4, #28]
 8006200:	b920      	cbnz	r0, 800620c <_Balloc+0x20>
 8006202:	4b18      	ldr	r3, [pc, #96]	; (8006264 <_Balloc+0x78>)
 8006204:	4818      	ldr	r0, [pc, #96]	; (8006268 <_Balloc+0x7c>)
 8006206:	216b      	movs	r1, #107	; 0x6b
 8006208:	f7ff f90c 	bl	8005424 <__assert_func>
 800620c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006210:	6006      	str	r6, [r0, #0]
 8006212:	60c6      	str	r6, [r0, #12]
 8006214:	69e6      	ldr	r6, [r4, #28]
 8006216:	68f3      	ldr	r3, [r6, #12]
 8006218:	b183      	cbz	r3, 800623c <_Balloc+0x50>
 800621a:	69e3      	ldr	r3, [r4, #28]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006222:	b9b8      	cbnz	r0, 8006254 <_Balloc+0x68>
 8006224:	2101      	movs	r1, #1
 8006226:	fa01 f605 	lsl.w	r6, r1, r5
 800622a:	1d72      	adds	r2, r6, #5
 800622c:	0092      	lsls	r2, r2, #2
 800622e:	4620      	mov	r0, r4
 8006230:	f002 f909 	bl	8008446 <_calloc_r>
 8006234:	b160      	cbz	r0, 8006250 <_Balloc+0x64>
 8006236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800623a:	e00e      	b.n	800625a <_Balloc+0x6e>
 800623c:	2221      	movs	r2, #33	; 0x21
 800623e:	2104      	movs	r1, #4
 8006240:	4620      	mov	r0, r4
 8006242:	f002 f900 	bl	8008446 <_calloc_r>
 8006246:	69e3      	ldr	r3, [r4, #28]
 8006248:	60f0      	str	r0, [r6, #12]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e4      	bne.n	800621a <_Balloc+0x2e>
 8006250:	2000      	movs	r0, #0
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	6802      	ldr	r2, [r0, #0]
 8006256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800625a:	2300      	movs	r3, #0
 800625c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006260:	e7f7      	b.n	8006252 <_Balloc+0x66>
 8006262:	bf00      	nop
 8006264:	0800a153 	.word	0x0800a153
 8006268:	0800a276 	.word	0x0800a276

0800626c <_Bfree>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	69c6      	ldr	r6, [r0, #28]
 8006270:	4605      	mov	r5, r0
 8006272:	460c      	mov	r4, r1
 8006274:	b976      	cbnz	r6, 8006294 <_Bfree+0x28>
 8006276:	2010      	movs	r0, #16
 8006278:	f7fd ff3e 	bl	80040f8 <malloc>
 800627c:	4602      	mov	r2, r0
 800627e:	61e8      	str	r0, [r5, #28]
 8006280:	b920      	cbnz	r0, 800628c <_Bfree+0x20>
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <_Bfree+0x3c>)
 8006284:	4809      	ldr	r0, [pc, #36]	; (80062ac <_Bfree+0x40>)
 8006286:	218f      	movs	r1, #143	; 0x8f
 8006288:	f7ff f8cc 	bl	8005424 <__assert_func>
 800628c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006290:	6006      	str	r6, [r0, #0]
 8006292:	60c6      	str	r6, [r0, #12]
 8006294:	b13c      	cbz	r4, 80062a6 <_Bfree+0x3a>
 8006296:	69eb      	ldr	r3, [r5, #28]
 8006298:	6862      	ldr	r2, [r4, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062a0:	6021      	str	r1, [r4, #0]
 80062a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062a6:	bd70      	pop	{r4, r5, r6, pc}
 80062a8:	0800a153 	.word	0x0800a153
 80062ac:	0800a276 	.word	0x0800a276

080062b0 <__multadd>:
 80062b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b4:	690d      	ldr	r5, [r1, #16]
 80062b6:	4607      	mov	r7, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	461e      	mov	r6, r3
 80062bc:	f101 0c14 	add.w	ip, r1, #20
 80062c0:	2000      	movs	r0, #0
 80062c2:	f8dc 3000 	ldr.w	r3, [ip]
 80062c6:	b299      	uxth	r1, r3
 80062c8:	fb02 6101 	mla	r1, r2, r1, r6
 80062cc:	0c1e      	lsrs	r6, r3, #16
 80062ce:	0c0b      	lsrs	r3, r1, #16
 80062d0:	fb02 3306 	mla	r3, r2, r6, r3
 80062d4:	b289      	uxth	r1, r1
 80062d6:	3001      	adds	r0, #1
 80062d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062dc:	4285      	cmp	r5, r0
 80062de:	f84c 1b04 	str.w	r1, [ip], #4
 80062e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062e6:	dcec      	bgt.n	80062c2 <__multadd+0x12>
 80062e8:	b30e      	cbz	r6, 800632e <__multadd+0x7e>
 80062ea:	68a3      	ldr	r3, [r4, #8]
 80062ec:	42ab      	cmp	r3, r5
 80062ee:	dc19      	bgt.n	8006324 <__multadd+0x74>
 80062f0:	6861      	ldr	r1, [r4, #4]
 80062f2:	4638      	mov	r0, r7
 80062f4:	3101      	adds	r1, #1
 80062f6:	f7ff ff79 	bl	80061ec <_Balloc>
 80062fa:	4680      	mov	r8, r0
 80062fc:	b928      	cbnz	r0, 800630a <__multadd+0x5a>
 80062fe:	4602      	mov	r2, r0
 8006300:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <__multadd+0x84>)
 8006302:	480d      	ldr	r0, [pc, #52]	; (8006338 <__multadd+0x88>)
 8006304:	21ba      	movs	r1, #186	; 0xba
 8006306:	f7ff f88d 	bl	8005424 <__assert_func>
 800630a:	6922      	ldr	r2, [r4, #16]
 800630c:	3202      	adds	r2, #2
 800630e:	f104 010c 	add.w	r1, r4, #12
 8006312:	0092      	lsls	r2, r2, #2
 8006314:	300c      	adds	r0, #12
 8006316:	f7ff f871 	bl	80053fc <memcpy>
 800631a:	4621      	mov	r1, r4
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff ffa5 	bl	800626c <_Bfree>
 8006322:	4644      	mov	r4, r8
 8006324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006328:	3501      	adds	r5, #1
 800632a:	615e      	str	r6, [r3, #20]
 800632c:	6125      	str	r5, [r4, #16]
 800632e:	4620      	mov	r0, r4
 8006330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006334:	0800a265 	.word	0x0800a265
 8006338:	0800a276 	.word	0x0800a276

0800633c <__s2b>:
 800633c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006340:	460c      	mov	r4, r1
 8006342:	4615      	mov	r5, r2
 8006344:	461f      	mov	r7, r3
 8006346:	2209      	movs	r2, #9
 8006348:	3308      	adds	r3, #8
 800634a:	4606      	mov	r6, r0
 800634c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006350:	2100      	movs	r1, #0
 8006352:	2201      	movs	r2, #1
 8006354:	429a      	cmp	r2, r3
 8006356:	db09      	blt.n	800636c <__s2b+0x30>
 8006358:	4630      	mov	r0, r6
 800635a:	f7ff ff47 	bl	80061ec <_Balloc>
 800635e:	b940      	cbnz	r0, 8006372 <__s2b+0x36>
 8006360:	4602      	mov	r2, r0
 8006362:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <__s2b+0x8c>)
 8006364:	4819      	ldr	r0, [pc, #100]	; (80063cc <__s2b+0x90>)
 8006366:	21d3      	movs	r1, #211	; 0xd3
 8006368:	f7ff f85c 	bl	8005424 <__assert_func>
 800636c:	0052      	lsls	r2, r2, #1
 800636e:	3101      	adds	r1, #1
 8006370:	e7f0      	b.n	8006354 <__s2b+0x18>
 8006372:	9b08      	ldr	r3, [sp, #32]
 8006374:	6143      	str	r3, [r0, #20]
 8006376:	2d09      	cmp	r5, #9
 8006378:	f04f 0301 	mov.w	r3, #1
 800637c:	6103      	str	r3, [r0, #16]
 800637e:	dd16      	ble.n	80063ae <__s2b+0x72>
 8006380:	f104 0909 	add.w	r9, r4, #9
 8006384:	46c8      	mov	r8, r9
 8006386:	442c      	add	r4, r5
 8006388:	f818 3b01 	ldrb.w	r3, [r8], #1
 800638c:	4601      	mov	r1, r0
 800638e:	3b30      	subs	r3, #48	; 0x30
 8006390:	220a      	movs	r2, #10
 8006392:	4630      	mov	r0, r6
 8006394:	f7ff ff8c 	bl	80062b0 <__multadd>
 8006398:	45a0      	cmp	r8, r4
 800639a:	d1f5      	bne.n	8006388 <__s2b+0x4c>
 800639c:	f1a5 0408 	sub.w	r4, r5, #8
 80063a0:	444c      	add	r4, r9
 80063a2:	1b2d      	subs	r5, r5, r4
 80063a4:	1963      	adds	r3, r4, r5
 80063a6:	42bb      	cmp	r3, r7
 80063a8:	db04      	blt.n	80063b4 <__s2b+0x78>
 80063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ae:	340a      	adds	r4, #10
 80063b0:	2509      	movs	r5, #9
 80063b2:	e7f6      	b.n	80063a2 <__s2b+0x66>
 80063b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063b8:	4601      	mov	r1, r0
 80063ba:	3b30      	subs	r3, #48	; 0x30
 80063bc:	220a      	movs	r2, #10
 80063be:	4630      	mov	r0, r6
 80063c0:	f7ff ff76 	bl	80062b0 <__multadd>
 80063c4:	e7ee      	b.n	80063a4 <__s2b+0x68>
 80063c6:	bf00      	nop
 80063c8:	0800a265 	.word	0x0800a265
 80063cc:	0800a276 	.word	0x0800a276

080063d0 <__hi0bits>:
 80063d0:	0c03      	lsrs	r3, r0, #16
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	b9d3      	cbnz	r3, 800640c <__hi0bits+0x3c>
 80063d6:	0400      	lsls	r0, r0, #16
 80063d8:	2310      	movs	r3, #16
 80063da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063de:	bf04      	itt	eq
 80063e0:	0200      	lsleq	r0, r0, #8
 80063e2:	3308      	addeq	r3, #8
 80063e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80063e8:	bf04      	itt	eq
 80063ea:	0100      	lsleq	r0, r0, #4
 80063ec:	3304      	addeq	r3, #4
 80063ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063f2:	bf04      	itt	eq
 80063f4:	0080      	lsleq	r0, r0, #2
 80063f6:	3302      	addeq	r3, #2
 80063f8:	2800      	cmp	r0, #0
 80063fa:	db05      	blt.n	8006408 <__hi0bits+0x38>
 80063fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006400:	f103 0301 	add.w	r3, r3, #1
 8006404:	bf08      	it	eq
 8006406:	2320      	moveq	r3, #32
 8006408:	4618      	mov	r0, r3
 800640a:	4770      	bx	lr
 800640c:	2300      	movs	r3, #0
 800640e:	e7e4      	b.n	80063da <__hi0bits+0xa>

08006410 <__lo0bits>:
 8006410:	6803      	ldr	r3, [r0, #0]
 8006412:	f013 0207 	ands.w	r2, r3, #7
 8006416:	d00c      	beq.n	8006432 <__lo0bits+0x22>
 8006418:	07d9      	lsls	r1, r3, #31
 800641a:	d422      	bmi.n	8006462 <__lo0bits+0x52>
 800641c:	079a      	lsls	r2, r3, #30
 800641e:	bf49      	itett	mi
 8006420:	085b      	lsrmi	r3, r3, #1
 8006422:	089b      	lsrpl	r3, r3, #2
 8006424:	6003      	strmi	r3, [r0, #0]
 8006426:	2201      	movmi	r2, #1
 8006428:	bf5c      	itt	pl
 800642a:	6003      	strpl	r3, [r0, #0]
 800642c:	2202      	movpl	r2, #2
 800642e:	4610      	mov	r0, r2
 8006430:	4770      	bx	lr
 8006432:	b299      	uxth	r1, r3
 8006434:	b909      	cbnz	r1, 800643a <__lo0bits+0x2a>
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	2210      	movs	r2, #16
 800643a:	b2d9      	uxtb	r1, r3
 800643c:	b909      	cbnz	r1, 8006442 <__lo0bits+0x32>
 800643e:	3208      	adds	r2, #8
 8006440:	0a1b      	lsrs	r3, r3, #8
 8006442:	0719      	lsls	r1, r3, #28
 8006444:	bf04      	itt	eq
 8006446:	091b      	lsreq	r3, r3, #4
 8006448:	3204      	addeq	r2, #4
 800644a:	0799      	lsls	r1, r3, #30
 800644c:	bf04      	itt	eq
 800644e:	089b      	lsreq	r3, r3, #2
 8006450:	3202      	addeq	r2, #2
 8006452:	07d9      	lsls	r1, r3, #31
 8006454:	d403      	bmi.n	800645e <__lo0bits+0x4e>
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	f102 0201 	add.w	r2, r2, #1
 800645c:	d003      	beq.n	8006466 <__lo0bits+0x56>
 800645e:	6003      	str	r3, [r0, #0]
 8006460:	e7e5      	b.n	800642e <__lo0bits+0x1e>
 8006462:	2200      	movs	r2, #0
 8006464:	e7e3      	b.n	800642e <__lo0bits+0x1e>
 8006466:	2220      	movs	r2, #32
 8006468:	e7e1      	b.n	800642e <__lo0bits+0x1e>
	...

0800646c <__i2b>:
 800646c:	b510      	push	{r4, lr}
 800646e:	460c      	mov	r4, r1
 8006470:	2101      	movs	r1, #1
 8006472:	f7ff febb 	bl	80061ec <_Balloc>
 8006476:	4602      	mov	r2, r0
 8006478:	b928      	cbnz	r0, 8006486 <__i2b+0x1a>
 800647a:	4b05      	ldr	r3, [pc, #20]	; (8006490 <__i2b+0x24>)
 800647c:	4805      	ldr	r0, [pc, #20]	; (8006494 <__i2b+0x28>)
 800647e:	f240 1145 	movw	r1, #325	; 0x145
 8006482:	f7fe ffcf 	bl	8005424 <__assert_func>
 8006486:	2301      	movs	r3, #1
 8006488:	6144      	str	r4, [r0, #20]
 800648a:	6103      	str	r3, [r0, #16]
 800648c:	bd10      	pop	{r4, pc}
 800648e:	bf00      	nop
 8006490:	0800a265 	.word	0x0800a265
 8006494:	0800a276 	.word	0x0800a276

08006498 <__multiply>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4691      	mov	r9, r2
 800649e:	690a      	ldr	r2, [r1, #16]
 80064a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bfb8      	it	lt
 80064a8:	460b      	movlt	r3, r1
 80064aa:	460c      	mov	r4, r1
 80064ac:	bfbc      	itt	lt
 80064ae:	464c      	movlt	r4, r9
 80064b0:	4699      	movlt	r9, r3
 80064b2:	6927      	ldr	r7, [r4, #16]
 80064b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064b8:	68a3      	ldr	r3, [r4, #8]
 80064ba:	6861      	ldr	r1, [r4, #4]
 80064bc:	eb07 060a 	add.w	r6, r7, sl
 80064c0:	42b3      	cmp	r3, r6
 80064c2:	b085      	sub	sp, #20
 80064c4:	bfb8      	it	lt
 80064c6:	3101      	addlt	r1, #1
 80064c8:	f7ff fe90 	bl	80061ec <_Balloc>
 80064cc:	b930      	cbnz	r0, 80064dc <__multiply+0x44>
 80064ce:	4602      	mov	r2, r0
 80064d0:	4b44      	ldr	r3, [pc, #272]	; (80065e4 <__multiply+0x14c>)
 80064d2:	4845      	ldr	r0, [pc, #276]	; (80065e8 <__multiply+0x150>)
 80064d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80064d8:	f7fe ffa4 	bl	8005424 <__assert_func>
 80064dc:	f100 0514 	add.w	r5, r0, #20
 80064e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064e4:	462b      	mov	r3, r5
 80064e6:	2200      	movs	r2, #0
 80064e8:	4543      	cmp	r3, r8
 80064ea:	d321      	bcc.n	8006530 <__multiply+0x98>
 80064ec:	f104 0314 	add.w	r3, r4, #20
 80064f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064f4:	f109 0314 	add.w	r3, r9, #20
 80064f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064fc:	9202      	str	r2, [sp, #8]
 80064fe:	1b3a      	subs	r2, r7, r4
 8006500:	3a15      	subs	r2, #21
 8006502:	f022 0203 	bic.w	r2, r2, #3
 8006506:	3204      	adds	r2, #4
 8006508:	f104 0115 	add.w	r1, r4, #21
 800650c:	428f      	cmp	r7, r1
 800650e:	bf38      	it	cc
 8006510:	2204      	movcc	r2, #4
 8006512:	9201      	str	r2, [sp, #4]
 8006514:	9a02      	ldr	r2, [sp, #8]
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	429a      	cmp	r2, r3
 800651a:	d80c      	bhi.n	8006536 <__multiply+0x9e>
 800651c:	2e00      	cmp	r6, #0
 800651e:	dd03      	ble.n	8006528 <__multiply+0x90>
 8006520:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006524:	2b00      	cmp	r3, #0
 8006526:	d05b      	beq.n	80065e0 <__multiply+0x148>
 8006528:	6106      	str	r6, [r0, #16]
 800652a:	b005      	add	sp, #20
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006530:	f843 2b04 	str.w	r2, [r3], #4
 8006534:	e7d8      	b.n	80064e8 <__multiply+0x50>
 8006536:	f8b3 a000 	ldrh.w	sl, [r3]
 800653a:	f1ba 0f00 	cmp.w	sl, #0
 800653e:	d024      	beq.n	800658a <__multiply+0xf2>
 8006540:	f104 0e14 	add.w	lr, r4, #20
 8006544:	46a9      	mov	r9, r5
 8006546:	f04f 0c00 	mov.w	ip, #0
 800654a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800654e:	f8d9 1000 	ldr.w	r1, [r9]
 8006552:	fa1f fb82 	uxth.w	fp, r2
 8006556:	b289      	uxth	r1, r1
 8006558:	fb0a 110b 	mla	r1, sl, fp, r1
 800655c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006560:	f8d9 2000 	ldr.w	r2, [r9]
 8006564:	4461      	add	r1, ip
 8006566:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800656a:	fb0a c20b 	mla	r2, sl, fp, ip
 800656e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006572:	b289      	uxth	r1, r1
 8006574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006578:	4577      	cmp	r7, lr
 800657a:	f849 1b04 	str.w	r1, [r9], #4
 800657e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006582:	d8e2      	bhi.n	800654a <__multiply+0xb2>
 8006584:	9a01      	ldr	r2, [sp, #4]
 8006586:	f845 c002 	str.w	ip, [r5, r2]
 800658a:	9a03      	ldr	r2, [sp, #12]
 800658c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006590:	3304      	adds	r3, #4
 8006592:	f1b9 0f00 	cmp.w	r9, #0
 8006596:	d021      	beq.n	80065dc <__multiply+0x144>
 8006598:	6829      	ldr	r1, [r5, #0]
 800659a:	f104 0c14 	add.w	ip, r4, #20
 800659e:	46ae      	mov	lr, r5
 80065a0:	f04f 0a00 	mov.w	sl, #0
 80065a4:	f8bc b000 	ldrh.w	fp, [ip]
 80065a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80065ac:	fb09 220b 	mla	r2, r9, fp, r2
 80065b0:	4452      	add	r2, sl
 80065b2:	b289      	uxth	r1, r1
 80065b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065b8:	f84e 1b04 	str.w	r1, [lr], #4
 80065bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80065c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065c4:	f8be 1000 	ldrh.w	r1, [lr]
 80065c8:	fb09 110a 	mla	r1, r9, sl, r1
 80065cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80065d0:	4567      	cmp	r7, ip
 80065d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065d6:	d8e5      	bhi.n	80065a4 <__multiply+0x10c>
 80065d8:	9a01      	ldr	r2, [sp, #4]
 80065da:	50a9      	str	r1, [r5, r2]
 80065dc:	3504      	adds	r5, #4
 80065de:	e799      	b.n	8006514 <__multiply+0x7c>
 80065e0:	3e01      	subs	r6, #1
 80065e2:	e79b      	b.n	800651c <__multiply+0x84>
 80065e4:	0800a265 	.word	0x0800a265
 80065e8:	0800a276 	.word	0x0800a276

080065ec <__pow5mult>:
 80065ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f0:	4615      	mov	r5, r2
 80065f2:	f012 0203 	ands.w	r2, r2, #3
 80065f6:	4606      	mov	r6, r0
 80065f8:	460f      	mov	r7, r1
 80065fa:	d007      	beq.n	800660c <__pow5mult+0x20>
 80065fc:	4c25      	ldr	r4, [pc, #148]	; (8006694 <__pow5mult+0xa8>)
 80065fe:	3a01      	subs	r2, #1
 8006600:	2300      	movs	r3, #0
 8006602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006606:	f7ff fe53 	bl	80062b0 <__multadd>
 800660a:	4607      	mov	r7, r0
 800660c:	10ad      	asrs	r5, r5, #2
 800660e:	d03d      	beq.n	800668c <__pow5mult+0xa0>
 8006610:	69f4      	ldr	r4, [r6, #28]
 8006612:	b97c      	cbnz	r4, 8006634 <__pow5mult+0x48>
 8006614:	2010      	movs	r0, #16
 8006616:	f7fd fd6f 	bl	80040f8 <malloc>
 800661a:	4602      	mov	r2, r0
 800661c:	61f0      	str	r0, [r6, #28]
 800661e:	b928      	cbnz	r0, 800662c <__pow5mult+0x40>
 8006620:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <__pow5mult+0xac>)
 8006622:	481e      	ldr	r0, [pc, #120]	; (800669c <__pow5mult+0xb0>)
 8006624:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006628:	f7fe fefc 	bl	8005424 <__assert_func>
 800662c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006630:	6004      	str	r4, [r0, #0]
 8006632:	60c4      	str	r4, [r0, #12]
 8006634:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800663c:	b94c      	cbnz	r4, 8006652 <__pow5mult+0x66>
 800663e:	f240 2171 	movw	r1, #625	; 0x271
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ff12 	bl	800646c <__i2b>
 8006648:	2300      	movs	r3, #0
 800664a:	f8c8 0008 	str.w	r0, [r8, #8]
 800664e:	4604      	mov	r4, r0
 8006650:	6003      	str	r3, [r0, #0]
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	07eb      	lsls	r3, r5, #31
 8006658:	d50a      	bpl.n	8006670 <__pow5mult+0x84>
 800665a:	4639      	mov	r1, r7
 800665c:	4622      	mov	r2, r4
 800665e:	4630      	mov	r0, r6
 8006660:	f7ff ff1a 	bl	8006498 <__multiply>
 8006664:	4639      	mov	r1, r7
 8006666:	4680      	mov	r8, r0
 8006668:	4630      	mov	r0, r6
 800666a:	f7ff fdff 	bl	800626c <_Bfree>
 800666e:	4647      	mov	r7, r8
 8006670:	106d      	asrs	r5, r5, #1
 8006672:	d00b      	beq.n	800668c <__pow5mult+0xa0>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	b938      	cbnz	r0, 8006688 <__pow5mult+0x9c>
 8006678:	4622      	mov	r2, r4
 800667a:	4621      	mov	r1, r4
 800667c:	4630      	mov	r0, r6
 800667e:	f7ff ff0b 	bl	8006498 <__multiply>
 8006682:	6020      	str	r0, [r4, #0]
 8006684:	f8c0 9000 	str.w	r9, [r0]
 8006688:	4604      	mov	r4, r0
 800668a:	e7e4      	b.n	8006656 <__pow5mult+0x6a>
 800668c:	4638      	mov	r0, r7
 800668e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006692:	bf00      	nop
 8006694:	0800a3c0 	.word	0x0800a3c0
 8006698:	0800a153 	.word	0x0800a153
 800669c:	0800a276 	.word	0x0800a276

080066a0 <__lshift>:
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	460c      	mov	r4, r1
 80066a6:	6849      	ldr	r1, [r1, #4]
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	4607      	mov	r7, r0
 80066b2:	4691      	mov	r9, r2
 80066b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066b8:	f108 0601 	add.w	r6, r8, #1
 80066bc:	42b3      	cmp	r3, r6
 80066be:	db0b      	blt.n	80066d8 <__lshift+0x38>
 80066c0:	4638      	mov	r0, r7
 80066c2:	f7ff fd93 	bl	80061ec <_Balloc>
 80066c6:	4605      	mov	r5, r0
 80066c8:	b948      	cbnz	r0, 80066de <__lshift+0x3e>
 80066ca:	4602      	mov	r2, r0
 80066cc:	4b28      	ldr	r3, [pc, #160]	; (8006770 <__lshift+0xd0>)
 80066ce:	4829      	ldr	r0, [pc, #164]	; (8006774 <__lshift+0xd4>)
 80066d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80066d4:	f7fe fea6 	bl	8005424 <__assert_func>
 80066d8:	3101      	adds	r1, #1
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	e7ee      	b.n	80066bc <__lshift+0x1c>
 80066de:	2300      	movs	r3, #0
 80066e0:	f100 0114 	add.w	r1, r0, #20
 80066e4:	f100 0210 	add.w	r2, r0, #16
 80066e8:	4618      	mov	r0, r3
 80066ea:	4553      	cmp	r3, sl
 80066ec:	db33      	blt.n	8006756 <__lshift+0xb6>
 80066ee:	6920      	ldr	r0, [r4, #16]
 80066f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066f4:	f104 0314 	add.w	r3, r4, #20
 80066f8:	f019 091f 	ands.w	r9, r9, #31
 80066fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006704:	d02b      	beq.n	800675e <__lshift+0xbe>
 8006706:	f1c9 0e20 	rsb	lr, r9, #32
 800670a:	468a      	mov	sl, r1
 800670c:	2200      	movs	r2, #0
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	fa00 f009 	lsl.w	r0, r0, r9
 8006714:	4310      	orrs	r0, r2
 8006716:	f84a 0b04 	str.w	r0, [sl], #4
 800671a:	f853 2b04 	ldr.w	r2, [r3], #4
 800671e:	459c      	cmp	ip, r3
 8006720:	fa22 f20e 	lsr.w	r2, r2, lr
 8006724:	d8f3      	bhi.n	800670e <__lshift+0x6e>
 8006726:	ebac 0304 	sub.w	r3, ip, r4
 800672a:	3b15      	subs	r3, #21
 800672c:	f023 0303 	bic.w	r3, r3, #3
 8006730:	3304      	adds	r3, #4
 8006732:	f104 0015 	add.w	r0, r4, #21
 8006736:	4584      	cmp	ip, r0
 8006738:	bf38      	it	cc
 800673a:	2304      	movcc	r3, #4
 800673c:	50ca      	str	r2, [r1, r3]
 800673e:	b10a      	cbz	r2, 8006744 <__lshift+0xa4>
 8006740:	f108 0602 	add.w	r6, r8, #2
 8006744:	3e01      	subs	r6, #1
 8006746:	4638      	mov	r0, r7
 8006748:	612e      	str	r6, [r5, #16]
 800674a:	4621      	mov	r1, r4
 800674c:	f7ff fd8e 	bl	800626c <_Bfree>
 8006750:	4628      	mov	r0, r5
 8006752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006756:	f842 0f04 	str.w	r0, [r2, #4]!
 800675a:	3301      	adds	r3, #1
 800675c:	e7c5      	b.n	80066ea <__lshift+0x4a>
 800675e:	3904      	subs	r1, #4
 8006760:	f853 2b04 	ldr.w	r2, [r3], #4
 8006764:	f841 2f04 	str.w	r2, [r1, #4]!
 8006768:	459c      	cmp	ip, r3
 800676a:	d8f9      	bhi.n	8006760 <__lshift+0xc0>
 800676c:	e7ea      	b.n	8006744 <__lshift+0xa4>
 800676e:	bf00      	nop
 8006770:	0800a265 	.word	0x0800a265
 8006774:	0800a276 	.word	0x0800a276

08006778 <__mcmp>:
 8006778:	b530      	push	{r4, r5, lr}
 800677a:	6902      	ldr	r2, [r0, #16]
 800677c:	690c      	ldr	r4, [r1, #16]
 800677e:	1b12      	subs	r2, r2, r4
 8006780:	d10e      	bne.n	80067a0 <__mcmp+0x28>
 8006782:	f100 0314 	add.w	r3, r0, #20
 8006786:	3114      	adds	r1, #20
 8006788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800678c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006798:	42a5      	cmp	r5, r4
 800679a:	d003      	beq.n	80067a4 <__mcmp+0x2c>
 800679c:	d305      	bcc.n	80067aa <__mcmp+0x32>
 800679e:	2201      	movs	r2, #1
 80067a0:	4610      	mov	r0, r2
 80067a2:	bd30      	pop	{r4, r5, pc}
 80067a4:	4283      	cmp	r3, r0
 80067a6:	d3f3      	bcc.n	8006790 <__mcmp+0x18>
 80067a8:	e7fa      	b.n	80067a0 <__mcmp+0x28>
 80067aa:	f04f 32ff 	mov.w	r2, #4294967295
 80067ae:	e7f7      	b.n	80067a0 <__mcmp+0x28>

080067b0 <__mdiff>:
 80067b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	460c      	mov	r4, r1
 80067b6:	4606      	mov	r6, r0
 80067b8:	4611      	mov	r1, r2
 80067ba:	4620      	mov	r0, r4
 80067bc:	4690      	mov	r8, r2
 80067be:	f7ff ffdb 	bl	8006778 <__mcmp>
 80067c2:	1e05      	subs	r5, r0, #0
 80067c4:	d110      	bne.n	80067e8 <__mdiff+0x38>
 80067c6:	4629      	mov	r1, r5
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7ff fd0f 	bl	80061ec <_Balloc>
 80067ce:	b930      	cbnz	r0, 80067de <__mdiff+0x2e>
 80067d0:	4b3a      	ldr	r3, [pc, #232]	; (80068bc <__mdiff+0x10c>)
 80067d2:	4602      	mov	r2, r0
 80067d4:	f240 2137 	movw	r1, #567	; 0x237
 80067d8:	4839      	ldr	r0, [pc, #228]	; (80068c0 <__mdiff+0x110>)
 80067da:	f7fe fe23 	bl	8005424 <__assert_func>
 80067de:	2301      	movs	r3, #1
 80067e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e8:	bfa4      	itt	ge
 80067ea:	4643      	movge	r3, r8
 80067ec:	46a0      	movge	r8, r4
 80067ee:	4630      	mov	r0, r6
 80067f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067f4:	bfa6      	itte	ge
 80067f6:	461c      	movge	r4, r3
 80067f8:	2500      	movge	r5, #0
 80067fa:	2501      	movlt	r5, #1
 80067fc:	f7ff fcf6 	bl	80061ec <_Balloc>
 8006800:	b920      	cbnz	r0, 800680c <__mdiff+0x5c>
 8006802:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <__mdiff+0x10c>)
 8006804:	4602      	mov	r2, r0
 8006806:	f240 2145 	movw	r1, #581	; 0x245
 800680a:	e7e5      	b.n	80067d8 <__mdiff+0x28>
 800680c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006810:	6926      	ldr	r6, [r4, #16]
 8006812:	60c5      	str	r5, [r0, #12]
 8006814:	f104 0914 	add.w	r9, r4, #20
 8006818:	f108 0514 	add.w	r5, r8, #20
 800681c:	f100 0e14 	add.w	lr, r0, #20
 8006820:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006828:	f108 0210 	add.w	r2, r8, #16
 800682c:	46f2      	mov	sl, lr
 800682e:	2100      	movs	r1, #0
 8006830:	f859 3b04 	ldr.w	r3, [r9], #4
 8006834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006838:	fa11 f88b 	uxtah	r8, r1, fp
 800683c:	b299      	uxth	r1, r3
 800683e:	0c1b      	lsrs	r3, r3, #16
 8006840:	eba8 0801 	sub.w	r8, r8, r1
 8006844:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006848:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800684c:	fa1f f888 	uxth.w	r8, r8
 8006850:	1419      	asrs	r1, r3, #16
 8006852:	454e      	cmp	r6, r9
 8006854:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006858:	f84a 3b04 	str.w	r3, [sl], #4
 800685c:	d8e8      	bhi.n	8006830 <__mdiff+0x80>
 800685e:	1b33      	subs	r3, r6, r4
 8006860:	3b15      	subs	r3, #21
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	3304      	adds	r3, #4
 8006868:	3415      	adds	r4, #21
 800686a:	42a6      	cmp	r6, r4
 800686c:	bf38      	it	cc
 800686e:	2304      	movcc	r3, #4
 8006870:	441d      	add	r5, r3
 8006872:	4473      	add	r3, lr
 8006874:	469e      	mov	lr, r3
 8006876:	462e      	mov	r6, r5
 8006878:	4566      	cmp	r6, ip
 800687a:	d30e      	bcc.n	800689a <__mdiff+0xea>
 800687c:	f10c 0203 	add.w	r2, ip, #3
 8006880:	1b52      	subs	r2, r2, r5
 8006882:	f022 0203 	bic.w	r2, r2, #3
 8006886:	3d03      	subs	r5, #3
 8006888:	45ac      	cmp	ip, r5
 800688a:	bf38      	it	cc
 800688c:	2200      	movcc	r2, #0
 800688e:	4413      	add	r3, r2
 8006890:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006894:	b17a      	cbz	r2, 80068b6 <__mdiff+0x106>
 8006896:	6107      	str	r7, [r0, #16]
 8006898:	e7a4      	b.n	80067e4 <__mdiff+0x34>
 800689a:	f856 8b04 	ldr.w	r8, [r6], #4
 800689e:	fa11 f288 	uxtah	r2, r1, r8
 80068a2:	1414      	asrs	r4, r2, #16
 80068a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80068a8:	b292      	uxth	r2, r2
 80068aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80068ae:	f84e 2b04 	str.w	r2, [lr], #4
 80068b2:	1421      	asrs	r1, r4, #16
 80068b4:	e7e0      	b.n	8006878 <__mdiff+0xc8>
 80068b6:	3f01      	subs	r7, #1
 80068b8:	e7ea      	b.n	8006890 <__mdiff+0xe0>
 80068ba:	bf00      	nop
 80068bc:	0800a265 	.word	0x0800a265
 80068c0:	0800a276 	.word	0x0800a276

080068c4 <__ulp>:
 80068c4:	b082      	sub	sp, #8
 80068c6:	ed8d 0b00 	vstr	d0, [sp]
 80068ca:	9a01      	ldr	r2, [sp, #4]
 80068cc:	4b0f      	ldr	r3, [pc, #60]	; (800690c <__ulp+0x48>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dc08      	bgt.n	80068ea <__ulp+0x26>
 80068d8:	425b      	negs	r3, r3
 80068da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80068de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80068e2:	da04      	bge.n	80068ee <__ulp+0x2a>
 80068e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068e8:	4113      	asrs	r3, r2
 80068ea:	2200      	movs	r2, #0
 80068ec:	e008      	b.n	8006900 <__ulp+0x3c>
 80068ee:	f1a2 0314 	sub.w	r3, r2, #20
 80068f2:	2b1e      	cmp	r3, #30
 80068f4:	bfda      	itte	le
 80068f6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80068fa:	40da      	lsrle	r2, r3
 80068fc:	2201      	movgt	r2, #1
 80068fe:	2300      	movs	r3, #0
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	ec41 0b10 	vmov	d0, r0, r1
 8006908:	b002      	add	sp, #8
 800690a:	4770      	bx	lr
 800690c:	7ff00000 	.word	0x7ff00000

08006910 <__b2d>:
 8006910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006914:	6906      	ldr	r6, [r0, #16]
 8006916:	f100 0814 	add.w	r8, r0, #20
 800691a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800691e:	1f37      	subs	r7, r6, #4
 8006920:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006924:	4610      	mov	r0, r2
 8006926:	f7ff fd53 	bl	80063d0 <__hi0bits>
 800692a:	f1c0 0320 	rsb	r3, r0, #32
 800692e:	280a      	cmp	r0, #10
 8006930:	600b      	str	r3, [r1, #0]
 8006932:	491b      	ldr	r1, [pc, #108]	; (80069a0 <__b2d+0x90>)
 8006934:	dc15      	bgt.n	8006962 <__b2d+0x52>
 8006936:	f1c0 0c0b 	rsb	ip, r0, #11
 800693a:	fa22 f30c 	lsr.w	r3, r2, ip
 800693e:	45b8      	cmp	r8, r7
 8006940:	ea43 0501 	orr.w	r5, r3, r1
 8006944:	bf34      	ite	cc
 8006946:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800694a:	2300      	movcs	r3, #0
 800694c:	3015      	adds	r0, #21
 800694e:	fa02 f000 	lsl.w	r0, r2, r0
 8006952:	fa23 f30c 	lsr.w	r3, r3, ip
 8006956:	4303      	orrs	r3, r0
 8006958:	461c      	mov	r4, r3
 800695a:	ec45 4b10 	vmov	d0, r4, r5
 800695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006962:	45b8      	cmp	r8, r7
 8006964:	bf3a      	itte	cc
 8006966:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800696a:	f1a6 0708 	subcc.w	r7, r6, #8
 800696e:	2300      	movcs	r3, #0
 8006970:	380b      	subs	r0, #11
 8006972:	d012      	beq.n	800699a <__b2d+0x8a>
 8006974:	f1c0 0120 	rsb	r1, r0, #32
 8006978:	fa23 f401 	lsr.w	r4, r3, r1
 800697c:	4082      	lsls	r2, r0
 800697e:	4322      	orrs	r2, r4
 8006980:	4547      	cmp	r7, r8
 8006982:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006986:	bf8c      	ite	hi
 8006988:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800698c:	2200      	movls	r2, #0
 800698e:	4083      	lsls	r3, r0
 8006990:	40ca      	lsrs	r2, r1
 8006992:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006996:	4313      	orrs	r3, r2
 8006998:	e7de      	b.n	8006958 <__b2d+0x48>
 800699a:	ea42 0501 	orr.w	r5, r2, r1
 800699e:	e7db      	b.n	8006958 <__b2d+0x48>
 80069a0:	3ff00000 	.word	0x3ff00000

080069a4 <__d2b>:
 80069a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069a8:	460f      	mov	r7, r1
 80069aa:	2101      	movs	r1, #1
 80069ac:	ec59 8b10 	vmov	r8, r9, d0
 80069b0:	4616      	mov	r6, r2
 80069b2:	f7ff fc1b 	bl	80061ec <_Balloc>
 80069b6:	4604      	mov	r4, r0
 80069b8:	b930      	cbnz	r0, 80069c8 <__d2b+0x24>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <__d2b+0xac>)
 80069be:	4825      	ldr	r0, [pc, #148]	; (8006a54 <__d2b+0xb0>)
 80069c0:	f240 310f 	movw	r1, #783	; 0x30f
 80069c4:	f7fe fd2e 	bl	8005424 <__assert_func>
 80069c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069d0:	bb2d      	cbnz	r5, 8006a1e <__d2b+0x7a>
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	f1b8 0300 	subs.w	r3, r8, #0
 80069d8:	d026      	beq.n	8006a28 <__d2b+0x84>
 80069da:	4668      	mov	r0, sp
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	f7ff fd17 	bl	8006410 <__lo0bits>
 80069e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069e6:	b1e8      	cbz	r0, 8006a24 <__d2b+0x80>
 80069e8:	f1c0 0320 	rsb	r3, r0, #32
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	430b      	orrs	r3, r1
 80069f2:	40c2      	lsrs	r2, r0
 80069f4:	6163      	str	r3, [r4, #20]
 80069f6:	9201      	str	r2, [sp, #4]
 80069f8:	9b01      	ldr	r3, [sp, #4]
 80069fa:	61a3      	str	r3, [r4, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf14      	ite	ne
 8006a00:	2202      	movne	r2, #2
 8006a02:	2201      	moveq	r2, #1
 8006a04:	6122      	str	r2, [r4, #16]
 8006a06:	b1bd      	cbz	r5, 8006a38 <__d2b+0x94>
 8006a08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a0c:	4405      	add	r5, r0
 8006a0e:	603d      	str	r5, [r7, #0]
 8006a10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a14:	6030      	str	r0, [r6, #0]
 8006a16:	4620      	mov	r0, r4
 8006a18:	b003      	add	sp, #12
 8006a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a22:	e7d6      	b.n	80069d2 <__d2b+0x2e>
 8006a24:	6161      	str	r1, [r4, #20]
 8006a26:	e7e7      	b.n	80069f8 <__d2b+0x54>
 8006a28:	a801      	add	r0, sp, #4
 8006a2a:	f7ff fcf1 	bl	8006410 <__lo0bits>
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	6163      	str	r3, [r4, #20]
 8006a32:	3020      	adds	r0, #32
 8006a34:	2201      	movs	r2, #1
 8006a36:	e7e5      	b.n	8006a04 <__d2b+0x60>
 8006a38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a40:	6038      	str	r0, [r7, #0]
 8006a42:	6918      	ldr	r0, [r3, #16]
 8006a44:	f7ff fcc4 	bl	80063d0 <__hi0bits>
 8006a48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a4c:	e7e2      	b.n	8006a14 <__d2b+0x70>
 8006a4e:	bf00      	nop
 8006a50:	0800a265 	.word	0x0800a265
 8006a54:	0800a276 	.word	0x0800a276

08006a58 <__ratio>:
 8006a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	4688      	mov	r8, r1
 8006a5e:	4669      	mov	r1, sp
 8006a60:	4681      	mov	r9, r0
 8006a62:	f7ff ff55 	bl	8006910 <__b2d>
 8006a66:	a901      	add	r1, sp, #4
 8006a68:	4640      	mov	r0, r8
 8006a6a:	ec55 4b10 	vmov	r4, r5, d0
 8006a6e:	f7ff ff4f 	bl	8006910 <__b2d>
 8006a72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006a7a:	eba3 0c02 	sub.w	ip, r3, r2
 8006a7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006a88:	ec51 0b10 	vmov	r0, r1, d0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bfd6      	itet	le
 8006a90:	460a      	movle	r2, r1
 8006a92:	462a      	movgt	r2, r5
 8006a94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a98:	468b      	mov	fp, r1
 8006a9a:	462f      	mov	r7, r5
 8006a9c:	bfd4      	ite	le
 8006a9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006aa2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	ee10 2a10 	vmov	r2, s0
 8006aac:	465b      	mov	r3, fp
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7f9 feec 	bl	800088c <__aeabi_ddiv>
 8006ab4:	ec41 0b10 	vmov	d0, r0, r1
 8006ab8:	b003      	add	sp, #12
 8006aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006abe <__copybits>:
 8006abe:	3901      	subs	r1, #1
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	1149      	asrs	r1, r1, #5
 8006ac4:	6914      	ldr	r4, [r2, #16]
 8006ac6:	3101      	adds	r1, #1
 8006ac8:	f102 0314 	add.w	r3, r2, #20
 8006acc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ad0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ad4:	1f05      	subs	r5, r0, #4
 8006ad6:	42a3      	cmp	r3, r4
 8006ad8:	d30c      	bcc.n	8006af4 <__copybits+0x36>
 8006ada:	1aa3      	subs	r3, r4, r2
 8006adc:	3b11      	subs	r3, #17
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	3211      	adds	r2, #17
 8006ae4:	42a2      	cmp	r2, r4
 8006ae6:	bf88      	it	hi
 8006ae8:	2300      	movhi	r3, #0
 8006aea:	4418      	add	r0, r3
 8006aec:	2300      	movs	r3, #0
 8006aee:	4288      	cmp	r0, r1
 8006af0:	d305      	bcc.n	8006afe <__copybits+0x40>
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	f853 6b04 	ldr.w	r6, [r3], #4
 8006af8:	f845 6f04 	str.w	r6, [r5, #4]!
 8006afc:	e7eb      	b.n	8006ad6 <__copybits+0x18>
 8006afe:	f840 3b04 	str.w	r3, [r0], #4
 8006b02:	e7f4      	b.n	8006aee <__copybits+0x30>

08006b04 <__any_on>:
 8006b04:	f100 0214 	add.w	r2, r0, #20
 8006b08:	6900      	ldr	r0, [r0, #16]
 8006b0a:	114b      	asrs	r3, r1, #5
 8006b0c:	4298      	cmp	r0, r3
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	db11      	blt.n	8006b36 <__any_on+0x32>
 8006b12:	dd0a      	ble.n	8006b2a <__any_on+0x26>
 8006b14:	f011 011f 	ands.w	r1, r1, #31
 8006b18:	d007      	beq.n	8006b2a <__any_on+0x26>
 8006b1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006b1e:	fa24 f001 	lsr.w	r0, r4, r1
 8006b22:	fa00 f101 	lsl.w	r1, r0, r1
 8006b26:	428c      	cmp	r4, r1
 8006b28:	d10b      	bne.n	8006b42 <__any_on+0x3e>
 8006b2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d803      	bhi.n	8006b3a <__any_on+0x36>
 8006b32:	2000      	movs	r0, #0
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	4603      	mov	r3, r0
 8006b38:	e7f7      	b.n	8006b2a <__any_on+0x26>
 8006b3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b3e:	2900      	cmp	r1, #0
 8006b40:	d0f5      	beq.n	8006b2e <__any_on+0x2a>
 8006b42:	2001      	movs	r0, #1
 8006b44:	e7f6      	b.n	8006b34 <__any_on+0x30>

08006b46 <sulp>:
 8006b46:	b570      	push	{r4, r5, r6, lr}
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	ec45 4b10 	vmov	d0, r4, r5
 8006b50:	4616      	mov	r6, r2
 8006b52:	f7ff feb7 	bl	80068c4 <__ulp>
 8006b56:	ec51 0b10 	vmov	r0, r1, d0
 8006b5a:	b17e      	cbz	r6, 8006b7c <sulp+0x36>
 8006b5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dd09      	ble.n	8006b7c <sulp+0x36>
 8006b68:	051b      	lsls	r3, r3, #20
 8006b6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b6e:	2400      	movs	r4, #0
 8006b70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b74:	4622      	mov	r2, r4
 8006b76:	462b      	mov	r3, r5
 8006b78:	f7f9 fd5e 	bl	8000638 <__aeabi_dmul>
 8006b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b80 <_strtod_l>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	ed2d 8b02 	vpush	{d8}
 8006b88:	b09b      	sub	sp, #108	; 0x6c
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b8e:	2200      	movs	r2, #0
 8006b90:	9216      	str	r2, [sp, #88]	; 0x58
 8006b92:	460d      	mov	r5, r1
 8006b94:	f04f 0800 	mov.w	r8, #0
 8006b98:	f04f 0900 	mov.w	r9, #0
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	9215      	str	r2, [sp, #84]	; 0x54
 8006ba0:	7811      	ldrb	r1, [r2, #0]
 8006ba2:	292b      	cmp	r1, #43	; 0x2b
 8006ba4:	d04c      	beq.n	8006c40 <_strtod_l+0xc0>
 8006ba6:	d83a      	bhi.n	8006c1e <_strtod_l+0x9e>
 8006ba8:	290d      	cmp	r1, #13
 8006baa:	d834      	bhi.n	8006c16 <_strtod_l+0x96>
 8006bac:	2908      	cmp	r1, #8
 8006bae:	d834      	bhi.n	8006c1a <_strtod_l+0x9a>
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d03d      	beq.n	8006c30 <_strtod_l+0xb0>
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	920a      	str	r2, [sp, #40]	; 0x28
 8006bb8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006bba:	7832      	ldrb	r2, [r6, #0]
 8006bbc:	2a30      	cmp	r2, #48	; 0x30
 8006bbe:	f040 80b4 	bne.w	8006d2a <_strtod_l+0x1aa>
 8006bc2:	7872      	ldrb	r2, [r6, #1]
 8006bc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006bc8:	2a58      	cmp	r2, #88	; 0x58
 8006bca:	d170      	bne.n	8006cae <_strtod_l+0x12e>
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	ab16      	add	r3, sp, #88	; 0x58
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	4a8e      	ldr	r2, [pc, #568]	; (8006e10 <_strtod_l+0x290>)
 8006bd8:	ab17      	add	r3, sp, #92	; 0x5c
 8006bda:	a915      	add	r1, sp, #84	; 0x54
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f001 fcaf 	bl	8008540 <__gethex>
 8006be2:	f010 070f 	ands.w	r7, r0, #15
 8006be6:	4605      	mov	r5, r0
 8006be8:	d005      	beq.n	8006bf6 <_strtod_l+0x76>
 8006bea:	2f06      	cmp	r7, #6
 8006bec:	d12a      	bne.n	8006c44 <_strtod_l+0xc4>
 8006bee:	3601      	adds	r6, #1
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	9615      	str	r6, [sp, #84]	; 0x54
 8006bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 857f 	bne.w	80076fc <_strtod_l+0xb7c>
 8006bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c00:	b1db      	cbz	r3, 8006c3a <_strtod_l+0xba>
 8006c02:	4642      	mov	r2, r8
 8006c04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c08:	ec43 2b10 	vmov	d0, r2, r3
 8006c0c:	b01b      	add	sp, #108	; 0x6c
 8006c0e:	ecbd 8b02 	vpop	{d8}
 8006c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c16:	2920      	cmp	r1, #32
 8006c18:	d1cc      	bne.n	8006bb4 <_strtod_l+0x34>
 8006c1a:	3201      	adds	r2, #1
 8006c1c:	e7bf      	b.n	8006b9e <_strtod_l+0x1e>
 8006c1e:	292d      	cmp	r1, #45	; 0x2d
 8006c20:	d1c8      	bne.n	8006bb4 <_strtod_l+0x34>
 8006c22:	2101      	movs	r1, #1
 8006c24:	910a      	str	r1, [sp, #40]	; 0x28
 8006c26:	1c51      	adds	r1, r2, #1
 8006c28:	9115      	str	r1, [sp, #84]	; 0x54
 8006c2a:	7852      	ldrb	r2, [r2, #1]
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	d1c3      	bne.n	8006bb8 <_strtod_l+0x38>
 8006c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c32:	9515      	str	r5, [sp, #84]	; 0x54
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f040 855f 	bne.w	80076f8 <_strtod_l+0xb78>
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	e7e3      	b.n	8006c08 <_strtod_l+0x88>
 8006c40:	2100      	movs	r1, #0
 8006c42:	e7ef      	b.n	8006c24 <_strtod_l+0xa4>
 8006c44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c46:	b13a      	cbz	r2, 8006c58 <_strtod_l+0xd8>
 8006c48:	2135      	movs	r1, #53	; 0x35
 8006c4a:	a818      	add	r0, sp, #96	; 0x60
 8006c4c:	f7ff ff37 	bl	8006abe <__copybits>
 8006c50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c52:	4620      	mov	r0, r4
 8006c54:	f7ff fb0a 	bl	800626c <_Bfree>
 8006c58:	3f01      	subs	r7, #1
 8006c5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c5c:	2f04      	cmp	r7, #4
 8006c5e:	d806      	bhi.n	8006c6e <_strtod_l+0xee>
 8006c60:	e8df f007 	tbb	[pc, r7]
 8006c64:	201d0314 	.word	0x201d0314
 8006c68:	14          	.byte	0x14
 8006c69:	00          	.byte	0x00
 8006c6a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006c6e:	05e9      	lsls	r1, r5, #23
 8006c70:	bf48      	it	mi
 8006c72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006c76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c7a:	0d1b      	lsrs	r3, r3, #20
 8006c7c:	051b      	lsls	r3, r3, #20
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1b9      	bne.n	8006bf6 <_strtod_l+0x76>
 8006c82:	f7fe fb87 	bl	8005394 <__errno>
 8006c86:	2322      	movs	r3, #34	; 0x22
 8006c88:	6003      	str	r3, [r0, #0]
 8006c8a:	e7b4      	b.n	8006bf6 <_strtod_l+0x76>
 8006c8c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006c90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006c9c:	e7e7      	b.n	8006c6e <_strtod_l+0xee>
 8006c9e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006e18 <_strtod_l+0x298>
 8006ca2:	e7e4      	b.n	8006c6e <_strtod_l+0xee>
 8006ca4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ca8:	f04f 38ff 	mov.w	r8, #4294967295
 8006cac:	e7df      	b.n	8006c6e <_strtod_l+0xee>
 8006cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	9215      	str	r2, [sp, #84]	; 0x54
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b30      	cmp	r3, #48	; 0x30
 8006cb8:	d0f9      	beq.n	8006cae <_strtod_l+0x12e>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d09b      	beq.n	8006bf6 <_strtod_l+0x76>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f04f 0a00 	mov.w	sl, #0
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006cce:	46d3      	mov	fp, sl
 8006cd0:	220a      	movs	r2, #10
 8006cd2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006cd4:	7806      	ldrb	r6, [r0, #0]
 8006cd6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006cda:	b2d9      	uxtb	r1, r3
 8006cdc:	2909      	cmp	r1, #9
 8006cde:	d926      	bls.n	8006d2e <_strtod_l+0x1ae>
 8006ce0:	494c      	ldr	r1, [pc, #304]	; (8006e14 <_strtod_l+0x294>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f001 fb8b 	bl	80083fe <strncmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d030      	beq.n	8006d4e <_strtod_l+0x1ce>
 8006cec:	2000      	movs	r0, #0
 8006cee:	4632      	mov	r2, r6
 8006cf0:	9005      	str	r0, [sp, #20]
 8006cf2:	465e      	mov	r6, fp
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2a65      	cmp	r2, #101	; 0x65
 8006cf8:	d001      	beq.n	8006cfe <_strtod_l+0x17e>
 8006cfa:	2a45      	cmp	r2, #69	; 0x45
 8006cfc:	d113      	bne.n	8006d26 <_strtod_l+0x1a6>
 8006cfe:	b91e      	cbnz	r6, 8006d08 <_strtod_l+0x188>
 8006d00:	9a04      	ldr	r2, [sp, #16]
 8006d02:	4302      	orrs	r2, r0
 8006d04:	d094      	beq.n	8006c30 <_strtod_l+0xb0>
 8006d06:	2600      	movs	r6, #0
 8006d08:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006d0a:	1c6a      	adds	r2, r5, #1
 8006d0c:	9215      	str	r2, [sp, #84]	; 0x54
 8006d0e:	786a      	ldrb	r2, [r5, #1]
 8006d10:	2a2b      	cmp	r2, #43	; 0x2b
 8006d12:	d074      	beq.n	8006dfe <_strtod_l+0x27e>
 8006d14:	2a2d      	cmp	r2, #45	; 0x2d
 8006d16:	d078      	beq.n	8006e0a <_strtod_l+0x28a>
 8006d18:	f04f 0c00 	mov.w	ip, #0
 8006d1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d20:	2909      	cmp	r1, #9
 8006d22:	d97f      	bls.n	8006e24 <_strtod_l+0x2a4>
 8006d24:	9515      	str	r5, [sp, #84]	; 0x54
 8006d26:	2700      	movs	r7, #0
 8006d28:	e09e      	b.n	8006e68 <_strtod_l+0x2e8>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e7c8      	b.n	8006cc0 <_strtod_l+0x140>
 8006d2e:	f1bb 0f08 	cmp.w	fp, #8
 8006d32:	bfd8      	it	le
 8006d34:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006d36:	f100 0001 	add.w	r0, r0, #1
 8006d3a:	bfda      	itte	le
 8006d3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d40:	9309      	strle	r3, [sp, #36]	; 0x24
 8006d42:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006d46:	f10b 0b01 	add.w	fp, fp, #1
 8006d4a:	9015      	str	r0, [sp, #84]	; 0x54
 8006d4c:	e7c1      	b.n	8006cd2 <_strtod_l+0x152>
 8006d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	9215      	str	r2, [sp, #84]	; 0x54
 8006d54:	785a      	ldrb	r2, [r3, #1]
 8006d56:	f1bb 0f00 	cmp.w	fp, #0
 8006d5a:	d037      	beq.n	8006dcc <_strtod_l+0x24c>
 8006d5c:	9005      	str	r0, [sp, #20]
 8006d5e:	465e      	mov	r6, fp
 8006d60:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006d64:	2b09      	cmp	r3, #9
 8006d66:	d912      	bls.n	8006d8e <_strtod_l+0x20e>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e7c4      	b.n	8006cf6 <_strtod_l+0x176>
 8006d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	9215      	str	r2, [sp, #84]	; 0x54
 8006d72:	785a      	ldrb	r2, [r3, #1]
 8006d74:	3001      	adds	r0, #1
 8006d76:	2a30      	cmp	r2, #48	; 0x30
 8006d78:	d0f8      	beq.n	8006d6c <_strtod_l+0x1ec>
 8006d7a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	f200 84c1 	bhi.w	8007706 <_strtod_l+0xb86>
 8006d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d86:	9005      	str	r0, [sp, #20]
 8006d88:	2000      	movs	r0, #0
 8006d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	3a30      	subs	r2, #48	; 0x30
 8006d90:	f100 0301 	add.w	r3, r0, #1
 8006d94:	d014      	beq.n	8006dc0 <_strtod_l+0x240>
 8006d96:	9905      	ldr	r1, [sp, #20]
 8006d98:	4419      	add	r1, r3
 8006d9a:	9105      	str	r1, [sp, #20]
 8006d9c:	4633      	mov	r3, r6
 8006d9e:	eb00 0c06 	add.w	ip, r0, r6
 8006da2:	210a      	movs	r1, #10
 8006da4:	4563      	cmp	r3, ip
 8006da6:	d113      	bne.n	8006dd0 <_strtod_l+0x250>
 8006da8:	1833      	adds	r3, r6, r0
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	f106 0601 	add.w	r6, r6, #1
 8006db0:	4406      	add	r6, r0
 8006db2:	dc1a      	bgt.n	8006dea <_strtod_l+0x26a>
 8006db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006db6:	230a      	movs	r3, #10
 8006db8:	fb03 2301 	mla	r3, r3, r1, r2
 8006dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dc2:	1c51      	adds	r1, r2, #1
 8006dc4:	9115      	str	r1, [sp, #84]	; 0x54
 8006dc6:	7852      	ldrb	r2, [r2, #1]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	e7c9      	b.n	8006d60 <_strtod_l+0x1e0>
 8006dcc:	4658      	mov	r0, fp
 8006dce:	e7d2      	b.n	8006d76 <_strtod_l+0x1f6>
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	f103 0301 	add.w	r3, r3, #1
 8006dd6:	dc03      	bgt.n	8006de0 <_strtod_l+0x260>
 8006dd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006dda:	434f      	muls	r7, r1
 8006ddc:	9709      	str	r7, [sp, #36]	; 0x24
 8006dde:	e7e1      	b.n	8006da4 <_strtod_l+0x224>
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	bfd8      	it	le
 8006de4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006de8:	e7dc      	b.n	8006da4 <_strtod_l+0x224>
 8006dea:	2e10      	cmp	r6, #16
 8006dec:	bfdc      	itt	le
 8006dee:	230a      	movle	r3, #10
 8006df0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006df4:	e7e3      	b.n	8006dbe <_strtod_l+0x23e>
 8006df6:	2300      	movs	r3, #0
 8006df8:	9305      	str	r3, [sp, #20]
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e780      	b.n	8006d00 <_strtod_l+0x180>
 8006dfe:	f04f 0c00 	mov.w	ip, #0
 8006e02:	1caa      	adds	r2, r5, #2
 8006e04:	9215      	str	r2, [sp, #84]	; 0x54
 8006e06:	78aa      	ldrb	r2, [r5, #2]
 8006e08:	e788      	b.n	8006d1c <_strtod_l+0x19c>
 8006e0a:	f04f 0c01 	mov.w	ip, #1
 8006e0e:	e7f8      	b.n	8006e02 <_strtod_l+0x282>
 8006e10:	0800a3d0 	.word	0x0800a3d0
 8006e14:	0800a3cc 	.word	0x0800a3cc
 8006e18:	7ff00000 	.word	0x7ff00000
 8006e1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e1e:	1c51      	adds	r1, r2, #1
 8006e20:	9115      	str	r1, [sp, #84]	; 0x54
 8006e22:	7852      	ldrb	r2, [r2, #1]
 8006e24:	2a30      	cmp	r2, #48	; 0x30
 8006e26:	d0f9      	beq.n	8006e1c <_strtod_l+0x29c>
 8006e28:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006e2c:	2908      	cmp	r1, #8
 8006e2e:	f63f af7a 	bhi.w	8006d26 <_strtod_l+0x1a6>
 8006e32:	3a30      	subs	r2, #48	; 0x30
 8006e34:	9208      	str	r2, [sp, #32]
 8006e36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e38:	920c      	str	r2, [sp, #48]	; 0x30
 8006e3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e3c:	1c57      	adds	r7, r2, #1
 8006e3e:	9715      	str	r7, [sp, #84]	; 0x54
 8006e40:	7852      	ldrb	r2, [r2, #1]
 8006e42:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006e46:	f1be 0f09 	cmp.w	lr, #9
 8006e4a:	d938      	bls.n	8006ebe <_strtod_l+0x33e>
 8006e4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e4e:	1a7f      	subs	r7, r7, r1
 8006e50:	2f08      	cmp	r7, #8
 8006e52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006e56:	dc03      	bgt.n	8006e60 <_strtod_l+0x2e0>
 8006e58:	9908      	ldr	r1, [sp, #32]
 8006e5a:	428f      	cmp	r7, r1
 8006e5c:	bfa8      	it	ge
 8006e5e:	460f      	movge	r7, r1
 8006e60:	f1bc 0f00 	cmp.w	ip, #0
 8006e64:	d000      	beq.n	8006e68 <_strtod_l+0x2e8>
 8006e66:	427f      	negs	r7, r7
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	d14f      	bne.n	8006f0c <_strtod_l+0x38c>
 8006e6c:	9904      	ldr	r1, [sp, #16]
 8006e6e:	4301      	orrs	r1, r0
 8006e70:	f47f aec1 	bne.w	8006bf6 <_strtod_l+0x76>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f47f aedb 	bne.w	8006c30 <_strtod_l+0xb0>
 8006e7a:	2a69      	cmp	r2, #105	; 0x69
 8006e7c:	d029      	beq.n	8006ed2 <_strtod_l+0x352>
 8006e7e:	dc26      	bgt.n	8006ece <_strtod_l+0x34e>
 8006e80:	2a49      	cmp	r2, #73	; 0x49
 8006e82:	d026      	beq.n	8006ed2 <_strtod_l+0x352>
 8006e84:	2a4e      	cmp	r2, #78	; 0x4e
 8006e86:	f47f aed3 	bne.w	8006c30 <_strtod_l+0xb0>
 8006e8a:	499b      	ldr	r1, [pc, #620]	; (80070f8 <_strtod_l+0x578>)
 8006e8c:	a815      	add	r0, sp, #84	; 0x54
 8006e8e:	f001 fd97 	bl	80089c0 <__match>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	f43f aecc 	beq.w	8006c30 <_strtod_l+0xb0>
 8006e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b28      	cmp	r3, #40	; 0x28
 8006e9e:	d12f      	bne.n	8006f00 <_strtod_l+0x380>
 8006ea0:	4996      	ldr	r1, [pc, #600]	; (80070fc <_strtod_l+0x57c>)
 8006ea2:	aa18      	add	r2, sp, #96	; 0x60
 8006ea4:	a815      	add	r0, sp, #84	; 0x54
 8006ea6:	f001 fd9f 	bl	80089e8 <__hexnan>
 8006eaa:	2805      	cmp	r0, #5
 8006eac:	d128      	bne.n	8006f00 <_strtod_l+0x380>
 8006eae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006eb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006eb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006eb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006ebc:	e69b      	b.n	8006bf6 <_strtod_l+0x76>
 8006ebe:	9f08      	ldr	r7, [sp, #32]
 8006ec0:	210a      	movs	r1, #10
 8006ec2:	fb01 2107 	mla	r1, r1, r7, r2
 8006ec6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006eca:	9208      	str	r2, [sp, #32]
 8006ecc:	e7b5      	b.n	8006e3a <_strtod_l+0x2ba>
 8006ece:	2a6e      	cmp	r2, #110	; 0x6e
 8006ed0:	e7d9      	b.n	8006e86 <_strtod_l+0x306>
 8006ed2:	498b      	ldr	r1, [pc, #556]	; (8007100 <_strtod_l+0x580>)
 8006ed4:	a815      	add	r0, sp, #84	; 0x54
 8006ed6:	f001 fd73 	bl	80089c0 <__match>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f43f aea8 	beq.w	8006c30 <_strtod_l+0xb0>
 8006ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ee2:	4988      	ldr	r1, [pc, #544]	; (8007104 <_strtod_l+0x584>)
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	a815      	add	r0, sp, #84	; 0x54
 8006ee8:	9315      	str	r3, [sp, #84]	; 0x54
 8006eea:	f001 fd69 	bl	80089c0 <__match>
 8006eee:	b910      	cbnz	r0, 8006ef6 <_strtod_l+0x376>
 8006ef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8006ef6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007114 <_strtod_l+0x594>
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	e67a      	b.n	8006bf6 <_strtod_l+0x76>
 8006f00:	4881      	ldr	r0, [pc, #516]	; (8007108 <_strtod_l+0x588>)
 8006f02:	f001 fa91 	bl	8008428 <nan>
 8006f06:	ec59 8b10 	vmov	r8, r9, d0
 8006f0a:	e674      	b.n	8006bf6 <_strtod_l+0x76>
 8006f0c:	9b05      	ldr	r3, [sp, #20]
 8006f0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f10:	1afb      	subs	r3, r7, r3
 8006f12:	f1bb 0f00 	cmp.w	fp, #0
 8006f16:	bf08      	it	eq
 8006f18:	46b3      	moveq	fp, r6
 8006f1a:	2e10      	cmp	r6, #16
 8006f1c:	9308      	str	r3, [sp, #32]
 8006f1e:	4635      	mov	r5, r6
 8006f20:	bfa8      	it	ge
 8006f22:	2510      	movge	r5, #16
 8006f24:	f7f9 fb0e 	bl	8000544 <__aeabi_ui2d>
 8006f28:	2e09      	cmp	r6, #9
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	4689      	mov	r9, r1
 8006f2e:	dd13      	ble.n	8006f58 <_strtod_l+0x3d8>
 8006f30:	4b76      	ldr	r3, [pc, #472]	; (800710c <_strtod_l+0x58c>)
 8006f32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006f36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f3a:	f7f9 fb7d 	bl	8000638 <__aeabi_dmul>
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4650      	mov	r0, sl
 8006f42:	4689      	mov	r9, r1
 8006f44:	f7f9 fafe 	bl	8000544 <__aeabi_ui2d>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 f9bc 	bl	80002cc <__adddf3>
 8006f54:	4680      	mov	r8, r0
 8006f56:	4689      	mov	r9, r1
 8006f58:	2e0f      	cmp	r6, #15
 8006f5a:	dc38      	bgt.n	8006fce <_strtod_l+0x44e>
 8006f5c:	9b08      	ldr	r3, [sp, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f43f ae49 	beq.w	8006bf6 <_strtod_l+0x76>
 8006f64:	dd24      	ble.n	8006fb0 <_strtod_l+0x430>
 8006f66:	2b16      	cmp	r3, #22
 8006f68:	dc0b      	bgt.n	8006f82 <_strtod_l+0x402>
 8006f6a:	4968      	ldr	r1, [pc, #416]	; (800710c <_strtod_l+0x58c>)
 8006f6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f74:	4642      	mov	r2, r8
 8006f76:	464b      	mov	r3, r9
 8006f78:	f7f9 fb5e 	bl	8000638 <__aeabi_dmul>
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	4689      	mov	r9, r1
 8006f80:	e639      	b.n	8006bf6 <_strtod_l+0x76>
 8006f82:	9a08      	ldr	r2, [sp, #32]
 8006f84:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	db20      	blt.n	8006fce <_strtod_l+0x44e>
 8006f8c:	4c5f      	ldr	r4, [pc, #380]	; (800710c <_strtod_l+0x58c>)
 8006f8e:	f1c6 060f 	rsb	r6, r6, #15
 8006f92:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006f96:	4642      	mov	r2, r8
 8006f98:	464b      	mov	r3, r9
 8006f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f9e:	f7f9 fb4b 	bl	8000638 <__aeabi_dmul>
 8006fa2:	9b08      	ldr	r3, [sp, #32]
 8006fa4:	1b9e      	subs	r6, r3, r6
 8006fa6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006faa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006fae:	e7e3      	b.n	8006f78 <_strtod_l+0x3f8>
 8006fb0:	9b08      	ldr	r3, [sp, #32]
 8006fb2:	3316      	adds	r3, #22
 8006fb4:	db0b      	blt.n	8006fce <_strtod_l+0x44e>
 8006fb6:	9b05      	ldr	r3, [sp, #20]
 8006fb8:	1bdf      	subs	r7, r3, r7
 8006fba:	4b54      	ldr	r3, [pc, #336]	; (800710c <_strtod_l+0x58c>)
 8006fbc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	f7f9 fc60 	bl	800088c <__aeabi_ddiv>
 8006fcc:	e7d6      	b.n	8006f7c <_strtod_l+0x3fc>
 8006fce:	9b08      	ldr	r3, [sp, #32]
 8006fd0:	1b75      	subs	r5, r6, r5
 8006fd2:	441d      	add	r5, r3
 8006fd4:	2d00      	cmp	r5, #0
 8006fd6:	dd70      	ble.n	80070ba <_strtod_l+0x53a>
 8006fd8:	f015 030f 	ands.w	r3, r5, #15
 8006fdc:	d00a      	beq.n	8006ff4 <_strtod_l+0x474>
 8006fde:	494b      	ldr	r1, [pc, #300]	; (800710c <_strtod_l+0x58c>)
 8006fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fec:	f7f9 fb24 	bl	8000638 <__aeabi_dmul>
 8006ff0:	4680      	mov	r8, r0
 8006ff2:	4689      	mov	r9, r1
 8006ff4:	f035 050f 	bics.w	r5, r5, #15
 8006ff8:	d04d      	beq.n	8007096 <_strtod_l+0x516>
 8006ffa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006ffe:	dd22      	ble.n	8007046 <_strtod_l+0x4c6>
 8007000:	2500      	movs	r5, #0
 8007002:	46ab      	mov	fp, r5
 8007004:	9509      	str	r5, [sp, #36]	; 0x24
 8007006:	9505      	str	r5, [sp, #20]
 8007008:	2322      	movs	r3, #34	; 0x22
 800700a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007114 <_strtod_l+0x594>
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	f04f 0800 	mov.w	r8, #0
 8007014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	f43f aded 	beq.w	8006bf6 <_strtod_l+0x76>
 800701c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800701e:	4620      	mov	r0, r4
 8007020:	f7ff f924 	bl	800626c <_Bfree>
 8007024:	9905      	ldr	r1, [sp, #20]
 8007026:	4620      	mov	r0, r4
 8007028:	f7ff f920 	bl	800626c <_Bfree>
 800702c:	4659      	mov	r1, fp
 800702e:	4620      	mov	r0, r4
 8007030:	f7ff f91c 	bl	800626c <_Bfree>
 8007034:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007036:	4620      	mov	r0, r4
 8007038:	f7ff f918 	bl	800626c <_Bfree>
 800703c:	4629      	mov	r1, r5
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff f914 	bl	800626c <_Bfree>
 8007044:	e5d7      	b.n	8006bf6 <_strtod_l+0x76>
 8007046:	4b32      	ldr	r3, [pc, #200]	; (8007110 <_strtod_l+0x590>)
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	2300      	movs	r3, #0
 800704c:	112d      	asrs	r5, r5, #4
 800704e:	4640      	mov	r0, r8
 8007050:	4649      	mov	r1, r9
 8007052:	469a      	mov	sl, r3
 8007054:	2d01      	cmp	r5, #1
 8007056:	dc21      	bgt.n	800709c <_strtod_l+0x51c>
 8007058:	b10b      	cbz	r3, 800705e <_strtod_l+0x4de>
 800705a:	4680      	mov	r8, r0
 800705c:	4689      	mov	r9, r1
 800705e:	492c      	ldr	r1, [pc, #176]	; (8007110 <_strtod_l+0x590>)
 8007060:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007064:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007070:	f7f9 fae2 	bl	8000638 <__aeabi_dmul>
 8007074:	4b27      	ldr	r3, [pc, #156]	; (8007114 <_strtod_l+0x594>)
 8007076:	460a      	mov	r2, r1
 8007078:	400b      	ands	r3, r1
 800707a:	4927      	ldr	r1, [pc, #156]	; (8007118 <_strtod_l+0x598>)
 800707c:	428b      	cmp	r3, r1
 800707e:	4680      	mov	r8, r0
 8007080:	d8be      	bhi.n	8007000 <_strtod_l+0x480>
 8007082:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007086:	428b      	cmp	r3, r1
 8007088:	bf86      	itte	hi
 800708a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800711c <_strtod_l+0x59c>
 800708e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007092:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007096:	2300      	movs	r3, #0
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	e07b      	b.n	8007194 <_strtod_l+0x614>
 800709c:	07ea      	lsls	r2, r5, #31
 800709e:	d505      	bpl.n	80070ac <_strtod_l+0x52c>
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	f7f9 fac7 	bl	8000638 <__aeabi_dmul>
 80070aa:	2301      	movs	r3, #1
 80070ac:	9a04      	ldr	r2, [sp, #16]
 80070ae:	3208      	adds	r2, #8
 80070b0:	f10a 0a01 	add.w	sl, sl, #1
 80070b4:	106d      	asrs	r5, r5, #1
 80070b6:	9204      	str	r2, [sp, #16]
 80070b8:	e7cc      	b.n	8007054 <_strtod_l+0x4d4>
 80070ba:	d0ec      	beq.n	8007096 <_strtod_l+0x516>
 80070bc:	426d      	negs	r5, r5
 80070be:	f015 020f 	ands.w	r2, r5, #15
 80070c2:	d00a      	beq.n	80070da <_strtod_l+0x55a>
 80070c4:	4b11      	ldr	r3, [pc, #68]	; (800710c <_strtod_l+0x58c>)
 80070c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ca:	4640      	mov	r0, r8
 80070cc:	4649      	mov	r1, r9
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 fbdb 	bl	800088c <__aeabi_ddiv>
 80070d6:	4680      	mov	r8, r0
 80070d8:	4689      	mov	r9, r1
 80070da:	112d      	asrs	r5, r5, #4
 80070dc:	d0db      	beq.n	8007096 <_strtod_l+0x516>
 80070de:	2d1f      	cmp	r5, #31
 80070e0:	dd1e      	ble.n	8007120 <_strtod_l+0x5a0>
 80070e2:	2500      	movs	r5, #0
 80070e4:	46ab      	mov	fp, r5
 80070e6:	9509      	str	r5, [sp, #36]	; 0x24
 80070e8:	9505      	str	r5, [sp, #20]
 80070ea:	2322      	movs	r3, #34	; 0x22
 80070ec:	f04f 0800 	mov.w	r8, #0
 80070f0:	f04f 0900 	mov.w	r9, #0
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	e78d      	b.n	8007014 <_strtod_l+0x494>
 80070f8:	0800a129 	.word	0x0800a129
 80070fc:	0800a3e4 	.word	0x0800a3e4
 8007100:	0800a121 	.word	0x0800a121
 8007104:	0800a203 	.word	0x0800a203
 8007108:	0800a1ff 	.word	0x0800a1ff
 800710c:	0800a2f8 	.word	0x0800a2f8
 8007110:	0800a2d0 	.word	0x0800a2d0
 8007114:	7ff00000 	.word	0x7ff00000
 8007118:	7ca00000 	.word	0x7ca00000
 800711c:	7fefffff 	.word	0x7fefffff
 8007120:	f015 0310 	ands.w	r3, r5, #16
 8007124:	bf18      	it	ne
 8007126:	236a      	movne	r3, #106	; 0x6a
 8007128:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80074cc <_strtod_l+0x94c>
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	4640      	mov	r0, r8
 8007130:	4649      	mov	r1, r9
 8007132:	2300      	movs	r3, #0
 8007134:	07ea      	lsls	r2, r5, #31
 8007136:	d504      	bpl.n	8007142 <_strtod_l+0x5c2>
 8007138:	e9da 2300 	ldrd	r2, r3, [sl]
 800713c:	f7f9 fa7c 	bl	8000638 <__aeabi_dmul>
 8007140:	2301      	movs	r3, #1
 8007142:	106d      	asrs	r5, r5, #1
 8007144:	f10a 0a08 	add.w	sl, sl, #8
 8007148:	d1f4      	bne.n	8007134 <_strtod_l+0x5b4>
 800714a:	b10b      	cbz	r3, 8007150 <_strtod_l+0x5d0>
 800714c:	4680      	mov	r8, r0
 800714e:	4689      	mov	r9, r1
 8007150:	9b04      	ldr	r3, [sp, #16]
 8007152:	b1bb      	cbz	r3, 8007184 <_strtod_l+0x604>
 8007154:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007158:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800715c:	2b00      	cmp	r3, #0
 800715e:	4649      	mov	r1, r9
 8007160:	dd10      	ble.n	8007184 <_strtod_l+0x604>
 8007162:	2b1f      	cmp	r3, #31
 8007164:	f340 811e 	ble.w	80073a4 <_strtod_l+0x824>
 8007168:	2b34      	cmp	r3, #52	; 0x34
 800716a:	bfde      	ittt	le
 800716c:	f04f 33ff 	movle.w	r3, #4294967295
 8007170:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007174:	4093      	lslle	r3, r2
 8007176:	f04f 0800 	mov.w	r8, #0
 800717a:	bfcc      	ite	gt
 800717c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007180:	ea03 0901 	andle.w	r9, r3, r1
 8007184:	2200      	movs	r2, #0
 8007186:	2300      	movs	r3, #0
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 fcbc 	bl	8000b08 <__aeabi_dcmpeq>
 8007190:	2800      	cmp	r0, #0
 8007192:	d1a6      	bne.n	80070e2 <_strtod_l+0x562>
 8007194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800719a:	4633      	mov	r3, r6
 800719c:	465a      	mov	r2, fp
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff f8cc 	bl	800633c <__s2b>
 80071a4:	9009      	str	r0, [sp, #36]	; 0x24
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f43f af2a 	beq.w	8007000 <_strtod_l+0x480>
 80071ac:	9a08      	ldr	r2, [sp, #32]
 80071ae:	9b05      	ldr	r3, [sp, #20]
 80071b0:	2a00      	cmp	r2, #0
 80071b2:	eba3 0307 	sub.w	r3, r3, r7
 80071b6:	bfa8      	it	ge
 80071b8:	2300      	movge	r3, #0
 80071ba:	930c      	str	r3, [sp, #48]	; 0x30
 80071bc:	2500      	movs	r5, #0
 80071be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071c2:	9312      	str	r3, [sp, #72]	; 0x48
 80071c4:	46ab      	mov	fp, r5
 80071c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c8:	4620      	mov	r0, r4
 80071ca:	6859      	ldr	r1, [r3, #4]
 80071cc:	f7ff f80e 	bl	80061ec <_Balloc>
 80071d0:	9005      	str	r0, [sp, #20]
 80071d2:	2800      	cmp	r0, #0
 80071d4:	f43f af18 	beq.w	8007008 <_strtod_l+0x488>
 80071d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	3202      	adds	r2, #2
 80071de:	f103 010c 	add.w	r1, r3, #12
 80071e2:	0092      	lsls	r2, r2, #2
 80071e4:	300c      	adds	r0, #12
 80071e6:	f7fe f909 	bl	80053fc <memcpy>
 80071ea:	ec49 8b10 	vmov	d0, r8, r9
 80071ee:	aa18      	add	r2, sp, #96	; 0x60
 80071f0:	a917      	add	r1, sp, #92	; 0x5c
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7ff fbd6 	bl	80069a4 <__d2b>
 80071f8:	ec49 8b18 	vmov	d8, r8, r9
 80071fc:	9016      	str	r0, [sp, #88]	; 0x58
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f af02 	beq.w	8007008 <_strtod_l+0x488>
 8007204:	2101      	movs	r1, #1
 8007206:	4620      	mov	r0, r4
 8007208:	f7ff f930 	bl	800646c <__i2b>
 800720c:	4683      	mov	fp, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f aefa 	beq.w	8007008 <_strtod_l+0x488>
 8007214:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007216:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007218:	2e00      	cmp	r6, #0
 800721a:	bfab      	itete	ge
 800721c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800721e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007220:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007222:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007226:	bfac      	ite	ge
 8007228:	eb06 0a03 	addge.w	sl, r6, r3
 800722c:	1b9f      	sublt	r7, r3, r6
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	1af6      	subs	r6, r6, r3
 8007232:	4416      	add	r6, r2
 8007234:	4ba0      	ldr	r3, [pc, #640]	; (80074b8 <_strtod_l+0x938>)
 8007236:	3e01      	subs	r6, #1
 8007238:	429e      	cmp	r6, r3
 800723a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800723e:	f280 80c4 	bge.w	80073ca <_strtod_l+0x84a>
 8007242:	1b9b      	subs	r3, r3, r6
 8007244:	2b1f      	cmp	r3, #31
 8007246:	eba2 0203 	sub.w	r2, r2, r3
 800724a:	f04f 0101 	mov.w	r1, #1
 800724e:	f300 80b0 	bgt.w	80073b2 <_strtod_l+0x832>
 8007252:	fa01 f303 	lsl.w	r3, r1, r3
 8007256:	930e      	str	r3, [sp, #56]	; 0x38
 8007258:	2300      	movs	r3, #0
 800725a:	930d      	str	r3, [sp, #52]	; 0x34
 800725c:	eb0a 0602 	add.w	r6, sl, r2
 8007260:	9b04      	ldr	r3, [sp, #16]
 8007262:	45b2      	cmp	sl, r6
 8007264:	4417      	add	r7, r2
 8007266:	441f      	add	r7, r3
 8007268:	4653      	mov	r3, sl
 800726a:	bfa8      	it	ge
 800726c:	4633      	movge	r3, r6
 800726e:	42bb      	cmp	r3, r7
 8007270:	bfa8      	it	ge
 8007272:	463b      	movge	r3, r7
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfc2      	ittt	gt
 8007278:	1af6      	subgt	r6, r6, r3
 800727a:	1aff      	subgt	r7, r7, r3
 800727c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007282:	2b00      	cmp	r3, #0
 8007284:	dd17      	ble.n	80072b6 <_strtod_l+0x736>
 8007286:	4659      	mov	r1, fp
 8007288:	461a      	mov	r2, r3
 800728a:	4620      	mov	r0, r4
 800728c:	f7ff f9ae 	bl	80065ec <__pow5mult>
 8007290:	4683      	mov	fp, r0
 8007292:	2800      	cmp	r0, #0
 8007294:	f43f aeb8 	beq.w	8007008 <_strtod_l+0x488>
 8007298:	4601      	mov	r1, r0
 800729a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800729c:	4620      	mov	r0, r4
 800729e:	f7ff f8fb 	bl	8006498 <__multiply>
 80072a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f43f aeaf 	beq.w	8007008 <_strtod_l+0x488>
 80072aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80072ac:	4620      	mov	r0, r4
 80072ae:	f7fe ffdd 	bl	800626c <_Bfree>
 80072b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b4:	9316      	str	r3, [sp, #88]	; 0x58
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	f300 808c 	bgt.w	80073d4 <_strtod_l+0x854>
 80072bc:	9b08      	ldr	r3, [sp, #32]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dd08      	ble.n	80072d4 <_strtod_l+0x754>
 80072c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072c4:	9905      	ldr	r1, [sp, #20]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7ff f990 	bl	80065ec <__pow5mult>
 80072cc:	9005      	str	r0, [sp, #20]
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f43f ae9a 	beq.w	8007008 <_strtod_l+0x488>
 80072d4:	2f00      	cmp	r7, #0
 80072d6:	dd08      	ble.n	80072ea <_strtod_l+0x76a>
 80072d8:	9905      	ldr	r1, [sp, #20]
 80072da:	463a      	mov	r2, r7
 80072dc:	4620      	mov	r0, r4
 80072de:	f7ff f9df 	bl	80066a0 <__lshift>
 80072e2:	9005      	str	r0, [sp, #20]
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f43f ae8f 	beq.w	8007008 <_strtod_l+0x488>
 80072ea:	f1ba 0f00 	cmp.w	sl, #0
 80072ee:	dd08      	ble.n	8007302 <_strtod_l+0x782>
 80072f0:	4659      	mov	r1, fp
 80072f2:	4652      	mov	r2, sl
 80072f4:	4620      	mov	r0, r4
 80072f6:	f7ff f9d3 	bl	80066a0 <__lshift>
 80072fa:	4683      	mov	fp, r0
 80072fc:	2800      	cmp	r0, #0
 80072fe:	f43f ae83 	beq.w	8007008 <_strtod_l+0x488>
 8007302:	9a05      	ldr	r2, [sp, #20]
 8007304:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007306:	4620      	mov	r0, r4
 8007308:	f7ff fa52 	bl	80067b0 <__mdiff>
 800730c:	4605      	mov	r5, r0
 800730e:	2800      	cmp	r0, #0
 8007310:	f43f ae7a 	beq.w	8007008 <_strtod_l+0x488>
 8007314:	68c3      	ldr	r3, [r0, #12]
 8007316:	930b      	str	r3, [sp, #44]	; 0x2c
 8007318:	2300      	movs	r3, #0
 800731a:	60c3      	str	r3, [r0, #12]
 800731c:	4659      	mov	r1, fp
 800731e:	f7ff fa2b 	bl	8006778 <__mcmp>
 8007322:	2800      	cmp	r0, #0
 8007324:	da60      	bge.n	80073e8 <_strtod_l+0x868>
 8007326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007328:	ea53 0308 	orrs.w	r3, r3, r8
 800732c:	f040 8084 	bne.w	8007438 <_strtod_l+0x8b8>
 8007330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007334:	2b00      	cmp	r3, #0
 8007336:	d17f      	bne.n	8007438 <_strtod_l+0x8b8>
 8007338:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800733c:	0d1b      	lsrs	r3, r3, #20
 800733e:	051b      	lsls	r3, r3, #20
 8007340:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007344:	d978      	bls.n	8007438 <_strtod_l+0x8b8>
 8007346:	696b      	ldr	r3, [r5, #20]
 8007348:	b913      	cbnz	r3, 8007350 <_strtod_l+0x7d0>
 800734a:	692b      	ldr	r3, [r5, #16]
 800734c:	2b01      	cmp	r3, #1
 800734e:	dd73      	ble.n	8007438 <_strtod_l+0x8b8>
 8007350:	4629      	mov	r1, r5
 8007352:	2201      	movs	r2, #1
 8007354:	4620      	mov	r0, r4
 8007356:	f7ff f9a3 	bl	80066a0 <__lshift>
 800735a:	4659      	mov	r1, fp
 800735c:	4605      	mov	r5, r0
 800735e:	f7ff fa0b 	bl	8006778 <__mcmp>
 8007362:	2800      	cmp	r0, #0
 8007364:	dd68      	ble.n	8007438 <_strtod_l+0x8b8>
 8007366:	9904      	ldr	r1, [sp, #16]
 8007368:	4a54      	ldr	r2, [pc, #336]	; (80074bc <_strtod_l+0x93c>)
 800736a:	464b      	mov	r3, r9
 800736c:	2900      	cmp	r1, #0
 800736e:	f000 8084 	beq.w	800747a <_strtod_l+0x8fa>
 8007372:	ea02 0109 	and.w	r1, r2, r9
 8007376:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800737a:	dc7e      	bgt.n	800747a <_strtod_l+0x8fa>
 800737c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007380:	f77f aeb3 	ble.w	80070ea <_strtod_l+0x56a>
 8007384:	4b4e      	ldr	r3, [pc, #312]	; (80074c0 <_strtod_l+0x940>)
 8007386:	4640      	mov	r0, r8
 8007388:	4649      	mov	r1, r9
 800738a:	2200      	movs	r2, #0
 800738c:	f7f9 f954 	bl	8000638 <__aeabi_dmul>
 8007390:	4b4a      	ldr	r3, [pc, #296]	; (80074bc <_strtod_l+0x93c>)
 8007392:	400b      	ands	r3, r1
 8007394:	4680      	mov	r8, r0
 8007396:	4689      	mov	r9, r1
 8007398:	2b00      	cmp	r3, #0
 800739a:	f47f ae3f 	bne.w	800701c <_strtod_l+0x49c>
 800739e:	2322      	movs	r3, #34	; 0x22
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	e63b      	b.n	800701c <_strtod_l+0x49c>
 80073a4:	f04f 32ff 	mov.w	r2, #4294967295
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	ea03 0808 	and.w	r8, r3, r8
 80073b0:	e6e8      	b.n	8007184 <_strtod_l+0x604>
 80073b2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80073b6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80073ba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80073be:	36e2      	adds	r6, #226	; 0xe2
 80073c0:	fa01 f306 	lsl.w	r3, r1, r6
 80073c4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80073c8:	e748      	b.n	800725c <_strtod_l+0x6dc>
 80073ca:	2100      	movs	r1, #0
 80073cc:	2301      	movs	r3, #1
 80073ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80073d2:	e743      	b.n	800725c <_strtod_l+0x6dc>
 80073d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80073d6:	4632      	mov	r2, r6
 80073d8:	4620      	mov	r0, r4
 80073da:	f7ff f961 	bl	80066a0 <__lshift>
 80073de:	9016      	str	r0, [sp, #88]	; 0x58
 80073e0:	2800      	cmp	r0, #0
 80073e2:	f47f af6b 	bne.w	80072bc <_strtod_l+0x73c>
 80073e6:	e60f      	b.n	8007008 <_strtod_l+0x488>
 80073e8:	46ca      	mov	sl, r9
 80073ea:	d171      	bne.n	80074d0 <_strtod_l+0x950>
 80073ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073f2:	b352      	cbz	r2, 800744a <_strtod_l+0x8ca>
 80073f4:	4a33      	ldr	r2, [pc, #204]	; (80074c4 <_strtod_l+0x944>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d12a      	bne.n	8007450 <_strtod_l+0x8d0>
 80073fa:	9b04      	ldr	r3, [sp, #16]
 80073fc:	4641      	mov	r1, r8
 80073fe:	b1fb      	cbz	r3, 8007440 <_strtod_l+0x8c0>
 8007400:	4b2e      	ldr	r3, [pc, #184]	; (80074bc <_strtod_l+0x93c>)
 8007402:	ea09 0303 	and.w	r3, r9, r3
 8007406:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800740a:	f04f 32ff 	mov.w	r2, #4294967295
 800740e:	d81a      	bhi.n	8007446 <_strtod_l+0x8c6>
 8007410:	0d1b      	lsrs	r3, r3, #20
 8007412:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007416:	fa02 f303 	lsl.w	r3, r2, r3
 800741a:	4299      	cmp	r1, r3
 800741c:	d118      	bne.n	8007450 <_strtod_l+0x8d0>
 800741e:	4b2a      	ldr	r3, [pc, #168]	; (80074c8 <_strtod_l+0x948>)
 8007420:	459a      	cmp	sl, r3
 8007422:	d102      	bne.n	800742a <_strtod_l+0x8aa>
 8007424:	3101      	adds	r1, #1
 8007426:	f43f adef 	beq.w	8007008 <_strtod_l+0x488>
 800742a:	4b24      	ldr	r3, [pc, #144]	; (80074bc <_strtod_l+0x93c>)
 800742c:	ea0a 0303 	and.w	r3, sl, r3
 8007430:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007434:	f04f 0800 	mov.w	r8, #0
 8007438:	9b04      	ldr	r3, [sp, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1a2      	bne.n	8007384 <_strtod_l+0x804>
 800743e:	e5ed      	b.n	800701c <_strtod_l+0x49c>
 8007440:	f04f 33ff 	mov.w	r3, #4294967295
 8007444:	e7e9      	b.n	800741a <_strtod_l+0x89a>
 8007446:	4613      	mov	r3, r2
 8007448:	e7e7      	b.n	800741a <_strtod_l+0x89a>
 800744a:	ea53 0308 	orrs.w	r3, r3, r8
 800744e:	d08a      	beq.n	8007366 <_strtod_l+0x7e6>
 8007450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007452:	b1e3      	cbz	r3, 800748e <_strtod_l+0x90e>
 8007454:	ea13 0f0a 	tst.w	r3, sl
 8007458:	d0ee      	beq.n	8007438 <_strtod_l+0x8b8>
 800745a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745c:	9a04      	ldr	r2, [sp, #16]
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	b1c3      	cbz	r3, 8007496 <_strtod_l+0x916>
 8007464:	f7ff fb6f 	bl	8006b46 <sulp>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	ec51 0b18 	vmov	r0, r1, d8
 8007470:	f7f8 ff2c 	bl	80002cc <__adddf3>
 8007474:	4680      	mov	r8, r0
 8007476:	4689      	mov	r9, r1
 8007478:	e7de      	b.n	8007438 <_strtod_l+0x8b8>
 800747a:	4013      	ands	r3, r2
 800747c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007480:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007484:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007488:	f04f 38ff 	mov.w	r8, #4294967295
 800748c:	e7d4      	b.n	8007438 <_strtod_l+0x8b8>
 800748e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007490:	ea13 0f08 	tst.w	r3, r8
 8007494:	e7e0      	b.n	8007458 <_strtod_l+0x8d8>
 8007496:	f7ff fb56 	bl	8006b46 <sulp>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	ec51 0b18 	vmov	r0, r1, d8
 80074a2:	f7f8 ff11 	bl	80002c8 <__aeabi_dsub>
 80074a6:	2200      	movs	r2, #0
 80074a8:	2300      	movs	r3, #0
 80074aa:	4680      	mov	r8, r0
 80074ac:	4689      	mov	r9, r1
 80074ae:	f7f9 fb2b 	bl	8000b08 <__aeabi_dcmpeq>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d0c0      	beq.n	8007438 <_strtod_l+0x8b8>
 80074b6:	e618      	b.n	80070ea <_strtod_l+0x56a>
 80074b8:	fffffc02 	.word	0xfffffc02
 80074bc:	7ff00000 	.word	0x7ff00000
 80074c0:	39500000 	.word	0x39500000
 80074c4:	000fffff 	.word	0x000fffff
 80074c8:	7fefffff 	.word	0x7fefffff
 80074cc:	0800a3f8 	.word	0x0800a3f8
 80074d0:	4659      	mov	r1, fp
 80074d2:	4628      	mov	r0, r5
 80074d4:	f7ff fac0 	bl	8006a58 <__ratio>
 80074d8:	ec57 6b10 	vmov	r6, r7, d0
 80074dc:	ee10 0a10 	vmov	r0, s0
 80074e0:	2200      	movs	r2, #0
 80074e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f9 fb22 	bl	8000b30 <__aeabi_dcmple>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d071      	beq.n	80075d4 <_strtod_l+0xa54>
 80074f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d17c      	bne.n	80075f0 <_strtod_l+0xa70>
 80074f6:	f1b8 0f00 	cmp.w	r8, #0
 80074fa:	d15a      	bne.n	80075b2 <_strtod_l+0xa32>
 80074fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007500:	2b00      	cmp	r3, #0
 8007502:	d15d      	bne.n	80075c0 <_strtod_l+0xa40>
 8007504:	4b90      	ldr	r3, [pc, #576]	; (8007748 <_strtod_l+0xbc8>)
 8007506:	2200      	movs	r2, #0
 8007508:	4630      	mov	r0, r6
 800750a:	4639      	mov	r1, r7
 800750c:	f7f9 fb06 	bl	8000b1c <__aeabi_dcmplt>
 8007510:	2800      	cmp	r0, #0
 8007512:	d15c      	bne.n	80075ce <_strtod_l+0xa4e>
 8007514:	4630      	mov	r0, r6
 8007516:	4639      	mov	r1, r7
 8007518:	4b8c      	ldr	r3, [pc, #560]	; (800774c <_strtod_l+0xbcc>)
 800751a:	2200      	movs	r2, #0
 800751c:	f7f9 f88c 	bl	8000638 <__aeabi_dmul>
 8007520:	4606      	mov	r6, r0
 8007522:	460f      	mov	r7, r1
 8007524:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007528:	9606      	str	r6, [sp, #24]
 800752a:	9307      	str	r3, [sp, #28]
 800752c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007530:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007534:	4b86      	ldr	r3, [pc, #536]	; (8007750 <_strtod_l+0xbd0>)
 8007536:	ea0a 0303 	and.w	r3, sl, r3
 800753a:	930d      	str	r3, [sp, #52]	; 0x34
 800753c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800753e:	4b85      	ldr	r3, [pc, #532]	; (8007754 <_strtod_l+0xbd4>)
 8007540:	429a      	cmp	r2, r3
 8007542:	f040 8090 	bne.w	8007666 <_strtod_l+0xae6>
 8007546:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800754a:	ec49 8b10 	vmov	d0, r8, r9
 800754e:	f7ff f9b9 	bl	80068c4 <__ulp>
 8007552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007556:	ec51 0b10 	vmov	r0, r1, d0
 800755a:	f7f9 f86d 	bl	8000638 <__aeabi_dmul>
 800755e:	4642      	mov	r2, r8
 8007560:	464b      	mov	r3, r9
 8007562:	f7f8 feb3 	bl	80002cc <__adddf3>
 8007566:	460b      	mov	r3, r1
 8007568:	4979      	ldr	r1, [pc, #484]	; (8007750 <_strtod_l+0xbd0>)
 800756a:	4a7b      	ldr	r2, [pc, #492]	; (8007758 <_strtod_l+0xbd8>)
 800756c:	4019      	ands	r1, r3
 800756e:	4291      	cmp	r1, r2
 8007570:	4680      	mov	r8, r0
 8007572:	d944      	bls.n	80075fe <_strtod_l+0xa7e>
 8007574:	ee18 2a90 	vmov	r2, s17
 8007578:	4b78      	ldr	r3, [pc, #480]	; (800775c <_strtod_l+0xbdc>)
 800757a:	429a      	cmp	r2, r3
 800757c:	d104      	bne.n	8007588 <_strtod_l+0xa08>
 800757e:	ee18 3a10 	vmov	r3, s16
 8007582:	3301      	adds	r3, #1
 8007584:	f43f ad40 	beq.w	8007008 <_strtod_l+0x488>
 8007588:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800775c <_strtod_l+0xbdc>
 800758c:	f04f 38ff 	mov.w	r8, #4294967295
 8007590:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007592:	4620      	mov	r0, r4
 8007594:	f7fe fe6a 	bl	800626c <_Bfree>
 8007598:	9905      	ldr	r1, [sp, #20]
 800759a:	4620      	mov	r0, r4
 800759c:	f7fe fe66 	bl	800626c <_Bfree>
 80075a0:	4659      	mov	r1, fp
 80075a2:	4620      	mov	r0, r4
 80075a4:	f7fe fe62 	bl	800626c <_Bfree>
 80075a8:	4629      	mov	r1, r5
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7fe fe5e 	bl	800626c <_Bfree>
 80075b0:	e609      	b.n	80071c6 <_strtod_l+0x646>
 80075b2:	f1b8 0f01 	cmp.w	r8, #1
 80075b6:	d103      	bne.n	80075c0 <_strtod_l+0xa40>
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	f43f ad95 	beq.w	80070ea <_strtod_l+0x56a>
 80075c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007718 <_strtod_l+0xb98>
 80075c4:	4f60      	ldr	r7, [pc, #384]	; (8007748 <_strtod_l+0xbc8>)
 80075c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075ca:	2600      	movs	r6, #0
 80075cc:	e7ae      	b.n	800752c <_strtod_l+0x9ac>
 80075ce:	4f5f      	ldr	r7, [pc, #380]	; (800774c <_strtod_l+0xbcc>)
 80075d0:	2600      	movs	r6, #0
 80075d2:	e7a7      	b.n	8007524 <_strtod_l+0x9a4>
 80075d4:	4b5d      	ldr	r3, [pc, #372]	; (800774c <_strtod_l+0xbcc>)
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f9 f82c 	bl	8000638 <__aeabi_dmul>
 80075e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e2:	4606      	mov	r6, r0
 80075e4:	460f      	mov	r7, r1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d09c      	beq.n	8007524 <_strtod_l+0x9a4>
 80075ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80075ee:	e79d      	b.n	800752c <_strtod_l+0x9ac>
 80075f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007720 <_strtod_l+0xba0>
 80075f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075f8:	ec57 6b17 	vmov	r6, r7, d7
 80075fc:	e796      	b.n	800752c <_strtod_l+0x9ac>
 80075fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	46ca      	mov	sl, r9
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1c2      	bne.n	8007590 <_strtod_l+0xa10>
 800760a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800760e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007610:	0d1b      	lsrs	r3, r3, #20
 8007612:	051b      	lsls	r3, r3, #20
 8007614:	429a      	cmp	r2, r3
 8007616:	d1bb      	bne.n	8007590 <_strtod_l+0xa10>
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f9 fb6c 	bl	8000cf8 <__aeabi_d2lz>
 8007620:	f7f8 ffdc 	bl	80005dc <__aeabi_l2d>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f8 fe4c 	bl	80002c8 <__aeabi_dsub>
 8007630:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007632:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007636:	ea43 0308 	orr.w	r3, r3, r8
 800763a:	4313      	orrs	r3, r2
 800763c:	4606      	mov	r6, r0
 800763e:	460f      	mov	r7, r1
 8007640:	d054      	beq.n	80076ec <_strtod_l+0xb6c>
 8007642:	a339      	add	r3, pc, #228	; (adr r3, 8007728 <_strtod_l+0xba8>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f7f9 fa68 	bl	8000b1c <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	f47f ace5 	bne.w	800701c <_strtod_l+0x49c>
 8007652:	a337      	add	r3, pc, #220	; (adr r3, 8007730 <_strtod_l+0xbb0>)
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	4630      	mov	r0, r6
 800765a:	4639      	mov	r1, r7
 800765c:	f7f9 fa7c 	bl	8000b58 <__aeabi_dcmpgt>
 8007660:	2800      	cmp	r0, #0
 8007662:	d095      	beq.n	8007590 <_strtod_l+0xa10>
 8007664:	e4da      	b.n	800701c <_strtod_l+0x49c>
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	b333      	cbz	r3, 80076b8 <_strtod_l+0xb38>
 800766a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800766c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007670:	d822      	bhi.n	80076b8 <_strtod_l+0xb38>
 8007672:	a331      	add	r3, pc, #196	; (adr r3, 8007738 <_strtod_l+0xbb8>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 fa58 	bl	8000b30 <__aeabi_dcmple>
 8007680:	b1a0      	cbz	r0, 80076ac <_strtod_l+0xb2c>
 8007682:	4639      	mov	r1, r7
 8007684:	4630      	mov	r0, r6
 8007686:	f7f9 faaf 	bl	8000be8 <__aeabi_d2uiz>
 800768a:	2801      	cmp	r0, #1
 800768c:	bf38      	it	cc
 800768e:	2001      	movcc	r0, #1
 8007690:	f7f8 ff58 	bl	8000544 <__aeabi_ui2d>
 8007694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007696:	4606      	mov	r6, r0
 8007698:	460f      	mov	r7, r1
 800769a:	bb23      	cbnz	r3, 80076e6 <_strtod_l+0xb66>
 800769c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076a0:	9010      	str	r0, [sp, #64]	; 0x40
 80076a2:	9311      	str	r3, [sp, #68]	; 0x44
 80076a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80076ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80076bc:	eeb0 0a48 	vmov.f32	s0, s16
 80076c0:	eef0 0a68 	vmov.f32	s1, s17
 80076c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80076c8:	f7ff f8fc 	bl	80068c4 <__ulp>
 80076cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80076d0:	ec53 2b10 	vmov	r2, r3, d0
 80076d4:	f7f8 ffb0 	bl	8000638 <__aeabi_dmul>
 80076d8:	ec53 2b18 	vmov	r2, r3, d8
 80076dc:	f7f8 fdf6 	bl	80002cc <__adddf3>
 80076e0:	4680      	mov	r8, r0
 80076e2:	4689      	mov	r9, r1
 80076e4:	e78d      	b.n	8007602 <_strtod_l+0xa82>
 80076e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80076ea:	e7db      	b.n	80076a4 <_strtod_l+0xb24>
 80076ec:	a314      	add	r3, pc, #80	; (adr r3, 8007740 <_strtod_l+0xbc0>)
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f7f9 fa13 	bl	8000b1c <__aeabi_dcmplt>
 80076f6:	e7b3      	b.n	8007660 <_strtod_l+0xae0>
 80076f8:	2300      	movs	r3, #0
 80076fa:	930a      	str	r3, [sp, #40]	; 0x28
 80076fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	f7ff ba7c 	b.w	8006bfe <_strtod_l+0x7e>
 8007706:	2a65      	cmp	r2, #101	; 0x65
 8007708:	f43f ab75 	beq.w	8006df6 <_strtod_l+0x276>
 800770c:	2a45      	cmp	r2, #69	; 0x45
 800770e:	f43f ab72 	beq.w	8006df6 <_strtod_l+0x276>
 8007712:	2301      	movs	r3, #1
 8007714:	f7ff bbaa 	b.w	8006e6c <_strtod_l+0x2ec>
 8007718:	00000000 	.word	0x00000000
 800771c:	bff00000 	.word	0xbff00000
 8007720:	00000000 	.word	0x00000000
 8007724:	3ff00000 	.word	0x3ff00000
 8007728:	94a03595 	.word	0x94a03595
 800772c:	3fdfffff 	.word	0x3fdfffff
 8007730:	35afe535 	.word	0x35afe535
 8007734:	3fe00000 	.word	0x3fe00000
 8007738:	ffc00000 	.word	0xffc00000
 800773c:	41dfffff 	.word	0x41dfffff
 8007740:	94a03595 	.word	0x94a03595
 8007744:	3fcfffff 	.word	0x3fcfffff
 8007748:	3ff00000 	.word	0x3ff00000
 800774c:	3fe00000 	.word	0x3fe00000
 8007750:	7ff00000 	.word	0x7ff00000
 8007754:	7fe00000 	.word	0x7fe00000
 8007758:	7c9fffff 	.word	0x7c9fffff
 800775c:	7fefffff 	.word	0x7fefffff

08007760 <_strtod_r>:
 8007760:	4b01      	ldr	r3, [pc, #4]	; (8007768 <_strtod_r+0x8>)
 8007762:	f7ff ba0d 	b.w	8006b80 <_strtod_l>
 8007766:	bf00      	nop
 8007768:	20000084 	.word	0x20000084

0800776c <_strtol_l.constprop.0>:
 800776c:	2b01      	cmp	r3, #1
 800776e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007772:	d001      	beq.n	8007778 <_strtol_l.constprop.0+0xc>
 8007774:	2b24      	cmp	r3, #36	; 0x24
 8007776:	d906      	bls.n	8007786 <_strtol_l.constprop.0+0x1a>
 8007778:	f7fd fe0c 	bl	8005394 <__errno>
 800777c:	2316      	movs	r3, #22
 800777e:	6003      	str	r3, [r0, #0]
 8007780:	2000      	movs	r0, #0
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800786c <_strtol_l.constprop.0+0x100>
 800778a:	460d      	mov	r5, r1
 800778c:	462e      	mov	r6, r5
 800778e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007792:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007796:	f017 0708 	ands.w	r7, r7, #8
 800779a:	d1f7      	bne.n	800778c <_strtol_l.constprop.0+0x20>
 800779c:	2c2d      	cmp	r4, #45	; 0x2d
 800779e:	d132      	bne.n	8007806 <_strtol_l.constprop.0+0x9a>
 80077a0:	782c      	ldrb	r4, [r5, #0]
 80077a2:	2701      	movs	r7, #1
 80077a4:	1cb5      	adds	r5, r6, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05b      	beq.n	8007862 <_strtol_l.constprop.0+0xf6>
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d109      	bne.n	80077c2 <_strtol_l.constprop.0+0x56>
 80077ae:	2c30      	cmp	r4, #48	; 0x30
 80077b0:	d107      	bne.n	80077c2 <_strtol_l.constprop.0+0x56>
 80077b2:	782c      	ldrb	r4, [r5, #0]
 80077b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077b8:	2c58      	cmp	r4, #88	; 0x58
 80077ba:	d14d      	bne.n	8007858 <_strtol_l.constprop.0+0xec>
 80077bc:	786c      	ldrb	r4, [r5, #1]
 80077be:	2310      	movs	r3, #16
 80077c0:	3502      	adds	r5, #2
 80077c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80077c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80077ca:	f04f 0e00 	mov.w	lr, #0
 80077ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80077d2:	4676      	mov	r6, lr
 80077d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80077d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80077dc:	f1bc 0f09 	cmp.w	ip, #9
 80077e0:	d816      	bhi.n	8007810 <_strtol_l.constprop.0+0xa4>
 80077e2:	4664      	mov	r4, ip
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	dd24      	ble.n	8007832 <_strtol_l.constprop.0+0xc6>
 80077e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80077ec:	d008      	beq.n	8007800 <_strtol_l.constprop.0+0x94>
 80077ee:	45b1      	cmp	r9, r6
 80077f0:	d31c      	bcc.n	800782c <_strtol_l.constprop.0+0xc0>
 80077f2:	d101      	bne.n	80077f8 <_strtol_l.constprop.0+0x8c>
 80077f4:	45a2      	cmp	sl, r4
 80077f6:	db19      	blt.n	800782c <_strtol_l.constprop.0+0xc0>
 80077f8:	fb06 4603 	mla	r6, r6, r3, r4
 80077fc:	f04f 0e01 	mov.w	lr, #1
 8007800:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007804:	e7e8      	b.n	80077d8 <_strtol_l.constprop.0+0x6c>
 8007806:	2c2b      	cmp	r4, #43	; 0x2b
 8007808:	bf04      	itt	eq
 800780a:	782c      	ldrbeq	r4, [r5, #0]
 800780c:	1cb5      	addeq	r5, r6, #2
 800780e:	e7ca      	b.n	80077a6 <_strtol_l.constprop.0+0x3a>
 8007810:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007814:	f1bc 0f19 	cmp.w	ip, #25
 8007818:	d801      	bhi.n	800781e <_strtol_l.constprop.0+0xb2>
 800781a:	3c37      	subs	r4, #55	; 0x37
 800781c:	e7e2      	b.n	80077e4 <_strtol_l.constprop.0+0x78>
 800781e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007822:	f1bc 0f19 	cmp.w	ip, #25
 8007826:	d804      	bhi.n	8007832 <_strtol_l.constprop.0+0xc6>
 8007828:	3c57      	subs	r4, #87	; 0x57
 800782a:	e7db      	b.n	80077e4 <_strtol_l.constprop.0+0x78>
 800782c:	f04f 3eff 	mov.w	lr, #4294967295
 8007830:	e7e6      	b.n	8007800 <_strtol_l.constprop.0+0x94>
 8007832:	f1be 3fff 	cmp.w	lr, #4294967295
 8007836:	d105      	bne.n	8007844 <_strtol_l.constprop.0+0xd8>
 8007838:	2322      	movs	r3, #34	; 0x22
 800783a:	6003      	str	r3, [r0, #0]
 800783c:	4646      	mov	r6, r8
 800783e:	b942      	cbnz	r2, 8007852 <_strtol_l.constprop.0+0xe6>
 8007840:	4630      	mov	r0, r6
 8007842:	e79e      	b.n	8007782 <_strtol_l.constprop.0+0x16>
 8007844:	b107      	cbz	r7, 8007848 <_strtol_l.constprop.0+0xdc>
 8007846:	4276      	negs	r6, r6
 8007848:	2a00      	cmp	r2, #0
 800784a:	d0f9      	beq.n	8007840 <_strtol_l.constprop.0+0xd4>
 800784c:	f1be 0f00 	cmp.w	lr, #0
 8007850:	d000      	beq.n	8007854 <_strtol_l.constprop.0+0xe8>
 8007852:	1e69      	subs	r1, r5, #1
 8007854:	6011      	str	r1, [r2, #0]
 8007856:	e7f3      	b.n	8007840 <_strtol_l.constprop.0+0xd4>
 8007858:	2430      	movs	r4, #48	; 0x30
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1b1      	bne.n	80077c2 <_strtol_l.constprop.0+0x56>
 800785e:	2308      	movs	r3, #8
 8007860:	e7af      	b.n	80077c2 <_strtol_l.constprop.0+0x56>
 8007862:	2c30      	cmp	r4, #48	; 0x30
 8007864:	d0a5      	beq.n	80077b2 <_strtol_l.constprop.0+0x46>
 8007866:	230a      	movs	r3, #10
 8007868:	e7ab      	b.n	80077c2 <_strtol_l.constprop.0+0x56>
 800786a:	bf00      	nop
 800786c:	0800a421 	.word	0x0800a421

08007870 <_strtol_r>:
 8007870:	f7ff bf7c 	b.w	800776c <_strtol_l.constprop.0>

08007874 <__ssputs_r>:
 8007874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007878:	688e      	ldr	r6, [r1, #8]
 800787a:	461f      	mov	r7, r3
 800787c:	42be      	cmp	r6, r7
 800787e:	680b      	ldr	r3, [r1, #0]
 8007880:	4682      	mov	sl, r0
 8007882:	460c      	mov	r4, r1
 8007884:	4690      	mov	r8, r2
 8007886:	d82c      	bhi.n	80078e2 <__ssputs_r+0x6e>
 8007888:	898a      	ldrh	r2, [r1, #12]
 800788a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800788e:	d026      	beq.n	80078de <__ssputs_r+0x6a>
 8007890:	6965      	ldr	r5, [r4, #20]
 8007892:	6909      	ldr	r1, [r1, #16]
 8007894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007898:	eba3 0901 	sub.w	r9, r3, r1
 800789c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078a0:	1c7b      	adds	r3, r7, #1
 80078a2:	444b      	add	r3, r9
 80078a4:	106d      	asrs	r5, r5, #1
 80078a6:	429d      	cmp	r5, r3
 80078a8:	bf38      	it	cc
 80078aa:	461d      	movcc	r5, r3
 80078ac:	0553      	lsls	r3, r2, #21
 80078ae:	d527      	bpl.n	8007900 <__ssputs_r+0x8c>
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7fc fc49 	bl	8004148 <_malloc_r>
 80078b6:	4606      	mov	r6, r0
 80078b8:	b360      	cbz	r0, 8007914 <__ssputs_r+0xa0>
 80078ba:	6921      	ldr	r1, [r4, #16]
 80078bc:	464a      	mov	r2, r9
 80078be:	f7fd fd9d 	bl	80053fc <memcpy>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	6126      	str	r6, [r4, #16]
 80078d0:	6165      	str	r5, [r4, #20]
 80078d2:	444e      	add	r6, r9
 80078d4:	eba5 0509 	sub.w	r5, r5, r9
 80078d8:	6026      	str	r6, [r4, #0]
 80078da:	60a5      	str	r5, [r4, #8]
 80078dc:	463e      	mov	r6, r7
 80078de:	42be      	cmp	r6, r7
 80078e0:	d900      	bls.n	80078e4 <__ssputs_r+0x70>
 80078e2:	463e      	mov	r6, r7
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	4632      	mov	r2, r6
 80078e8:	4641      	mov	r1, r8
 80078ea:	f000 fd6e 	bl	80083ca <memmove>
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	1b9b      	subs	r3, r3, r6
 80078f2:	60a3      	str	r3, [r4, #8]
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	4433      	add	r3, r6
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	2000      	movs	r0, #0
 80078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007900:	462a      	mov	r2, r5
 8007902:	f001 f91e 	bl	8008b42 <_realloc_r>
 8007906:	4606      	mov	r6, r0
 8007908:	2800      	cmp	r0, #0
 800790a:	d1e0      	bne.n	80078ce <__ssputs_r+0x5a>
 800790c:	6921      	ldr	r1, [r4, #16]
 800790e:	4650      	mov	r0, sl
 8007910:	f7fe fc20 	bl	8006154 <_free_r>
 8007914:	230c      	movs	r3, #12
 8007916:	f8ca 3000 	str.w	r3, [sl]
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	f04f 30ff 	mov.w	r0, #4294967295
 8007926:	e7e9      	b.n	80078fc <__ssputs_r+0x88>

08007928 <_svfiprintf_r>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	4698      	mov	r8, r3
 800792e:	898b      	ldrh	r3, [r1, #12]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	b09d      	sub	sp, #116	; 0x74
 8007934:	4607      	mov	r7, r0
 8007936:	460d      	mov	r5, r1
 8007938:	4614      	mov	r4, r2
 800793a:	d50e      	bpl.n	800795a <_svfiprintf_r+0x32>
 800793c:	690b      	ldr	r3, [r1, #16]
 800793e:	b963      	cbnz	r3, 800795a <_svfiprintf_r+0x32>
 8007940:	2140      	movs	r1, #64	; 0x40
 8007942:	f7fc fc01 	bl	8004148 <_malloc_r>
 8007946:	6028      	str	r0, [r5, #0]
 8007948:	6128      	str	r0, [r5, #16]
 800794a:	b920      	cbnz	r0, 8007956 <_svfiprintf_r+0x2e>
 800794c:	230c      	movs	r3, #12
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	e0d0      	b.n	8007af8 <_svfiprintf_r+0x1d0>
 8007956:	2340      	movs	r3, #64	; 0x40
 8007958:	616b      	str	r3, [r5, #20]
 800795a:	2300      	movs	r3, #0
 800795c:	9309      	str	r3, [sp, #36]	; 0x24
 800795e:	2320      	movs	r3, #32
 8007960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007964:	f8cd 800c 	str.w	r8, [sp, #12]
 8007968:	2330      	movs	r3, #48	; 0x30
 800796a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b10 <_svfiprintf_r+0x1e8>
 800796e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007972:	f04f 0901 	mov.w	r9, #1
 8007976:	4623      	mov	r3, r4
 8007978:	469a      	mov	sl, r3
 800797a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800797e:	b10a      	cbz	r2, 8007984 <_svfiprintf_r+0x5c>
 8007980:	2a25      	cmp	r2, #37	; 0x25
 8007982:	d1f9      	bne.n	8007978 <_svfiprintf_r+0x50>
 8007984:	ebba 0b04 	subs.w	fp, sl, r4
 8007988:	d00b      	beq.n	80079a2 <_svfiprintf_r+0x7a>
 800798a:	465b      	mov	r3, fp
 800798c:	4622      	mov	r2, r4
 800798e:	4629      	mov	r1, r5
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ff6f 	bl	8007874 <__ssputs_r>
 8007996:	3001      	adds	r0, #1
 8007998:	f000 80a9 	beq.w	8007aee <_svfiprintf_r+0x1c6>
 800799c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800799e:	445a      	add	r2, fp
 80079a0:	9209      	str	r2, [sp, #36]	; 0x24
 80079a2:	f89a 3000 	ldrb.w	r3, [sl]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 80a1 	beq.w	8007aee <_svfiprintf_r+0x1c6>
 80079ac:	2300      	movs	r3, #0
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295
 80079b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079b6:	f10a 0a01 	add.w	sl, sl, #1
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	9307      	str	r3, [sp, #28]
 80079be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079c2:	931a      	str	r3, [sp, #104]	; 0x68
 80079c4:	4654      	mov	r4, sl
 80079c6:	2205      	movs	r2, #5
 80079c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079cc:	4850      	ldr	r0, [pc, #320]	; (8007b10 <_svfiprintf_r+0x1e8>)
 80079ce:	f7f8 fc1f 	bl	8000210 <memchr>
 80079d2:	9a04      	ldr	r2, [sp, #16]
 80079d4:	b9d8      	cbnz	r0, 8007a0e <_svfiprintf_r+0xe6>
 80079d6:	06d0      	lsls	r0, r2, #27
 80079d8:	bf44      	itt	mi
 80079da:	2320      	movmi	r3, #32
 80079dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e0:	0711      	lsls	r1, r2, #28
 80079e2:	bf44      	itt	mi
 80079e4:	232b      	movmi	r3, #43	; 0x2b
 80079e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ea:	f89a 3000 	ldrb.w	r3, [sl]
 80079ee:	2b2a      	cmp	r3, #42	; 0x2a
 80079f0:	d015      	beq.n	8007a1e <_svfiprintf_r+0xf6>
 80079f2:	9a07      	ldr	r2, [sp, #28]
 80079f4:	4654      	mov	r4, sl
 80079f6:	2000      	movs	r0, #0
 80079f8:	f04f 0c0a 	mov.w	ip, #10
 80079fc:	4621      	mov	r1, r4
 80079fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a02:	3b30      	subs	r3, #48	; 0x30
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d94d      	bls.n	8007aa4 <_svfiprintf_r+0x17c>
 8007a08:	b1b0      	cbz	r0, 8007a38 <_svfiprintf_r+0x110>
 8007a0a:	9207      	str	r2, [sp, #28]
 8007a0c:	e014      	b.n	8007a38 <_svfiprintf_r+0x110>
 8007a0e:	eba0 0308 	sub.w	r3, r0, r8
 8007a12:	fa09 f303 	lsl.w	r3, r9, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	46a2      	mov	sl, r4
 8007a1c:	e7d2      	b.n	80079c4 <_svfiprintf_r+0x9c>
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	1d19      	adds	r1, r3, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	9103      	str	r1, [sp, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	bfbb      	ittet	lt
 8007a2a:	425b      	neglt	r3, r3
 8007a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a30:	9307      	strge	r3, [sp, #28]
 8007a32:	9307      	strlt	r3, [sp, #28]
 8007a34:	bfb8      	it	lt
 8007a36:	9204      	strlt	r2, [sp, #16]
 8007a38:	7823      	ldrb	r3, [r4, #0]
 8007a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a3c:	d10c      	bne.n	8007a58 <_svfiprintf_r+0x130>
 8007a3e:	7863      	ldrb	r3, [r4, #1]
 8007a40:	2b2a      	cmp	r3, #42	; 0x2a
 8007a42:	d134      	bne.n	8007aae <_svfiprintf_r+0x186>
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	9203      	str	r2, [sp, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bfb8      	it	lt
 8007a50:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a54:	3402      	adds	r4, #2
 8007a56:	9305      	str	r3, [sp, #20]
 8007a58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b20 <_svfiprintf_r+0x1f8>
 8007a5c:	7821      	ldrb	r1, [r4, #0]
 8007a5e:	2203      	movs	r2, #3
 8007a60:	4650      	mov	r0, sl
 8007a62:	f7f8 fbd5 	bl	8000210 <memchr>
 8007a66:	b138      	cbz	r0, 8007a78 <_svfiprintf_r+0x150>
 8007a68:	9b04      	ldr	r3, [sp, #16]
 8007a6a:	eba0 000a 	sub.w	r0, r0, sl
 8007a6e:	2240      	movs	r2, #64	; 0x40
 8007a70:	4082      	lsls	r2, r0
 8007a72:	4313      	orrs	r3, r2
 8007a74:	3401      	adds	r4, #1
 8007a76:	9304      	str	r3, [sp, #16]
 8007a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7c:	4825      	ldr	r0, [pc, #148]	; (8007b14 <_svfiprintf_r+0x1ec>)
 8007a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a82:	2206      	movs	r2, #6
 8007a84:	f7f8 fbc4 	bl	8000210 <memchr>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d038      	beq.n	8007afe <_svfiprintf_r+0x1d6>
 8007a8c:	4b22      	ldr	r3, [pc, #136]	; (8007b18 <_svfiprintf_r+0x1f0>)
 8007a8e:	bb1b      	cbnz	r3, 8007ad8 <_svfiprintf_r+0x1b0>
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	3307      	adds	r3, #7
 8007a94:	f023 0307 	bic.w	r3, r3, #7
 8007a98:	3308      	adds	r3, #8
 8007a9a:	9303      	str	r3, [sp, #12]
 8007a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9e:	4433      	add	r3, r6
 8007aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa2:	e768      	b.n	8007976 <_svfiprintf_r+0x4e>
 8007aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	2001      	movs	r0, #1
 8007aac:	e7a6      	b.n	80079fc <_svfiprintf_r+0xd4>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	3401      	adds	r4, #1
 8007ab2:	9305      	str	r3, [sp, #20]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f04f 0c0a 	mov.w	ip, #10
 8007aba:	4620      	mov	r0, r4
 8007abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac0:	3a30      	subs	r2, #48	; 0x30
 8007ac2:	2a09      	cmp	r2, #9
 8007ac4:	d903      	bls.n	8007ace <_svfiprintf_r+0x1a6>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0c6      	beq.n	8007a58 <_svfiprintf_r+0x130>
 8007aca:	9105      	str	r1, [sp, #20]
 8007acc:	e7c4      	b.n	8007a58 <_svfiprintf_r+0x130>
 8007ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e7f0      	b.n	8007aba <_svfiprintf_r+0x192>
 8007ad8:	ab03      	add	r3, sp, #12
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	462a      	mov	r2, r5
 8007ade:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <_svfiprintf_r+0x1f4>)
 8007ae0:	a904      	add	r1, sp, #16
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	f7fc fc5c 	bl	80043a0 <_printf_float>
 8007ae8:	1c42      	adds	r2, r0, #1
 8007aea:	4606      	mov	r6, r0
 8007aec:	d1d6      	bne.n	8007a9c <_svfiprintf_r+0x174>
 8007aee:	89ab      	ldrh	r3, [r5, #12]
 8007af0:	065b      	lsls	r3, r3, #25
 8007af2:	f53f af2d 	bmi.w	8007950 <_svfiprintf_r+0x28>
 8007af6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007af8:	b01d      	add	sp, #116	; 0x74
 8007afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afe:	ab03      	add	r3, sp, #12
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	462a      	mov	r2, r5
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <_svfiprintf_r+0x1f4>)
 8007b06:	a904      	add	r1, sp, #16
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f7fc feed 	bl	80048e8 <_printf_i>
 8007b0e:	e7eb      	b.n	8007ae8 <_svfiprintf_r+0x1c0>
 8007b10:	0800a521 	.word	0x0800a521
 8007b14:	0800a52b 	.word	0x0800a52b
 8007b18:	080043a1 	.word	0x080043a1
 8007b1c:	08007875 	.word	0x08007875
 8007b20:	0800a527 	.word	0x0800a527

08007b24 <_sungetc_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	1c4b      	adds	r3, r1, #1
 8007b28:	4614      	mov	r4, r2
 8007b2a:	d103      	bne.n	8007b34 <_sungetc_r+0x10>
 8007b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8007b30:	4628      	mov	r0, r5
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	8993      	ldrh	r3, [r2, #12]
 8007b36:	f023 0320 	bic.w	r3, r3, #32
 8007b3a:	8193      	strh	r3, [r2, #12]
 8007b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b3e:	6852      	ldr	r2, [r2, #4]
 8007b40:	b2cd      	uxtb	r5, r1
 8007b42:	b18b      	cbz	r3, 8007b68 <_sungetc_r+0x44>
 8007b44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b46:	4293      	cmp	r3, r2
 8007b48:	dd08      	ble.n	8007b5c <_sungetc_r+0x38>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	1e5a      	subs	r2, r3, #1
 8007b4e:	6022      	str	r2, [r4, #0]
 8007b50:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	3301      	adds	r3, #1
 8007b58:	6063      	str	r3, [r4, #4]
 8007b5a:	e7e9      	b.n	8007b30 <_sungetc_r+0xc>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	f000 fbfa 	bl	8008356 <__submore>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0f1      	beq.n	8007b4a <_sungetc_r+0x26>
 8007b66:	e7e1      	b.n	8007b2c <_sungetc_r+0x8>
 8007b68:	6921      	ldr	r1, [r4, #16]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	b151      	cbz	r1, 8007b84 <_sungetc_r+0x60>
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	d208      	bcs.n	8007b84 <_sungetc_r+0x60>
 8007b72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007b76:	42a9      	cmp	r1, r5
 8007b78:	d104      	bne.n	8007b84 <_sungetc_r+0x60>
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	3201      	adds	r2, #1
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	6062      	str	r2, [r4, #4]
 8007b82:	e7d5      	b.n	8007b30 <_sungetc_r+0xc>
 8007b84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b8e:	2303      	movs	r3, #3
 8007b90:	63a3      	str	r3, [r4, #56]	; 0x38
 8007b92:	4623      	mov	r3, r4
 8007b94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e7dc      	b.n	8007b58 <_sungetc_r+0x34>

08007b9e <__ssrefill_r>:
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007ba4:	b169      	cbz	r1, 8007bc2 <__ssrefill_r+0x24>
 8007ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007baa:	4299      	cmp	r1, r3
 8007bac:	d001      	beq.n	8007bb2 <__ssrefill_r+0x14>
 8007bae:	f7fe fad1 	bl	8006154 <_free_r>
 8007bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bb4:	6063      	str	r3, [r4, #4]
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8007bba:	b113      	cbz	r3, 8007bc2 <__ssrefill_r+0x24>
 8007bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bbe:	6023      	str	r3, [r4, #0]
 8007bc0:	bd10      	pop	{r4, pc}
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	6063      	str	r3, [r4, #4]
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f043 0320 	orr.w	r3, r3, #32
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd6:	e7f3      	b.n	8007bc0 <__ssrefill_r+0x22>

08007bd8 <__ssvfiscanf_r>:
 8007bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007be2:	2100      	movs	r1, #0
 8007be4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007be8:	49a6      	ldr	r1, [pc, #664]	; (8007e84 <__ssvfiscanf_r+0x2ac>)
 8007bea:	91a0      	str	r1, [sp, #640]	; 0x280
 8007bec:	f10d 0804 	add.w	r8, sp, #4
 8007bf0:	49a5      	ldr	r1, [pc, #660]	; (8007e88 <__ssvfiscanf_r+0x2b0>)
 8007bf2:	4fa6      	ldr	r7, [pc, #664]	; (8007e8c <__ssvfiscanf_r+0x2b4>)
 8007bf4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007e90 <__ssvfiscanf_r+0x2b8>
 8007bf8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	91a1      	str	r1, [sp, #644]	; 0x284
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	7813      	ldrb	r3, [r2, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 815a 	beq.w	8007ebe <__ssvfiscanf_r+0x2e6>
 8007c0a:	5cf9      	ldrb	r1, [r7, r3]
 8007c0c:	f011 0108 	ands.w	r1, r1, #8
 8007c10:	f102 0501 	add.w	r5, r2, #1
 8007c14:	d019      	beq.n	8007c4a <__ssvfiscanf_r+0x72>
 8007c16:	6863      	ldr	r3, [r4, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dd0f      	ble.n	8007c3c <__ssvfiscanf_r+0x64>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	5cba      	ldrb	r2, [r7, r2]
 8007c22:	0712      	lsls	r2, r2, #28
 8007c24:	d401      	bmi.n	8007c2a <__ssvfiscanf_r+0x52>
 8007c26:	462a      	mov	r2, r5
 8007c28:	e7eb      	b.n	8007c02 <__ssvfiscanf_r+0x2a>
 8007c2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007c2c:	3201      	adds	r2, #1
 8007c2e:	9245      	str	r2, [sp, #276]	; 0x114
 8007c30:	6862      	ldr	r2, [r4, #4]
 8007c32:	3301      	adds	r3, #1
 8007c34:	3a01      	subs	r2, #1
 8007c36:	6062      	str	r2, [r4, #4]
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	e7ec      	b.n	8007c16 <__ssvfiscanf_r+0x3e>
 8007c3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4630      	mov	r0, r6
 8007c42:	4798      	blx	r3
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d0e9      	beq.n	8007c1c <__ssvfiscanf_r+0x44>
 8007c48:	e7ed      	b.n	8007c26 <__ssvfiscanf_r+0x4e>
 8007c4a:	2b25      	cmp	r3, #37	; 0x25
 8007c4c:	d012      	beq.n	8007c74 <__ssvfiscanf_r+0x9c>
 8007c4e:	469a      	mov	sl, r3
 8007c50:	6863      	ldr	r3, [r4, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f340 8091 	ble.w	8007d7a <__ssvfiscanf_r+0x1a2>
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	7813      	ldrb	r3, [r2, #0]
 8007c5c:	4553      	cmp	r3, sl
 8007c5e:	f040 812e 	bne.w	8007ebe <__ssvfiscanf_r+0x2e6>
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	6063      	str	r3, [r4, #4]
 8007c68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007c6a:	3201      	adds	r2, #1
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	6022      	str	r2, [r4, #0]
 8007c70:	9345      	str	r3, [sp, #276]	; 0x114
 8007c72:	e7d8      	b.n	8007c26 <__ssvfiscanf_r+0x4e>
 8007c74:	9141      	str	r1, [sp, #260]	; 0x104
 8007c76:	9143      	str	r1, [sp, #268]	; 0x10c
 8007c78:	7853      	ldrb	r3, [r2, #1]
 8007c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c7c:	bf02      	ittt	eq
 8007c7e:	2310      	moveq	r3, #16
 8007c80:	1c95      	addeq	r5, r2, #2
 8007c82:	9341      	streq	r3, [sp, #260]	; 0x104
 8007c84:	220a      	movs	r2, #10
 8007c86:	46aa      	mov	sl, r5
 8007c88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007c8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007c90:	2b09      	cmp	r3, #9
 8007c92:	d91c      	bls.n	8007cce <__ssvfiscanf_r+0xf6>
 8007c94:	487e      	ldr	r0, [pc, #504]	; (8007e90 <__ssvfiscanf_r+0x2b8>)
 8007c96:	2203      	movs	r2, #3
 8007c98:	f7f8 faba 	bl	8000210 <memchr>
 8007c9c:	b138      	cbz	r0, 8007cae <__ssvfiscanf_r+0xd6>
 8007c9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ca0:	eba0 0009 	sub.w	r0, r0, r9
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	4083      	lsls	r3, r0
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	9341      	str	r3, [sp, #260]	; 0x104
 8007cac:	4655      	mov	r5, sl
 8007cae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007cb2:	2b78      	cmp	r3, #120	; 0x78
 8007cb4:	d806      	bhi.n	8007cc4 <__ssvfiscanf_r+0xec>
 8007cb6:	2b57      	cmp	r3, #87	; 0x57
 8007cb8:	d810      	bhi.n	8007cdc <__ssvfiscanf_r+0x104>
 8007cba:	2b25      	cmp	r3, #37	; 0x25
 8007cbc:	d0c7      	beq.n	8007c4e <__ssvfiscanf_r+0x76>
 8007cbe:	d857      	bhi.n	8007d70 <__ssvfiscanf_r+0x198>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d065      	beq.n	8007d90 <__ssvfiscanf_r+0x1b8>
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8007cc8:	230a      	movs	r3, #10
 8007cca:	9342      	str	r3, [sp, #264]	; 0x108
 8007ccc:	e076      	b.n	8007dbc <__ssvfiscanf_r+0x1e4>
 8007cce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007cd0:	fb02 1103 	mla	r1, r2, r3, r1
 8007cd4:	3930      	subs	r1, #48	; 0x30
 8007cd6:	9143      	str	r1, [sp, #268]	; 0x10c
 8007cd8:	4655      	mov	r5, sl
 8007cda:	e7d4      	b.n	8007c86 <__ssvfiscanf_r+0xae>
 8007cdc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007ce0:	2a20      	cmp	r2, #32
 8007ce2:	d8ef      	bhi.n	8007cc4 <__ssvfiscanf_r+0xec>
 8007ce4:	a101      	add	r1, pc, #4	; (adr r1, 8007cec <__ssvfiscanf_r+0x114>)
 8007ce6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d9f 	.word	0x08007d9f
 8007cf0:	08007cc5 	.word	0x08007cc5
 8007cf4:	08007cc5 	.word	0x08007cc5
 8007cf8:	08007dfd 	.word	0x08007dfd
 8007cfc:	08007cc5 	.word	0x08007cc5
 8007d00:	08007cc5 	.word	0x08007cc5
 8007d04:	08007cc5 	.word	0x08007cc5
 8007d08:	08007cc5 	.word	0x08007cc5
 8007d0c:	08007cc5 	.word	0x08007cc5
 8007d10:	08007cc5 	.word	0x08007cc5
 8007d14:	08007cc5 	.word	0x08007cc5
 8007d18:	08007e13 	.word	0x08007e13
 8007d1c:	08007df9 	.word	0x08007df9
 8007d20:	08007d77 	.word	0x08007d77
 8007d24:	08007d77 	.word	0x08007d77
 8007d28:	08007d77 	.word	0x08007d77
 8007d2c:	08007cc5 	.word	0x08007cc5
 8007d30:	08007db5 	.word	0x08007db5
 8007d34:	08007cc5 	.word	0x08007cc5
 8007d38:	08007cc5 	.word	0x08007cc5
 8007d3c:	08007cc5 	.word	0x08007cc5
 8007d40:	08007cc5 	.word	0x08007cc5
 8007d44:	08007e23 	.word	0x08007e23
 8007d48:	08007df1 	.word	0x08007df1
 8007d4c:	08007d97 	.word	0x08007d97
 8007d50:	08007cc5 	.word	0x08007cc5
 8007d54:	08007cc5 	.word	0x08007cc5
 8007d58:	08007e1f 	.word	0x08007e1f
 8007d5c:	08007cc5 	.word	0x08007cc5
 8007d60:	08007df9 	.word	0x08007df9
 8007d64:	08007cc5 	.word	0x08007cc5
 8007d68:	08007cc5 	.word	0x08007cc5
 8007d6c:	08007d9f 	.word	0x08007d9f
 8007d70:	3b45      	subs	r3, #69	; 0x45
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d8a6      	bhi.n	8007cc4 <__ssvfiscanf_r+0xec>
 8007d76:	2305      	movs	r3, #5
 8007d78:	e01f      	b.n	8007dba <__ssvfiscanf_r+0x1e2>
 8007d7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4798      	blx	r3
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f43f af68 	beq.w	8007c58 <__ssvfiscanf_r+0x80>
 8007d88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	f040 808d 	bne.w	8007eaa <__ssvfiscanf_r+0x2d2>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e08f      	b.n	8007eb6 <__ssvfiscanf_r+0x2de>
 8007d96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007d98:	f042 0220 	orr.w	r2, r2, #32
 8007d9c:	9241      	str	r2, [sp, #260]	; 0x104
 8007d9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007da4:	9241      	str	r2, [sp, #260]	; 0x104
 8007da6:	2210      	movs	r2, #16
 8007da8:	2b6f      	cmp	r3, #111	; 0x6f
 8007daa:	9242      	str	r2, [sp, #264]	; 0x108
 8007dac:	bf34      	ite	cc
 8007dae:	2303      	movcc	r3, #3
 8007db0:	2304      	movcs	r3, #4
 8007db2:	e002      	b.n	8007dba <__ssvfiscanf_r+0x1e2>
 8007db4:	2300      	movs	r3, #0
 8007db6:	9342      	str	r3, [sp, #264]	; 0x108
 8007db8:	2303      	movs	r3, #3
 8007dba:	9347      	str	r3, [sp, #284]	; 0x11c
 8007dbc:	6863      	ldr	r3, [r4, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	dd3d      	ble.n	8007e3e <__ssvfiscanf_r+0x266>
 8007dc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007dc4:	0659      	lsls	r1, r3, #25
 8007dc6:	d404      	bmi.n	8007dd2 <__ssvfiscanf_r+0x1fa>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	781a      	ldrb	r2, [r3, #0]
 8007dcc:	5cba      	ldrb	r2, [r7, r2]
 8007dce:	0712      	lsls	r2, r2, #28
 8007dd0:	d43c      	bmi.n	8007e4c <__ssvfiscanf_r+0x274>
 8007dd2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	dc4b      	bgt.n	8007e70 <__ssvfiscanf_r+0x298>
 8007dd8:	466b      	mov	r3, sp
 8007dda:	4622      	mov	r2, r4
 8007ddc:	a941      	add	r1, sp, #260	; 0x104
 8007dde:	4630      	mov	r0, r6
 8007de0:	f000 f872 	bl	8007ec8 <_scanf_chars>
 8007de4:	2801      	cmp	r0, #1
 8007de6:	d06a      	beq.n	8007ebe <__ssvfiscanf_r+0x2e6>
 8007de8:	2802      	cmp	r0, #2
 8007dea:	f47f af1c 	bne.w	8007c26 <__ssvfiscanf_r+0x4e>
 8007dee:	e7cb      	b.n	8007d88 <__ssvfiscanf_r+0x1b0>
 8007df0:	2308      	movs	r3, #8
 8007df2:	9342      	str	r3, [sp, #264]	; 0x108
 8007df4:	2304      	movs	r3, #4
 8007df6:	e7e0      	b.n	8007dba <__ssvfiscanf_r+0x1e2>
 8007df8:	220a      	movs	r2, #10
 8007dfa:	e7d5      	b.n	8007da8 <__ssvfiscanf_r+0x1d0>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4640      	mov	r0, r8
 8007e00:	f000 fa70 	bl	80082e4 <__sccl>
 8007e04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e0a:	9341      	str	r3, [sp, #260]	; 0x104
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e7d3      	b.n	8007dba <__ssvfiscanf_r+0x1e2>
 8007e12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e18:	9341      	str	r3, [sp, #260]	; 0x104
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e7cd      	b.n	8007dba <__ssvfiscanf_r+0x1e2>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e7cb      	b.n	8007dba <__ssvfiscanf_r+0x1e2>
 8007e22:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007e24:	06c3      	lsls	r3, r0, #27
 8007e26:	f53f aefe 	bmi.w	8007c26 <__ssvfiscanf_r+0x4e>
 8007e2a:	9b00      	ldr	r3, [sp, #0]
 8007e2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007e2e:	1d19      	adds	r1, r3, #4
 8007e30:	9100      	str	r1, [sp, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	07c0      	lsls	r0, r0, #31
 8007e36:	bf4c      	ite	mi
 8007e38:	801a      	strhmi	r2, [r3, #0]
 8007e3a:	601a      	strpl	r2, [r3, #0]
 8007e3c:	e6f3      	b.n	8007c26 <__ssvfiscanf_r+0x4e>
 8007e3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e40:	4621      	mov	r1, r4
 8007e42:	4630      	mov	r0, r6
 8007e44:	4798      	blx	r3
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d0bb      	beq.n	8007dc2 <__ssvfiscanf_r+0x1ea>
 8007e4a:	e79d      	b.n	8007d88 <__ssvfiscanf_r+0x1b0>
 8007e4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007e4e:	3201      	adds	r2, #1
 8007e50:	9245      	str	r2, [sp, #276]	; 0x114
 8007e52:	6862      	ldr	r2, [r4, #4]
 8007e54:	3a01      	subs	r2, #1
 8007e56:	2a00      	cmp	r2, #0
 8007e58:	6062      	str	r2, [r4, #4]
 8007e5a:	dd02      	ble.n	8007e62 <__ssvfiscanf_r+0x28a>
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	e7b2      	b.n	8007dc8 <__ssvfiscanf_r+0x1f0>
 8007e62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e64:	4621      	mov	r1, r4
 8007e66:	4630      	mov	r0, r6
 8007e68:	4798      	blx	r3
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d0ac      	beq.n	8007dc8 <__ssvfiscanf_r+0x1f0>
 8007e6e:	e78b      	b.n	8007d88 <__ssvfiscanf_r+0x1b0>
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	dc0f      	bgt.n	8007e94 <__ssvfiscanf_r+0x2bc>
 8007e74:	466b      	mov	r3, sp
 8007e76:	4622      	mov	r2, r4
 8007e78:	a941      	add	r1, sp, #260	; 0x104
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f000 f87e 	bl	8007f7c <_scanf_i>
 8007e80:	e7b0      	b.n	8007de4 <__ssvfiscanf_r+0x20c>
 8007e82:	bf00      	nop
 8007e84:	08007b25 	.word	0x08007b25
 8007e88:	08007b9f 	.word	0x08007b9f
 8007e8c:	0800a421 	.word	0x0800a421
 8007e90:	0800a527 	.word	0x0800a527
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <__ssvfiscanf_r+0x2ec>)
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f43f aec5 	beq.w	8007c26 <__ssvfiscanf_r+0x4e>
 8007e9c:	466b      	mov	r3, sp
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	a941      	add	r1, sp, #260	; 0x104
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f7fc fe42 	bl	8004b2c <_scanf_float>
 8007ea8:	e79c      	b.n	8007de4 <__ssvfiscanf_r+0x20c>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007eb0:	bf18      	it	ne
 8007eb2:	f04f 30ff 	movne.w	r0, #4294967295
 8007eb6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007ec0:	e7f9      	b.n	8007eb6 <__ssvfiscanf_r+0x2de>
 8007ec2:	bf00      	nop
 8007ec4:	08004b2d 	.word	0x08004b2d

08007ec8 <_scanf_chars>:
 8007ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ecc:	4615      	mov	r5, r2
 8007ece:	688a      	ldr	r2, [r1, #8]
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b932      	cbnz	r2, 8007ee4 <_scanf_chars+0x1c>
 8007ed6:	698a      	ldr	r2, [r1, #24]
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	bf0c      	ite	eq
 8007edc:	2201      	moveq	r2, #1
 8007ede:	f04f 32ff 	movne.w	r2, #4294967295
 8007ee2:	608a      	str	r2, [r1, #8]
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007f78 <_scanf_chars+0xb0>
 8007eea:	06d1      	lsls	r1, r2, #27
 8007eec:	bf5f      	itttt	pl
 8007eee:	681a      	ldrpl	r2, [r3, #0]
 8007ef0:	1d11      	addpl	r1, r2, #4
 8007ef2:	6019      	strpl	r1, [r3, #0]
 8007ef4:	6816      	ldrpl	r6, [r2, #0]
 8007ef6:	2700      	movs	r7, #0
 8007ef8:	69a0      	ldr	r0, [r4, #24]
 8007efa:	b188      	cbz	r0, 8007f20 <_scanf_chars+0x58>
 8007efc:	2801      	cmp	r0, #1
 8007efe:	d107      	bne.n	8007f10 <_scanf_chars+0x48>
 8007f00:	682a      	ldr	r2, [r5, #0]
 8007f02:	7811      	ldrb	r1, [r2, #0]
 8007f04:	6962      	ldr	r2, [r4, #20]
 8007f06:	5c52      	ldrb	r2, [r2, r1]
 8007f08:	b952      	cbnz	r2, 8007f20 <_scanf_chars+0x58>
 8007f0a:	2f00      	cmp	r7, #0
 8007f0c:	d031      	beq.n	8007f72 <_scanf_chars+0xaa>
 8007f0e:	e022      	b.n	8007f56 <_scanf_chars+0x8e>
 8007f10:	2802      	cmp	r0, #2
 8007f12:	d120      	bne.n	8007f56 <_scanf_chars+0x8e>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007f1c:	071b      	lsls	r3, r3, #28
 8007f1e:	d41a      	bmi.n	8007f56 <_scanf_chars+0x8e>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	06da      	lsls	r2, r3, #27
 8007f24:	bf5e      	ittt	pl
 8007f26:	682b      	ldrpl	r3, [r5, #0]
 8007f28:	781b      	ldrbpl	r3, [r3, #0]
 8007f2a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007f2e:	682a      	ldr	r2, [r5, #0]
 8007f30:	686b      	ldr	r3, [r5, #4]
 8007f32:	3201      	adds	r2, #1
 8007f34:	602a      	str	r2, [r5, #0]
 8007f36:	68a2      	ldr	r2, [r4, #8]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	3a01      	subs	r2, #1
 8007f3c:	606b      	str	r3, [r5, #4]
 8007f3e:	3701      	adds	r7, #1
 8007f40:	60a2      	str	r2, [r4, #8]
 8007f42:	b142      	cbz	r2, 8007f56 <_scanf_chars+0x8e>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dcd7      	bgt.n	8007ef8 <_scanf_chars+0x30>
 8007f48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4640      	mov	r0, r8
 8007f50:	4798      	blx	r3
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d0d0      	beq.n	8007ef8 <_scanf_chars+0x30>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	f013 0310 	ands.w	r3, r3, #16
 8007f5c:	d105      	bne.n	8007f6a <_scanf_chars+0xa2>
 8007f5e:	68e2      	ldr	r2, [r4, #12]
 8007f60:	3201      	adds	r2, #1
 8007f62:	60e2      	str	r2, [r4, #12]
 8007f64:	69a2      	ldr	r2, [r4, #24]
 8007f66:	b102      	cbz	r2, 8007f6a <_scanf_chars+0xa2>
 8007f68:	7033      	strb	r3, [r6, #0]
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	443b      	add	r3, r7
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	2000      	movs	r0, #0
 8007f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f76:	bf00      	nop
 8007f78:	0800a421 	.word	0x0800a421

08007f7c <_scanf_i>:
 8007f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	4698      	mov	r8, r3
 8007f82:	4b74      	ldr	r3, [pc, #464]	; (8008154 <_scanf_i+0x1d8>)
 8007f84:	460c      	mov	r4, r1
 8007f86:	4682      	mov	sl, r0
 8007f88:	4616      	mov	r6, r2
 8007f8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	ab03      	add	r3, sp, #12
 8007f92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f96:	4b70      	ldr	r3, [pc, #448]	; (8008158 <_scanf_i+0x1dc>)
 8007f98:	69a1      	ldr	r1, [r4, #24]
 8007f9a:	4a70      	ldr	r2, [pc, #448]	; (800815c <_scanf_i+0x1e0>)
 8007f9c:	2903      	cmp	r1, #3
 8007f9e:	bf18      	it	ne
 8007fa0:	461a      	movne	r2, r3
 8007fa2:	68a3      	ldr	r3, [r4, #8]
 8007fa4:	9201      	str	r2, [sp, #4]
 8007fa6:	1e5a      	subs	r2, r3, #1
 8007fa8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007fac:	bf88      	it	hi
 8007fae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007fb2:	4627      	mov	r7, r4
 8007fb4:	bf82      	ittt	hi
 8007fb6:	eb03 0905 	addhi.w	r9, r3, r5
 8007fba:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007fbe:	60a3      	strhi	r3, [r4, #8]
 8007fc0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007fc4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007fc8:	bf98      	it	ls
 8007fca:	f04f 0900 	movls.w	r9, #0
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	463d      	mov	r5, r7
 8007fd2:	f04f 0b00 	mov.w	fp, #0
 8007fd6:	6831      	ldr	r1, [r6, #0]
 8007fd8:	ab03      	add	r3, sp, #12
 8007fda:	7809      	ldrb	r1, [r1, #0]
 8007fdc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f7f8 f915 	bl	8000210 <memchr>
 8007fe6:	b328      	cbz	r0, 8008034 <_scanf_i+0xb8>
 8007fe8:	f1bb 0f01 	cmp.w	fp, #1
 8007fec:	d159      	bne.n	80080a2 <_scanf_i+0x126>
 8007fee:	6862      	ldr	r2, [r4, #4]
 8007ff0:	b92a      	cbnz	r2, 8007ffe <_scanf_i+0x82>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ffa:	6063      	str	r3, [r4, #4]
 8007ffc:	6022      	str	r2, [r4, #0]
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008004:	6022      	str	r2, [r4, #0]
 8008006:	68a2      	ldr	r2, [r4, #8]
 8008008:	1e51      	subs	r1, r2, #1
 800800a:	60a1      	str	r1, [r4, #8]
 800800c:	b192      	cbz	r2, 8008034 <_scanf_i+0xb8>
 800800e:	6832      	ldr	r2, [r6, #0]
 8008010:	1c51      	adds	r1, r2, #1
 8008012:	6031      	str	r1, [r6, #0]
 8008014:	7812      	ldrb	r2, [r2, #0]
 8008016:	f805 2b01 	strb.w	r2, [r5], #1
 800801a:	6872      	ldr	r2, [r6, #4]
 800801c:	3a01      	subs	r2, #1
 800801e:	2a00      	cmp	r2, #0
 8008020:	6072      	str	r2, [r6, #4]
 8008022:	dc07      	bgt.n	8008034 <_scanf_i+0xb8>
 8008024:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008028:	4631      	mov	r1, r6
 800802a:	4650      	mov	r0, sl
 800802c:	4790      	blx	r2
 800802e:	2800      	cmp	r0, #0
 8008030:	f040 8085 	bne.w	800813e <_scanf_i+0x1c2>
 8008034:	f10b 0b01 	add.w	fp, fp, #1
 8008038:	f1bb 0f03 	cmp.w	fp, #3
 800803c:	d1cb      	bne.n	8007fd6 <_scanf_i+0x5a>
 800803e:	6863      	ldr	r3, [r4, #4]
 8008040:	b90b      	cbnz	r3, 8008046 <_scanf_i+0xca>
 8008042:	230a      	movs	r3, #10
 8008044:	6063      	str	r3, [r4, #4]
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	4945      	ldr	r1, [pc, #276]	; (8008160 <_scanf_i+0x1e4>)
 800804a:	6960      	ldr	r0, [r4, #20]
 800804c:	1ac9      	subs	r1, r1, r3
 800804e:	f000 f949 	bl	80082e4 <__sccl>
 8008052:	f04f 0b00 	mov.w	fp, #0
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	6822      	ldr	r2, [r4, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03d      	beq.n	80080da <_scanf_i+0x15e>
 800805e:	6831      	ldr	r1, [r6, #0]
 8008060:	6960      	ldr	r0, [r4, #20]
 8008062:	f891 c000 	ldrb.w	ip, [r1]
 8008066:	f810 000c 	ldrb.w	r0, [r0, ip]
 800806a:	2800      	cmp	r0, #0
 800806c:	d035      	beq.n	80080da <_scanf_i+0x15e>
 800806e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008072:	d124      	bne.n	80080be <_scanf_i+0x142>
 8008074:	0510      	lsls	r0, r2, #20
 8008076:	d522      	bpl.n	80080be <_scanf_i+0x142>
 8008078:	f10b 0b01 	add.w	fp, fp, #1
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	d003      	beq.n	800808a <_scanf_i+0x10e>
 8008082:	3301      	adds	r3, #1
 8008084:	f109 39ff 	add.w	r9, r9, #4294967295
 8008088:	60a3      	str	r3, [r4, #8]
 800808a:	6873      	ldr	r3, [r6, #4]
 800808c:	3b01      	subs	r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	6073      	str	r3, [r6, #4]
 8008092:	dd1b      	ble.n	80080cc <_scanf_i+0x150>
 8008094:	6833      	ldr	r3, [r6, #0]
 8008096:	3301      	adds	r3, #1
 8008098:	6033      	str	r3, [r6, #0]
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	3b01      	subs	r3, #1
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	e7d9      	b.n	8008056 <_scanf_i+0xda>
 80080a2:	f1bb 0f02 	cmp.w	fp, #2
 80080a6:	d1ae      	bne.n	8008006 <_scanf_i+0x8a>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80080ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80080b2:	d1bf      	bne.n	8008034 <_scanf_i+0xb8>
 80080b4:	2310      	movs	r3, #16
 80080b6:	6063      	str	r3, [r4, #4]
 80080b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080bc:	e7a2      	b.n	8008004 <_scanf_i+0x88>
 80080be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80080c2:	6022      	str	r2, [r4, #0]
 80080c4:	780b      	ldrb	r3, [r1, #0]
 80080c6:	f805 3b01 	strb.w	r3, [r5], #1
 80080ca:	e7de      	b.n	800808a <_scanf_i+0x10e>
 80080cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80080d0:	4631      	mov	r1, r6
 80080d2:	4650      	mov	r0, sl
 80080d4:	4798      	blx	r3
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d0df      	beq.n	800809a <_scanf_i+0x11e>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	05d9      	lsls	r1, r3, #23
 80080de:	d50d      	bpl.n	80080fc <_scanf_i+0x180>
 80080e0:	42bd      	cmp	r5, r7
 80080e2:	d909      	bls.n	80080f8 <_scanf_i+0x17c>
 80080e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80080e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080ec:	4632      	mov	r2, r6
 80080ee:	4650      	mov	r0, sl
 80080f0:	4798      	blx	r3
 80080f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80080f6:	464d      	mov	r5, r9
 80080f8:	42bd      	cmp	r5, r7
 80080fa:	d028      	beq.n	800814e <_scanf_i+0x1d2>
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	f012 0210 	ands.w	r2, r2, #16
 8008102:	d113      	bne.n	800812c <_scanf_i+0x1b0>
 8008104:	702a      	strb	r2, [r5, #0]
 8008106:	6863      	ldr	r3, [r4, #4]
 8008108:	9e01      	ldr	r6, [sp, #4]
 800810a:	4639      	mov	r1, r7
 800810c:	4650      	mov	r0, sl
 800810e:	47b0      	blx	r6
 8008110:	f8d8 3000 	ldr.w	r3, [r8]
 8008114:	6821      	ldr	r1, [r4, #0]
 8008116:	1d1a      	adds	r2, r3, #4
 8008118:	f8c8 2000 	str.w	r2, [r8]
 800811c:	f011 0f20 	tst.w	r1, #32
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	d00f      	beq.n	8008144 <_scanf_i+0x1c8>
 8008124:	6018      	str	r0, [r3, #0]
 8008126:	68e3      	ldr	r3, [r4, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60e3      	str	r3, [r4, #12]
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	1bed      	subs	r5, r5, r7
 8008130:	445d      	add	r5, fp
 8008132:	442b      	add	r3, r5
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	2000      	movs	r0, #0
 8008138:	b007      	add	sp, #28
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	f04f 0b00 	mov.w	fp, #0
 8008142:	e7ca      	b.n	80080da <_scanf_i+0x15e>
 8008144:	07ca      	lsls	r2, r1, #31
 8008146:	bf4c      	ite	mi
 8008148:	8018      	strhmi	r0, [r3, #0]
 800814a:	6018      	strpl	r0, [r3, #0]
 800814c:	e7eb      	b.n	8008126 <_scanf_i+0x1aa>
 800814e:	2001      	movs	r0, #1
 8008150:	e7f2      	b.n	8008138 <_scanf_i+0x1bc>
 8008152:	bf00      	nop
 8008154:	0800a0f8 	.word	0x0800a0f8
 8008158:	08008c85 	.word	0x08008c85
 800815c:	08007871 	.word	0x08007871
 8008160:	0800a542 	.word	0x0800a542

08008164 <__sflush_r>:
 8008164:	898a      	ldrh	r2, [r1, #12]
 8008166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816a:	4605      	mov	r5, r0
 800816c:	0710      	lsls	r0, r2, #28
 800816e:	460c      	mov	r4, r1
 8008170:	d458      	bmi.n	8008224 <__sflush_r+0xc0>
 8008172:	684b      	ldr	r3, [r1, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	dc05      	bgt.n	8008184 <__sflush_r+0x20>
 8008178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	dc02      	bgt.n	8008184 <__sflush_r+0x20>
 800817e:	2000      	movs	r0, #0
 8008180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008186:	2e00      	cmp	r6, #0
 8008188:	d0f9      	beq.n	800817e <__sflush_r+0x1a>
 800818a:	2300      	movs	r3, #0
 800818c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008190:	682f      	ldr	r7, [r5, #0]
 8008192:	6a21      	ldr	r1, [r4, #32]
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	d032      	beq.n	80081fe <__sflush_r+0x9a>
 8008198:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	075a      	lsls	r2, r3, #29
 800819e:	d505      	bpl.n	80081ac <__sflush_r+0x48>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	1ac0      	subs	r0, r0, r3
 80081a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081a6:	b10b      	cbz	r3, 80081ac <__sflush_r+0x48>
 80081a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081aa:	1ac0      	subs	r0, r0, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	4602      	mov	r2, r0
 80081b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081b2:	6a21      	ldr	r1, [r4, #32]
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b0      	blx	r6
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	d106      	bne.n	80081cc <__sflush_r+0x68>
 80081be:	6829      	ldr	r1, [r5, #0]
 80081c0:	291d      	cmp	r1, #29
 80081c2:	d82b      	bhi.n	800821c <__sflush_r+0xb8>
 80081c4:	4a29      	ldr	r2, [pc, #164]	; (800826c <__sflush_r+0x108>)
 80081c6:	410a      	asrs	r2, r1
 80081c8:	07d6      	lsls	r6, r2, #31
 80081ca:	d427      	bmi.n	800821c <__sflush_r+0xb8>
 80081cc:	2200      	movs	r2, #0
 80081ce:	6062      	str	r2, [r4, #4]
 80081d0:	04d9      	lsls	r1, r3, #19
 80081d2:	6922      	ldr	r2, [r4, #16]
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	d504      	bpl.n	80081e2 <__sflush_r+0x7e>
 80081d8:	1c42      	adds	r2, r0, #1
 80081da:	d101      	bne.n	80081e0 <__sflush_r+0x7c>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b903      	cbnz	r3, 80081e2 <__sflush_r+0x7e>
 80081e0:	6560      	str	r0, [r4, #84]	; 0x54
 80081e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081e4:	602f      	str	r7, [r5, #0]
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d0c9      	beq.n	800817e <__sflush_r+0x1a>
 80081ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081ee:	4299      	cmp	r1, r3
 80081f0:	d002      	beq.n	80081f8 <__sflush_r+0x94>
 80081f2:	4628      	mov	r0, r5
 80081f4:	f7fd ffae 	bl	8006154 <_free_r>
 80081f8:	2000      	movs	r0, #0
 80081fa:	6360      	str	r0, [r4, #52]	; 0x34
 80081fc:	e7c0      	b.n	8008180 <__sflush_r+0x1c>
 80081fe:	2301      	movs	r3, #1
 8008200:	4628      	mov	r0, r5
 8008202:	47b0      	blx	r6
 8008204:	1c41      	adds	r1, r0, #1
 8008206:	d1c8      	bne.n	800819a <__sflush_r+0x36>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0c5      	beq.n	800819a <__sflush_r+0x36>
 800820e:	2b1d      	cmp	r3, #29
 8008210:	d001      	beq.n	8008216 <__sflush_r+0xb2>
 8008212:	2b16      	cmp	r3, #22
 8008214:	d101      	bne.n	800821a <__sflush_r+0xb6>
 8008216:	602f      	str	r7, [r5, #0]
 8008218:	e7b1      	b.n	800817e <__sflush_r+0x1a>
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008220:	81a3      	strh	r3, [r4, #12]
 8008222:	e7ad      	b.n	8008180 <__sflush_r+0x1c>
 8008224:	690f      	ldr	r7, [r1, #16]
 8008226:	2f00      	cmp	r7, #0
 8008228:	d0a9      	beq.n	800817e <__sflush_r+0x1a>
 800822a:	0793      	lsls	r3, r2, #30
 800822c:	680e      	ldr	r6, [r1, #0]
 800822e:	bf08      	it	eq
 8008230:	694b      	ldreq	r3, [r1, #20]
 8008232:	600f      	str	r7, [r1, #0]
 8008234:	bf18      	it	ne
 8008236:	2300      	movne	r3, #0
 8008238:	eba6 0807 	sub.w	r8, r6, r7
 800823c:	608b      	str	r3, [r1, #8]
 800823e:	f1b8 0f00 	cmp.w	r8, #0
 8008242:	dd9c      	ble.n	800817e <__sflush_r+0x1a>
 8008244:	6a21      	ldr	r1, [r4, #32]
 8008246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008248:	4643      	mov	r3, r8
 800824a:	463a      	mov	r2, r7
 800824c:	4628      	mov	r0, r5
 800824e:	47b0      	blx	r6
 8008250:	2800      	cmp	r0, #0
 8008252:	dc06      	bgt.n	8008262 <__sflush_r+0xfe>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	e78e      	b.n	8008180 <__sflush_r+0x1c>
 8008262:	4407      	add	r7, r0
 8008264:	eba8 0800 	sub.w	r8, r8, r0
 8008268:	e7e9      	b.n	800823e <__sflush_r+0xda>
 800826a:	bf00      	nop
 800826c:	dfbffffe 	.word	0xdfbffffe

08008270 <_fflush_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	690b      	ldr	r3, [r1, #16]
 8008274:	4605      	mov	r5, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b913      	cbnz	r3, 8008280 <_fflush_r+0x10>
 800827a:	2500      	movs	r5, #0
 800827c:	4628      	mov	r0, r5
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	b118      	cbz	r0, 800828a <_fflush_r+0x1a>
 8008282:	6a03      	ldr	r3, [r0, #32]
 8008284:	b90b      	cbnz	r3, 800828a <_fflush_r+0x1a>
 8008286:	f7fc fedb 	bl	8005040 <__sinit>
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0f3      	beq.n	800827a <_fflush_r+0xa>
 8008292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008294:	07d0      	lsls	r0, r2, #31
 8008296:	d404      	bmi.n	80082a2 <_fflush_r+0x32>
 8008298:	0599      	lsls	r1, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_fflush_r+0x32>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f7fd f8a3 	bl	80053e8 <__retarget_lock_acquire_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7ff ff5d 	bl	8008164 <__sflush_r>
 80082aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	4605      	mov	r5, r0
 80082b0:	d4e4      	bmi.n	800827c <_fflush_r+0xc>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4e1      	bmi.n	800827c <_fflush_r+0xc>
 80082b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ba:	f7fd f896 	bl	80053ea <__retarget_lock_release_recursive>
 80082be:	e7dd      	b.n	800827c <_fflush_r+0xc>

080082c0 <fiprintf>:
 80082c0:	b40e      	push	{r1, r2, r3}
 80082c2:	b503      	push	{r0, r1, lr}
 80082c4:	4601      	mov	r1, r0
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	4805      	ldr	r0, [pc, #20]	; (80082e0 <fiprintf+0x20>)
 80082ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	f000 fd0f 	bl	8008cf4 <_vfiprintf_r>
 80082d6:	b002      	add	sp, #8
 80082d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082dc:	b003      	add	sp, #12
 80082de:	4770      	bx	lr
 80082e0:	20000080 	.word	0x20000080

080082e4 <__sccl>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	780b      	ldrb	r3, [r1, #0]
 80082e8:	4604      	mov	r4, r0
 80082ea:	2b5e      	cmp	r3, #94	; 0x5e
 80082ec:	bf0b      	itete	eq
 80082ee:	784b      	ldrbeq	r3, [r1, #1]
 80082f0:	1c4a      	addne	r2, r1, #1
 80082f2:	1c8a      	addeq	r2, r1, #2
 80082f4:	2100      	movne	r1, #0
 80082f6:	bf08      	it	eq
 80082f8:	2101      	moveq	r1, #1
 80082fa:	3801      	subs	r0, #1
 80082fc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008300:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008304:	42a8      	cmp	r0, r5
 8008306:	d1fb      	bne.n	8008300 <__sccl+0x1c>
 8008308:	b90b      	cbnz	r3, 800830e <__sccl+0x2a>
 800830a:	1e50      	subs	r0, r2, #1
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	f081 0101 	eor.w	r1, r1, #1
 8008312:	54e1      	strb	r1, [r4, r3]
 8008314:	4610      	mov	r0, r2
 8008316:	4602      	mov	r2, r0
 8008318:	f812 5b01 	ldrb.w	r5, [r2], #1
 800831c:	2d2d      	cmp	r5, #45	; 0x2d
 800831e:	d005      	beq.n	800832c <__sccl+0x48>
 8008320:	2d5d      	cmp	r5, #93	; 0x5d
 8008322:	d016      	beq.n	8008352 <__sccl+0x6e>
 8008324:	2d00      	cmp	r5, #0
 8008326:	d0f1      	beq.n	800830c <__sccl+0x28>
 8008328:	462b      	mov	r3, r5
 800832a:	e7f2      	b.n	8008312 <__sccl+0x2e>
 800832c:	7846      	ldrb	r6, [r0, #1]
 800832e:	2e5d      	cmp	r6, #93	; 0x5d
 8008330:	d0fa      	beq.n	8008328 <__sccl+0x44>
 8008332:	42b3      	cmp	r3, r6
 8008334:	dcf8      	bgt.n	8008328 <__sccl+0x44>
 8008336:	3002      	adds	r0, #2
 8008338:	461a      	mov	r2, r3
 800833a:	3201      	adds	r2, #1
 800833c:	4296      	cmp	r6, r2
 800833e:	54a1      	strb	r1, [r4, r2]
 8008340:	dcfb      	bgt.n	800833a <__sccl+0x56>
 8008342:	1af2      	subs	r2, r6, r3
 8008344:	3a01      	subs	r2, #1
 8008346:	1c5d      	adds	r5, r3, #1
 8008348:	42b3      	cmp	r3, r6
 800834a:	bfa8      	it	ge
 800834c:	2200      	movge	r2, #0
 800834e:	18ab      	adds	r3, r5, r2
 8008350:	e7e1      	b.n	8008316 <__sccl+0x32>
 8008352:	4610      	mov	r0, r2
 8008354:	e7da      	b.n	800830c <__sccl+0x28>

08008356 <__submore>:
 8008356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	460c      	mov	r4, r1
 800835c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800835e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008362:	4299      	cmp	r1, r3
 8008364:	d11d      	bne.n	80083a2 <__submore+0x4c>
 8008366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800836a:	f7fb feed 	bl	8004148 <_malloc_r>
 800836e:	b918      	cbnz	r0, 8008378 <__submore+0x22>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800837c:	63a3      	str	r3, [r4, #56]	; 0x38
 800837e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008382:	6360      	str	r0, [r4, #52]	; 0x34
 8008384:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008388:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800838c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008390:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008394:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008398:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800839c:	6020      	str	r0, [r4, #0]
 800839e:	2000      	movs	r0, #0
 80083a0:	e7e8      	b.n	8008374 <__submore+0x1e>
 80083a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80083a4:	0077      	lsls	r7, r6, #1
 80083a6:	463a      	mov	r2, r7
 80083a8:	f000 fbcb 	bl	8008b42 <_realloc_r>
 80083ac:	4605      	mov	r5, r0
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d0de      	beq.n	8008370 <__submore+0x1a>
 80083b2:	eb00 0806 	add.w	r8, r0, r6
 80083b6:	4601      	mov	r1, r0
 80083b8:	4632      	mov	r2, r6
 80083ba:	4640      	mov	r0, r8
 80083bc:	f7fd f81e 	bl	80053fc <memcpy>
 80083c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80083c4:	f8c4 8000 	str.w	r8, [r4]
 80083c8:	e7e9      	b.n	800839e <__submore+0x48>

080083ca <memmove>:
 80083ca:	4288      	cmp	r0, r1
 80083cc:	b510      	push	{r4, lr}
 80083ce:	eb01 0402 	add.w	r4, r1, r2
 80083d2:	d902      	bls.n	80083da <memmove+0x10>
 80083d4:	4284      	cmp	r4, r0
 80083d6:	4623      	mov	r3, r4
 80083d8:	d807      	bhi.n	80083ea <memmove+0x20>
 80083da:	1e43      	subs	r3, r0, #1
 80083dc:	42a1      	cmp	r1, r4
 80083de:	d008      	beq.n	80083f2 <memmove+0x28>
 80083e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083e8:	e7f8      	b.n	80083dc <memmove+0x12>
 80083ea:	4402      	add	r2, r0
 80083ec:	4601      	mov	r1, r0
 80083ee:	428a      	cmp	r2, r1
 80083f0:	d100      	bne.n	80083f4 <memmove+0x2a>
 80083f2:	bd10      	pop	{r4, pc}
 80083f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083fc:	e7f7      	b.n	80083ee <memmove+0x24>

080083fe <strncmp>:
 80083fe:	b510      	push	{r4, lr}
 8008400:	b16a      	cbz	r2, 800841e <strncmp+0x20>
 8008402:	3901      	subs	r1, #1
 8008404:	1884      	adds	r4, r0, r2
 8008406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800840a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800840e:	429a      	cmp	r2, r3
 8008410:	d103      	bne.n	800841a <strncmp+0x1c>
 8008412:	42a0      	cmp	r0, r4
 8008414:	d001      	beq.n	800841a <strncmp+0x1c>
 8008416:	2a00      	cmp	r2, #0
 8008418:	d1f5      	bne.n	8008406 <strncmp+0x8>
 800841a:	1ad0      	subs	r0, r2, r3
 800841c:	bd10      	pop	{r4, pc}
 800841e:	4610      	mov	r0, r2
 8008420:	e7fc      	b.n	800841c <strncmp+0x1e>
 8008422:	0000      	movs	r0, r0
 8008424:	0000      	movs	r0, r0
	...

08008428 <nan>:
 8008428:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008430 <nan+0x8>
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	00000000 	.word	0x00000000
 8008434:	7ff80000 	.word	0x7ff80000

08008438 <abort>:
 8008438:	b508      	push	{r3, lr}
 800843a:	2006      	movs	r0, #6
 800843c:	f000 fe32 	bl	80090a4 <raise>
 8008440:	2001      	movs	r0, #1
 8008442:	f7f9 fb81 	bl	8001b48 <_exit>

08008446 <_calloc_r>:
 8008446:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008448:	fba1 2402 	umull	r2, r4, r1, r2
 800844c:	b94c      	cbnz	r4, 8008462 <_calloc_r+0x1c>
 800844e:	4611      	mov	r1, r2
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	f7fb fe79 	bl	8004148 <_malloc_r>
 8008456:	9a01      	ldr	r2, [sp, #4]
 8008458:	4605      	mov	r5, r0
 800845a:	b930      	cbnz	r0, 800846a <_calloc_r+0x24>
 800845c:	4628      	mov	r0, r5
 800845e:	b003      	add	sp, #12
 8008460:	bd30      	pop	{r4, r5, pc}
 8008462:	220c      	movs	r2, #12
 8008464:	6002      	str	r2, [r0, #0]
 8008466:	2500      	movs	r5, #0
 8008468:	e7f8      	b.n	800845c <_calloc_r+0x16>
 800846a:	4621      	mov	r1, r4
 800846c:	f7fc feaf 	bl	80051ce <memset>
 8008470:	e7f4      	b.n	800845c <_calloc_r+0x16>

08008472 <rshift>:
 8008472:	6903      	ldr	r3, [r0, #16]
 8008474:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800847c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008480:	f100 0414 	add.w	r4, r0, #20
 8008484:	dd45      	ble.n	8008512 <rshift+0xa0>
 8008486:	f011 011f 	ands.w	r1, r1, #31
 800848a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800848e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008492:	d10c      	bne.n	80084ae <rshift+0x3c>
 8008494:	f100 0710 	add.w	r7, r0, #16
 8008498:	4629      	mov	r1, r5
 800849a:	42b1      	cmp	r1, r6
 800849c:	d334      	bcc.n	8008508 <rshift+0x96>
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	1eea      	subs	r2, r5, #3
 80084a4:	4296      	cmp	r6, r2
 80084a6:	bf38      	it	cc
 80084a8:	2300      	movcc	r3, #0
 80084aa:	4423      	add	r3, r4
 80084ac:	e015      	b.n	80084da <rshift+0x68>
 80084ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084b2:	f1c1 0820 	rsb	r8, r1, #32
 80084b6:	40cf      	lsrs	r7, r1
 80084b8:	f105 0e04 	add.w	lr, r5, #4
 80084bc:	46a1      	mov	r9, r4
 80084be:	4576      	cmp	r6, lr
 80084c0:	46f4      	mov	ip, lr
 80084c2:	d815      	bhi.n	80084f0 <rshift+0x7e>
 80084c4:	1a9a      	subs	r2, r3, r2
 80084c6:	0092      	lsls	r2, r2, #2
 80084c8:	3a04      	subs	r2, #4
 80084ca:	3501      	adds	r5, #1
 80084cc:	42ae      	cmp	r6, r5
 80084ce:	bf38      	it	cc
 80084d0:	2200      	movcc	r2, #0
 80084d2:	18a3      	adds	r3, r4, r2
 80084d4:	50a7      	str	r7, [r4, r2]
 80084d6:	b107      	cbz	r7, 80084da <rshift+0x68>
 80084d8:	3304      	adds	r3, #4
 80084da:	1b1a      	subs	r2, r3, r4
 80084dc:	42a3      	cmp	r3, r4
 80084de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084e2:	bf08      	it	eq
 80084e4:	2300      	moveq	r3, #0
 80084e6:	6102      	str	r2, [r0, #16]
 80084e8:	bf08      	it	eq
 80084ea:	6143      	streq	r3, [r0, #20]
 80084ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084f0:	f8dc c000 	ldr.w	ip, [ip]
 80084f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80084f8:	ea4c 0707 	orr.w	r7, ip, r7
 80084fc:	f849 7b04 	str.w	r7, [r9], #4
 8008500:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008504:	40cf      	lsrs	r7, r1
 8008506:	e7da      	b.n	80084be <rshift+0x4c>
 8008508:	f851 cb04 	ldr.w	ip, [r1], #4
 800850c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008510:	e7c3      	b.n	800849a <rshift+0x28>
 8008512:	4623      	mov	r3, r4
 8008514:	e7e1      	b.n	80084da <rshift+0x68>

08008516 <__hexdig_fun>:
 8008516:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800851a:	2b09      	cmp	r3, #9
 800851c:	d802      	bhi.n	8008524 <__hexdig_fun+0xe>
 800851e:	3820      	subs	r0, #32
 8008520:	b2c0      	uxtb	r0, r0
 8008522:	4770      	bx	lr
 8008524:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008528:	2b05      	cmp	r3, #5
 800852a:	d801      	bhi.n	8008530 <__hexdig_fun+0x1a>
 800852c:	3847      	subs	r0, #71	; 0x47
 800852e:	e7f7      	b.n	8008520 <__hexdig_fun+0xa>
 8008530:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008534:	2b05      	cmp	r3, #5
 8008536:	d801      	bhi.n	800853c <__hexdig_fun+0x26>
 8008538:	3827      	subs	r0, #39	; 0x27
 800853a:	e7f1      	b.n	8008520 <__hexdig_fun+0xa>
 800853c:	2000      	movs	r0, #0
 800853e:	4770      	bx	lr

08008540 <__gethex>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	4617      	mov	r7, r2
 8008546:	680a      	ldr	r2, [r1, #0]
 8008548:	b085      	sub	sp, #20
 800854a:	f102 0b02 	add.w	fp, r2, #2
 800854e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008552:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008556:	4681      	mov	r9, r0
 8008558:	468a      	mov	sl, r1
 800855a:	9302      	str	r3, [sp, #8]
 800855c:	32fe      	adds	r2, #254	; 0xfe
 800855e:	eb02 030b 	add.w	r3, r2, fp
 8008562:	46d8      	mov	r8, fp
 8008564:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	2830      	cmp	r0, #48	; 0x30
 800856c:	d0f7      	beq.n	800855e <__gethex+0x1e>
 800856e:	f7ff ffd2 	bl	8008516 <__hexdig_fun>
 8008572:	4604      	mov	r4, r0
 8008574:	2800      	cmp	r0, #0
 8008576:	d138      	bne.n	80085ea <__gethex+0xaa>
 8008578:	49a7      	ldr	r1, [pc, #668]	; (8008818 <__gethex+0x2d8>)
 800857a:	2201      	movs	r2, #1
 800857c:	4640      	mov	r0, r8
 800857e:	f7ff ff3e 	bl	80083fe <strncmp>
 8008582:	4606      	mov	r6, r0
 8008584:	2800      	cmp	r0, #0
 8008586:	d169      	bne.n	800865c <__gethex+0x11c>
 8008588:	f898 0001 	ldrb.w	r0, [r8, #1]
 800858c:	465d      	mov	r5, fp
 800858e:	f7ff ffc2 	bl	8008516 <__hexdig_fun>
 8008592:	2800      	cmp	r0, #0
 8008594:	d064      	beq.n	8008660 <__gethex+0x120>
 8008596:	465a      	mov	r2, fp
 8008598:	7810      	ldrb	r0, [r2, #0]
 800859a:	2830      	cmp	r0, #48	; 0x30
 800859c:	4690      	mov	r8, r2
 800859e:	f102 0201 	add.w	r2, r2, #1
 80085a2:	d0f9      	beq.n	8008598 <__gethex+0x58>
 80085a4:	f7ff ffb7 	bl	8008516 <__hexdig_fun>
 80085a8:	2301      	movs	r3, #1
 80085aa:	fab0 f480 	clz	r4, r0
 80085ae:	0964      	lsrs	r4, r4, #5
 80085b0:	465e      	mov	r6, fp
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	4642      	mov	r2, r8
 80085b6:	4615      	mov	r5, r2
 80085b8:	3201      	adds	r2, #1
 80085ba:	7828      	ldrb	r0, [r5, #0]
 80085bc:	f7ff ffab 	bl	8008516 <__hexdig_fun>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d1f8      	bne.n	80085b6 <__gethex+0x76>
 80085c4:	4994      	ldr	r1, [pc, #592]	; (8008818 <__gethex+0x2d8>)
 80085c6:	2201      	movs	r2, #1
 80085c8:	4628      	mov	r0, r5
 80085ca:	f7ff ff18 	bl	80083fe <strncmp>
 80085ce:	b978      	cbnz	r0, 80085f0 <__gethex+0xb0>
 80085d0:	b946      	cbnz	r6, 80085e4 <__gethex+0xa4>
 80085d2:	1c6e      	adds	r6, r5, #1
 80085d4:	4632      	mov	r2, r6
 80085d6:	4615      	mov	r5, r2
 80085d8:	3201      	adds	r2, #1
 80085da:	7828      	ldrb	r0, [r5, #0]
 80085dc:	f7ff ff9b 	bl	8008516 <__hexdig_fun>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1f8      	bne.n	80085d6 <__gethex+0x96>
 80085e4:	1b73      	subs	r3, r6, r5
 80085e6:	009e      	lsls	r6, r3, #2
 80085e8:	e004      	b.n	80085f4 <__gethex+0xb4>
 80085ea:	2400      	movs	r4, #0
 80085ec:	4626      	mov	r6, r4
 80085ee:	e7e1      	b.n	80085b4 <__gethex+0x74>
 80085f0:	2e00      	cmp	r6, #0
 80085f2:	d1f7      	bne.n	80085e4 <__gethex+0xa4>
 80085f4:	782b      	ldrb	r3, [r5, #0]
 80085f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085fa:	2b50      	cmp	r3, #80	; 0x50
 80085fc:	d13d      	bne.n	800867a <__gethex+0x13a>
 80085fe:	786b      	ldrb	r3, [r5, #1]
 8008600:	2b2b      	cmp	r3, #43	; 0x2b
 8008602:	d02f      	beq.n	8008664 <__gethex+0x124>
 8008604:	2b2d      	cmp	r3, #45	; 0x2d
 8008606:	d031      	beq.n	800866c <__gethex+0x12c>
 8008608:	1c69      	adds	r1, r5, #1
 800860a:	f04f 0b00 	mov.w	fp, #0
 800860e:	7808      	ldrb	r0, [r1, #0]
 8008610:	f7ff ff81 	bl	8008516 <__hexdig_fun>
 8008614:	1e42      	subs	r2, r0, #1
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	2a18      	cmp	r2, #24
 800861a:	d82e      	bhi.n	800867a <__gethex+0x13a>
 800861c:	f1a0 0210 	sub.w	r2, r0, #16
 8008620:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008624:	f7ff ff77 	bl	8008516 <__hexdig_fun>
 8008628:	f100 3cff 	add.w	ip, r0, #4294967295
 800862c:	fa5f fc8c 	uxtb.w	ip, ip
 8008630:	f1bc 0f18 	cmp.w	ip, #24
 8008634:	d91d      	bls.n	8008672 <__gethex+0x132>
 8008636:	f1bb 0f00 	cmp.w	fp, #0
 800863a:	d000      	beq.n	800863e <__gethex+0xfe>
 800863c:	4252      	negs	r2, r2
 800863e:	4416      	add	r6, r2
 8008640:	f8ca 1000 	str.w	r1, [sl]
 8008644:	b1dc      	cbz	r4, 800867e <__gethex+0x13e>
 8008646:	9b01      	ldr	r3, [sp, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	bf14      	ite	ne
 800864c:	f04f 0800 	movne.w	r8, #0
 8008650:	f04f 0806 	moveq.w	r8, #6
 8008654:	4640      	mov	r0, r8
 8008656:	b005      	add	sp, #20
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	4645      	mov	r5, r8
 800865e:	4626      	mov	r6, r4
 8008660:	2401      	movs	r4, #1
 8008662:	e7c7      	b.n	80085f4 <__gethex+0xb4>
 8008664:	f04f 0b00 	mov.w	fp, #0
 8008668:	1ca9      	adds	r1, r5, #2
 800866a:	e7d0      	b.n	800860e <__gethex+0xce>
 800866c:	f04f 0b01 	mov.w	fp, #1
 8008670:	e7fa      	b.n	8008668 <__gethex+0x128>
 8008672:	230a      	movs	r3, #10
 8008674:	fb03 0002 	mla	r0, r3, r2, r0
 8008678:	e7d0      	b.n	800861c <__gethex+0xdc>
 800867a:	4629      	mov	r1, r5
 800867c:	e7e0      	b.n	8008640 <__gethex+0x100>
 800867e:	eba5 0308 	sub.w	r3, r5, r8
 8008682:	3b01      	subs	r3, #1
 8008684:	4621      	mov	r1, r4
 8008686:	2b07      	cmp	r3, #7
 8008688:	dc0a      	bgt.n	80086a0 <__gethex+0x160>
 800868a:	4648      	mov	r0, r9
 800868c:	f7fd fdae 	bl	80061ec <_Balloc>
 8008690:	4604      	mov	r4, r0
 8008692:	b940      	cbnz	r0, 80086a6 <__gethex+0x166>
 8008694:	4b61      	ldr	r3, [pc, #388]	; (800881c <__gethex+0x2dc>)
 8008696:	4602      	mov	r2, r0
 8008698:	21e4      	movs	r1, #228	; 0xe4
 800869a:	4861      	ldr	r0, [pc, #388]	; (8008820 <__gethex+0x2e0>)
 800869c:	f7fc fec2 	bl	8005424 <__assert_func>
 80086a0:	3101      	adds	r1, #1
 80086a2:	105b      	asrs	r3, r3, #1
 80086a4:	e7ef      	b.n	8008686 <__gethex+0x146>
 80086a6:	f100 0a14 	add.w	sl, r0, #20
 80086aa:	2300      	movs	r3, #0
 80086ac:	495a      	ldr	r1, [pc, #360]	; (8008818 <__gethex+0x2d8>)
 80086ae:	f8cd a004 	str.w	sl, [sp, #4]
 80086b2:	469b      	mov	fp, r3
 80086b4:	45a8      	cmp	r8, r5
 80086b6:	d342      	bcc.n	800873e <__gethex+0x1fe>
 80086b8:	9801      	ldr	r0, [sp, #4]
 80086ba:	f840 bb04 	str.w	fp, [r0], #4
 80086be:	eba0 000a 	sub.w	r0, r0, sl
 80086c2:	1080      	asrs	r0, r0, #2
 80086c4:	6120      	str	r0, [r4, #16]
 80086c6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80086ca:	4658      	mov	r0, fp
 80086cc:	f7fd fe80 	bl	80063d0 <__hi0bits>
 80086d0:	683d      	ldr	r5, [r7, #0]
 80086d2:	eba8 0000 	sub.w	r0, r8, r0
 80086d6:	42a8      	cmp	r0, r5
 80086d8:	dd59      	ble.n	800878e <__gethex+0x24e>
 80086da:	eba0 0805 	sub.w	r8, r0, r5
 80086de:	4641      	mov	r1, r8
 80086e0:	4620      	mov	r0, r4
 80086e2:	f7fe fa0f 	bl	8006b04 <__any_on>
 80086e6:	4683      	mov	fp, r0
 80086e8:	b1b8      	cbz	r0, 800871a <__gethex+0x1da>
 80086ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80086ee:	1159      	asrs	r1, r3, #5
 80086f0:	f003 021f 	and.w	r2, r3, #31
 80086f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80086f8:	f04f 0b01 	mov.w	fp, #1
 80086fc:	fa0b f202 	lsl.w	r2, fp, r2
 8008700:	420a      	tst	r2, r1
 8008702:	d00a      	beq.n	800871a <__gethex+0x1da>
 8008704:	455b      	cmp	r3, fp
 8008706:	dd06      	ble.n	8008716 <__gethex+0x1d6>
 8008708:	f1a8 0102 	sub.w	r1, r8, #2
 800870c:	4620      	mov	r0, r4
 800870e:	f7fe f9f9 	bl	8006b04 <__any_on>
 8008712:	2800      	cmp	r0, #0
 8008714:	d138      	bne.n	8008788 <__gethex+0x248>
 8008716:	f04f 0b02 	mov.w	fp, #2
 800871a:	4641      	mov	r1, r8
 800871c:	4620      	mov	r0, r4
 800871e:	f7ff fea8 	bl	8008472 <rshift>
 8008722:	4446      	add	r6, r8
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	42b3      	cmp	r3, r6
 8008728:	da41      	bge.n	80087ae <__gethex+0x26e>
 800872a:	4621      	mov	r1, r4
 800872c:	4648      	mov	r0, r9
 800872e:	f7fd fd9d 	bl	800626c <_Bfree>
 8008732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008734:	2300      	movs	r3, #0
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800873c:	e78a      	b.n	8008654 <__gethex+0x114>
 800873e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008742:	2a2e      	cmp	r2, #46	; 0x2e
 8008744:	d014      	beq.n	8008770 <__gethex+0x230>
 8008746:	2b20      	cmp	r3, #32
 8008748:	d106      	bne.n	8008758 <__gethex+0x218>
 800874a:	9b01      	ldr	r3, [sp, #4]
 800874c:	f843 bb04 	str.w	fp, [r3], #4
 8008750:	f04f 0b00 	mov.w	fp, #0
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	465b      	mov	r3, fp
 8008758:	7828      	ldrb	r0, [r5, #0]
 800875a:	9303      	str	r3, [sp, #12]
 800875c:	f7ff fedb 	bl	8008516 <__hexdig_fun>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	f000 000f 	and.w	r0, r0, #15
 8008766:	4098      	lsls	r0, r3
 8008768:	ea4b 0b00 	orr.w	fp, fp, r0
 800876c:	3304      	adds	r3, #4
 800876e:	e7a1      	b.n	80086b4 <__gethex+0x174>
 8008770:	45a8      	cmp	r8, r5
 8008772:	d8e8      	bhi.n	8008746 <__gethex+0x206>
 8008774:	2201      	movs	r2, #1
 8008776:	4628      	mov	r0, r5
 8008778:	9303      	str	r3, [sp, #12]
 800877a:	f7ff fe40 	bl	80083fe <strncmp>
 800877e:	4926      	ldr	r1, [pc, #152]	; (8008818 <__gethex+0x2d8>)
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	2800      	cmp	r0, #0
 8008784:	d1df      	bne.n	8008746 <__gethex+0x206>
 8008786:	e795      	b.n	80086b4 <__gethex+0x174>
 8008788:	f04f 0b03 	mov.w	fp, #3
 800878c:	e7c5      	b.n	800871a <__gethex+0x1da>
 800878e:	da0b      	bge.n	80087a8 <__gethex+0x268>
 8008790:	eba5 0800 	sub.w	r8, r5, r0
 8008794:	4621      	mov	r1, r4
 8008796:	4642      	mov	r2, r8
 8008798:	4648      	mov	r0, r9
 800879a:	f7fd ff81 	bl	80066a0 <__lshift>
 800879e:	eba6 0608 	sub.w	r6, r6, r8
 80087a2:	4604      	mov	r4, r0
 80087a4:	f100 0a14 	add.w	sl, r0, #20
 80087a8:	f04f 0b00 	mov.w	fp, #0
 80087ac:	e7ba      	b.n	8008724 <__gethex+0x1e4>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	42b3      	cmp	r3, r6
 80087b2:	dd73      	ble.n	800889c <__gethex+0x35c>
 80087b4:	1b9e      	subs	r6, r3, r6
 80087b6:	42b5      	cmp	r5, r6
 80087b8:	dc34      	bgt.n	8008824 <__gethex+0x2e4>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d023      	beq.n	8008808 <__gethex+0x2c8>
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d025      	beq.n	8008810 <__gethex+0x2d0>
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d115      	bne.n	80087f4 <__gethex+0x2b4>
 80087c8:	42b5      	cmp	r5, r6
 80087ca:	d113      	bne.n	80087f4 <__gethex+0x2b4>
 80087cc:	2d01      	cmp	r5, #1
 80087ce:	d10b      	bne.n	80087e8 <__gethex+0x2a8>
 80087d0:	9a02      	ldr	r2, [sp, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	2301      	movs	r3, #1
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	f8ca 3000 	str.w	r3, [sl]
 80087de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087e0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80087e4:	601c      	str	r4, [r3, #0]
 80087e6:	e735      	b.n	8008654 <__gethex+0x114>
 80087e8:	1e69      	subs	r1, r5, #1
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7fe f98a 	bl	8006b04 <__any_on>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d1ed      	bne.n	80087d0 <__gethex+0x290>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4648      	mov	r0, r9
 80087f8:	f7fd fd38 	bl	800626c <_Bfree>
 80087fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087fe:	2300      	movs	r3, #0
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008806:	e725      	b.n	8008654 <__gethex+0x114>
 8008808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f2      	bne.n	80087f4 <__gethex+0x2b4>
 800880e:	e7df      	b.n	80087d0 <__gethex+0x290>
 8008810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1dc      	bne.n	80087d0 <__gethex+0x290>
 8008816:	e7ed      	b.n	80087f4 <__gethex+0x2b4>
 8008818:	0800a3cc 	.word	0x0800a3cc
 800881c:	0800a265 	.word	0x0800a265
 8008820:	0800a555 	.word	0x0800a555
 8008824:	f106 38ff 	add.w	r8, r6, #4294967295
 8008828:	f1bb 0f00 	cmp.w	fp, #0
 800882c:	d133      	bne.n	8008896 <__gethex+0x356>
 800882e:	f1b8 0f00 	cmp.w	r8, #0
 8008832:	d004      	beq.n	800883e <__gethex+0x2fe>
 8008834:	4641      	mov	r1, r8
 8008836:	4620      	mov	r0, r4
 8008838:	f7fe f964 	bl	8006b04 <__any_on>
 800883c:	4683      	mov	fp, r0
 800883e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008842:	2301      	movs	r3, #1
 8008844:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008848:	f008 081f 	and.w	r8, r8, #31
 800884c:	fa03 f308 	lsl.w	r3, r3, r8
 8008850:	4213      	tst	r3, r2
 8008852:	4631      	mov	r1, r6
 8008854:	4620      	mov	r0, r4
 8008856:	bf18      	it	ne
 8008858:	f04b 0b02 	orrne.w	fp, fp, #2
 800885c:	1bad      	subs	r5, r5, r6
 800885e:	f7ff fe08 	bl	8008472 <rshift>
 8008862:	687e      	ldr	r6, [r7, #4]
 8008864:	f04f 0802 	mov.w	r8, #2
 8008868:	f1bb 0f00 	cmp.w	fp, #0
 800886c:	d04a      	beq.n	8008904 <__gethex+0x3c4>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d016      	beq.n	80088a2 <__gethex+0x362>
 8008874:	2b03      	cmp	r3, #3
 8008876:	d018      	beq.n	80088aa <__gethex+0x36a>
 8008878:	2b01      	cmp	r3, #1
 800887a:	d109      	bne.n	8008890 <__gethex+0x350>
 800887c:	f01b 0f02 	tst.w	fp, #2
 8008880:	d006      	beq.n	8008890 <__gethex+0x350>
 8008882:	f8da 3000 	ldr.w	r3, [sl]
 8008886:	ea4b 0b03 	orr.w	fp, fp, r3
 800888a:	f01b 0f01 	tst.w	fp, #1
 800888e:	d10f      	bne.n	80088b0 <__gethex+0x370>
 8008890:	f048 0810 	orr.w	r8, r8, #16
 8008894:	e036      	b.n	8008904 <__gethex+0x3c4>
 8008896:	f04f 0b01 	mov.w	fp, #1
 800889a:	e7d0      	b.n	800883e <__gethex+0x2fe>
 800889c:	f04f 0801 	mov.w	r8, #1
 80088a0:	e7e2      	b.n	8008868 <__gethex+0x328>
 80088a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a4:	f1c3 0301 	rsb	r3, r3, #1
 80088a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80088aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0ef      	beq.n	8008890 <__gethex+0x350>
 80088b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088b4:	f104 0214 	add.w	r2, r4, #20
 80088b8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80088c2:	2300      	movs	r3, #0
 80088c4:	4694      	mov	ip, r2
 80088c6:	f852 1b04 	ldr.w	r1, [r2], #4
 80088ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 80088ce:	d01e      	beq.n	800890e <__gethex+0x3ce>
 80088d0:	3101      	adds	r1, #1
 80088d2:	f8cc 1000 	str.w	r1, [ip]
 80088d6:	f1b8 0f02 	cmp.w	r8, #2
 80088da:	f104 0214 	add.w	r2, r4, #20
 80088de:	d13d      	bne.n	800895c <__gethex+0x41c>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	42ab      	cmp	r3, r5
 80088e6:	d10b      	bne.n	8008900 <__gethex+0x3c0>
 80088e8:	1169      	asrs	r1, r5, #5
 80088ea:	2301      	movs	r3, #1
 80088ec:	f005 051f 	and.w	r5, r5, #31
 80088f0:	fa03 f505 	lsl.w	r5, r3, r5
 80088f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088f8:	421d      	tst	r5, r3
 80088fa:	bf18      	it	ne
 80088fc:	f04f 0801 	movne.w	r8, #1
 8008900:	f048 0820 	orr.w	r8, r8, #32
 8008904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008906:	601c      	str	r4, [r3, #0]
 8008908:	9b02      	ldr	r3, [sp, #8]
 800890a:	601e      	str	r6, [r3, #0]
 800890c:	e6a2      	b.n	8008654 <__gethex+0x114>
 800890e:	4290      	cmp	r0, r2
 8008910:	f842 3c04 	str.w	r3, [r2, #-4]
 8008914:	d8d6      	bhi.n	80088c4 <__gethex+0x384>
 8008916:	68a2      	ldr	r2, [r4, #8]
 8008918:	4593      	cmp	fp, r2
 800891a:	db17      	blt.n	800894c <__gethex+0x40c>
 800891c:	6861      	ldr	r1, [r4, #4]
 800891e:	4648      	mov	r0, r9
 8008920:	3101      	adds	r1, #1
 8008922:	f7fd fc63 	bl	80061ec <_Balloc>
 8008926:	4682      	mov	sl, r0
 8008928:	b918      	cbnz	r0, 8008932 <__gethex+0x3f2>
 800892a:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <__gethex+0x458>)
 800892c:	4602      	mov	r2, r0
 800892e:	2184      	movs	r1, #132	; 0x84
 8008930:	e6b3      	b.n	800869a <__gethex+0x15a>
 8008932:	6922      	ldr	r2, [r4, #16]
 8008934:	3202      	adds	r2, #2
 8008936:	f104 010c 	add.w	r1, r4, #12
 800893a:	0092      	lsls	r2, r2, #2
 800893c:	300c      	adds	r0, #12
 800893e:	f7fc fd5d 	bl	80053fc <memcpy>
 8008942:	4621      	mov	r1, r4
 8008944:	4648      	mov	r0, r9
 8008946:	f7fd fc91 	bl	800626c <_Bfree>
 800894a:	4654      	mov	r4, sl
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	1c51      	adds	r1, r2, #1
 8008950:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008954:	6121      	str	r1, [r4, #16]
 8008956:	2101      	movs	r1, #1
 8008958:	6151      	str	r1, [r2, #20]
 800895a:	e7bc      	b.n	80088d6 <__gethex+0x396>
 800895c:	6921      	ldr	r1, [r4, #16]
 800895e:	4559      	cmp	r1, fp
 8008960:	dd0b      	ble.n	800897a <__gethex+0x43a>
 8008962:	2101      	movs	r1, #1
 8008964:	4620      	mov	r0, r4
 8008966:	f7ff fd84 	bl	8008472 <rshift>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3601      	adds	r6, #1
 800896e:	42b3      	cmp	r3, r6
 8008970:	f6ff aedb 	blt.w	800872a <__gethex+0x1ea>
 8008974:	f04f 0801 	mov.w	r8, #1
 8008978:	e7c2      	b.n	8008900 <__gethex+0x3c0>
 800897a:	f015 051f 	ands.w	r5, r5, #31
 800897e:	d0f9      	beq.n	8008974 <__gethex+0x434>
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	441a      	add	r2, r3
 8008984:	f1c5 0520 	rsb	r5, r5, #32
 8008988:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800898c:	f7fd fd20 	bl	80063d0 <__hi0bits>
 8008990:	42a8      	cmp	r0, r5
 8008992:	dbe6      	blt.n	8008962 <__gethex+0x422>
 8008994:	e7ee      	b.n	8008974 <__gethex+0x434>
 8008996:	bf00      	nop
 8008998:	0800a265 	.word	0x0800a265

0800899c <L_shift>:
 800899c:	f1c2 0208 	rsb	r2, r2, #8
 80089a0:	0092      	lsls	r2, r2, #2
 80089a2:	b570      	push	{r4, r5, r6, lr}
 80089a4:	f1c2 0620 	rsb	r6, r2, #32
 80089a8:	6843      	ldr	r3, [r0, #4]
 80089aa:	6804      	ldr	r4, [r0, #0]
 80089ac:	fa03 f506 	lsl.w	r5, r3, r6
 80089b0:	432c      	orrs	r4, r5
 80089b2:	40d3      	lsrs	r3, r2
 80089b4:	6004      	str	r4, [r0, #0]
 80089b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80089ba:	4288      	cmp	r0, r1
 80089bc:	d3f4      	bcc.n	80089a8 <L_shift+0xc>
 80089be:	bd70      	pop	{r4, r5, r6, pc}

080089c0 <__match>:
 80089c0:	b530      	push	{r4, r5, lr}
 80089c2:	6803      	ldr	r3, [r0, #0]
 80089c4:	3301      	adds	r3, #1
 80089c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ca:	b914      	cbnz	r4, 80089d2 <__match+0x12>
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	2001      	movs	r0, #1
 80089d0:	bd30      	pop	{r4, r5, pc}
 80089d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089da:	2d19      	cmp	r5, #25
 80089dc:	bf98      	it	ls
 80089de:	3220      	addls	r2, #32
 80089e0:	42a2      	cmp	r2, r4
 80089e2:	d0f0      	beq.n	80089c6 <__match+0x6>
 80089e4:	2000      	movs	r0, #0
 80089e6:	e7f3      	b.n	80089d0 <__match+0x10>

080089e8 <__hexnan>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	680b      	ldr	r3, [r1, #0]
 80089ee:	6801      	ldr	r1, [r0, #0]
 80089f0:	115e      	asrs	r6, r3, #5
 80089f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089f6:	f013 031f 	ands.w	r3, r3, #31
 80089fa:	b087      	sub	sp, #28
 80089fc:	bf18      	it	ne
 80089fe:	3604      	addne	r6, #4
 8008a00:	2500      	movs	r5, #0
 8008a02:	1f37      	subs	r7, r6, #4
 8008a04:	4682      	mov	sl, r0
 8008a06:	4690      	mov	r8, r2
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a0e:	46b9      	mov	r9, r7
 8008a10:	463c      	mov	r4, r7
 8008a12:	9502      	str	r5, [sp, #8]
 8008a14:	46ab      	mov	fp, r5
 8008a16:	784a      	ldrb	r2, [r1, #1]
 8008a18:	1c4b      	adds	r3, r1, #1
 8008a1a:	9303      	str	r3, [sp, #12]
 8008a1c:	b342      	cbz	r2, 8008a70 <__hexnan+0x88>
 8008a1e:	4610      	mov	r0, r2
 8008a20:	9105      	str	r1, [sp, #20]
 8008a22:	9204      	str	r2, [sp, #16]
 8008a24:	f7ff fd77 	bl	8008516 <__hexdig_fun>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d14f      	bne.n	8008acc <__hexnan+0xe4>
 8008a2c:	9a04      	ldr	r2, [sp, #16]
 8008a2e:	9905      	ldr	r1, [sp, #20]
 8008a30:	2a20      	cmp	r2, #32
 8008a32:	d818      	bhi.n	8008a66 <__hexnan+0x7e>
 8008a34:	9b02      	ldr	r3, [sp, #8]
 8008a36:	459b      	cmp	fp, r3
 8008a38:	dd13      	ble.n	8008a62 <__hexnan+0x7a>
 8008a3a:	454c      	cmp	r4, r9
 8008a3c:	d206      	bcs.n	8008a4c <__hexnan+0x64>
 8008a3e:	2d07      	cmp	r5, #7
 8008a40:	dc04      	bgt.n	8008a4c <__hexnan+0x64>
 8008a42:	462a      	mov	r2, r5
 8008a44:	4649      	mov	r1, r9
 8008a46:	4620      	mov	r0, r4
 8008a48:	f7ff ffa8 	bl	800899c <L_shift>
 8008a4c:	4544      	cmp	r4, r8
 8008a4e:	d950      	bls.n	8008af2 <__hexnan+0x10a>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f1a4 0904 	sub.w	r9, r4, #4
 8008a56:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a5e:	464c      	mov	r4, r9
 8008a60:	461d      	mov	r5, r3
 8008a62:	9903      	ldr	r1, [sp, #12]
 8008a64:	e7d7      	b.n	8008a16 <__hexnan+0x2e>
 8008a66:	2a29      	cmp	r2, #41	; 0x29
 8008a68:	d155      	bne.n	8008b16 <__hexnan+0x12e>
 8008a6a:	3102      	adds	r1, #2
 8008a6c:	f8ca 1000 	str.w	r1, [sl]
 8008a70:	f1bb 0f00 	cmp.w	fp, #0
 8008a74:	d04f      	beq.n	8008b16 <__hexnan+0x12e>
 8008a76:	454c      	cmp	r4, r9
 8008a78:	d206      	bcs.n	8008a88 <__hexnan+0xa0>
 8008a7a:	2d07      	cmp	r5, #7
 8008a7c:	dc04      	bgt.n	8008a88 <__hexnan+0xa0>
 8008a7e:	462a      	mov	r2, r5
 8008a80:	4649      	mov	r1, r9
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7ff ff8a 	bl	800899c <L_shift>
 8008a88:	4544      	cmp	r4, r8
 8008a8a:	d934      	bls.n	8008af6 <__hexnan+0x10e>
 8008a8c:	f1a8 0204 	sub.w	r2, r8, #4
 8008a90:	4623      	mov	r3, r4
 8008a92:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a96:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a9a:	429f      	cmp	r7, r3
 8008a9c:	d2f9      	bcs.n	8008a92 <__hexnan+0xaa>
 8008a9e:	1b3b      	subs	r3, r7, r4
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	3e03      	subs	r6, #3
 8008aa8:	3401      	adds	r4, #1
 8008aaa:	42a6      	cmp	r6, r4
 8008aac:	bf38      	it	cc
 8008aae:	2304      	movcc	r3, #4
 8008ab0:	4443      	add	r3, r8
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f843 2b04 	str.w	r2, [r3], #4
 8008ab8:	429f      	cmp	r7, r3
 8008aba:	d2fb      	bcs.n	8008ab4 <__hexnan+0xcc>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	b91b      	cbnz	r3, 8008ac8 <__hexnan+0xe0>
 8008ac0:	4547      	cmp	r7, r8
 8008ac2:	d126      	bne.n	8008b12 <__hexnan+0x12a>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	2005      	movs	r0, #5
 8008aca:	e025      	b.n	8008b18 <__hexnan+0x130>
 8008acc:	3501      	adds	r5, #1
 8008ace:	2d08      	cmp	r5, #8
 8008ad0:	f10b 0b01 	add.w	fp, fp, #1
 8008ad4:	dd06      	ble.n	8008ae4 <__hexnan+0xfc>
 8008ad6:	4544      	cmp	r4, r8
 8008ad8:	d9c3      	bls.n	8008a62 <__hexnan+0x7a>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ae0:	2501      	movs	r5, #1
 8008ae2:	3c04      	subs	r4, #4
 8008ae4:	6822      	ldr	r2, [r4, #0]
 8008ae6:	f000 000f 	and.w	r0, r0, #15
 8008aea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008aee:	6020      	str	r0, [r4, #0]
 8008af0:	e7b7      	b.n	8008a62 <__hexnan+0x7a>
 8008af2:	2508      	movs	r5, #8
 8008af4:	e7b5      	b.n	8008a62 <__hexnan+0x7a>
 8008af6:	9b01      	ldr	r3, [sp, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0df      	beq.n	8008abc <__hexnan+0xd4>
 8008afc:	f1c3 0320 	rsb	r3, r3, #32
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295
 8008b04:	40da      	lsrs	r2, r3
 8008b06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b10:	e7d4      	b.n	8008abc <__hexnan+0xd4>
 8008b12:	3f04      	subs	r7, #4
 8008b14:	e7d2      	b.n	8008abc <__hexnan+0xd4>
 8008b16:	2004      	movs	r0, #4
 8008b18:	b007      	add	sp, #28
 8008b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b1e <__ascii_mbtowc>:
 8008b1e:	b082      	sub	sp, #8
 8008b20:	b901      	cbnz	r1, 8008b24 <__ascii_mbtowc+0x6>
 8008b22:	a901      	add	r1, sp, #4
 8008b24:	b142      	cbz	r2, 8008b38 <__ascii_mbtowc+0x1a>
 8008b26:	b14b      	cbz	r3, 8008b3c <__ascii_mbtowc+0x1e>
 8008b28:	7813      	ldrb	r3, [r2, #0]
 8008b2a:	600b      	str	r3, [r1, #0]
 8008b2c:	7812      	ldrb	r2, [r2, #0]
 8008b2e:	1e10      	subs	r0, r2, #0
 8008b30:	bf18      	it	ne
 8008b32:	2001      	movne	r0, #1
 8008b34:	b002      	add	sp, #8
 8008b36:	4770      	bx	lr
 8008b38:	4610      	mov	r0, r2
 8008b3a:	e7fb      	b.n	8008b34 <__ascii_mbtowc+0x16>
 8008b3c:	f06f 0001 	mvn.w	r0, #1
 8008b40:	e7f8      	b.n	8008b34 <__ascii_mbtowc+0x16>

08008b42 <_realloc_r>:
 8008b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	4680      	mov	r8, r0
 8008b48:	4614      	mov	r4, r2
 8008b4a:	460e      	mov	r6, r1
 8008b4c:	b921      	cbnz	r1, 8008b58 <_realloc_r+0x16>
 8008b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b52:	4611      	mov	r1, r2
 8008b54:	f7fb baf8 	b.w	8004148 <_malloc_r>
 8008b58:	b92a      	cbnz	r2, 8008b66 <_realloc_r+0x24>
 8008b5a:	f7fd fafb 	bl	8006154 <_free_r>
 8008b5e:	4625      	mov	r5, r4
 8008b60:	4628      	mov	r0, r5
 8008b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b66:	f000 fab9 	bl	80090dc <_malloc_usable_size_r>
 8008b6a:	4284      	cmp	r4, r0
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	d802      	bhi.n	8008b76 <_realloc_r+0x34>
 8008b70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b74:	d812      	bhi.n	8008b9c <_realloc_r+0x5a>
 8008b76:	4621      	mov	r1, r4
 8008b78:	4640      	mov	r0, r8
 8008b7a:	f7fb fae5 	bl	8004148 <_malloc_r>
 8008b7e:	4605      	mov	r5, r0
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d0ed      	beq.n	8008b60 <_realloc_r+0x1e>
 8008b84:	42bc      	cmp	r4, r7
 8008b86:	4622      	mov	r2, r4
 8008b88:	4631      	mov	r1, r6
 8008b8a:	bf28      	it	cs
 8008b8c:	463a      	movcs	r2, r7
 8008b8e:	f7fc fc35 	bl	80053fc <memcpy>
 8008b92:	4631      	mov	r1, r6
 8008b94:	4640      	mov	r0, r8
 8008b96:	f7fd fadd 	bl	8006154 <_free_r>
 8008b9a:	e7e1      	b.n	8008b60 <_realloc_r+0x1e>
 8008b9c:	4635      	mov	r5, r6
 8008b9e:	e7df      	b.n	8008b60 <_realloc_r+0x1e>

08008ba0 <_strtoul_l.constprop.0>:
 8008ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	4f36      	ldr	r7, [pc, #216]	; (8008c80 <_strtoul_l.constprop.0+0xe0>)
 8008ba6:	4686      	mov	lr, r0
 8008ba8:	460d      	mov	r5, r1
 8008baa:	4628      	mov	r0, r5
 8008bac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bb0:	5d3e      	ldrb	r6, [r7, r4]
 8008bb2:	f016 0608 	ands.w	r6, r6, #8
 8008bb6:	d1f8      	bne.n	8008baa <_strtoul_l.constprop.0+0xa>
 8008bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8008bba:	d130      	bne.n	8008c1e <_strtoul_l.constprop.0+0x7e>
 8008bbc:	782c      	ldrb	r4, [r5, #0]
 8008bbe:	2601      	movs	r6, #1
 8008bc0:	1c85      	adds	r5, r0, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d057      	beq.n	8008c76 <_strtoul_l.constprop.0+0xd6>
 8008bc6:	2b10      	cmp	r3, #16
 8008bc8:	d109      	bne.n	8008bde <_strtoul_l.constprop.0+0x3e>
 8008bca:	2c30      	cmp	r4, #48	; 0x30
 8008bcc:	d107      	bne.n	8008bde <_strtoul_l.constprop.0+0x3e>
 8008bce:	7828      	ldrb	r0, [r5, #0]
 8008bd0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008bd4:	2858      	cmp	r0, #88	; 0x58
 8008bd6:	d149      	bne.n	8008c6c <_strtoul_l.constprop.0+0xcc>
 8008bd8:	786c      	ldrb	r4, [r5, #1]
 8008bda:	2310      	movs	r3, #16
 8008bdc:	3502      	adds	r5, #2
 8008bde:	f04f 38ff 	mov.w	r8, #4294967295
 8008be2:	2700      	movs	r7, #0
 8008be4:	fbb8 f8f3 	udiv	r8, r8, r3
 8008be8:	fb03 f908 	mul.w	r9, r3, r8
 8008bec:	ea6f 0909 	mvn.w	r9, r9
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008bf6:	f1bc 0f09 	cmp.w	ip, #9
 8008bfa:	d815      	bhi.n	8008c28 <_strtoul_l.constprop.0+0x88>
 8008bfc:	4664      	mov	r4, ip
 8008bfe:	42a3      	cmp	r3, r4
 8008c00:	dd23      	ble.n	8008c4a <_strtoul_l.constprop.0+0xaa>
 8008c02:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008c06:	d007      	beq.n	8008c18 <_strtoul_l.constprop.0+0x78>
 8008c08:	4580      	cmp	r8, r0
 8008c0a:	d31b      	bcc.n	8008c44 <_strtoul_l.constprop.0+0xa4>
 8008c0c:	d101      	bne.n	8008c12 <_strtoul_l.constprop.0+0x72>
 8008c0e:	45a1      	cmp	r9, r4
 8008c10:	db18      	blt.n	8008c44 <_strtoul_l.constprop.0+0xa4>
 8008c12:	fb00 4003 	mla	r0, r0, r3, r4
 8008c16:	2701      	movs	r7, #1
 8008c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c1c:	e7e9      	b.n	8008bf2 <_strtoul_l.constprop.0+0x52>
 8008c1e:	2c2b      	cmp	r4, #43	; 0x2b
 8008c20:	bf04      	itt	eq
 8008c22:	782c      	ldrbeq	r4, [r5, #0]
 8008c24:	1c85      	addeq	r5, r0, #2
 8008c26:	e7cc      	b.n	8008bc2 <_strtoul_l.constprop.0+0x22>
 8008c28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008c2c:	f1bc 0f19 	cmp.w	ip, #25
 8008c30:	d801      	bhi.n	8008c36 <_strtoul_l.constprop.0+0x96>
 8008c32:	3c37      	subs	r4, #55	; 0x37
 8008c34:	e7e3      	b.n	8008bfe <_strtoul_l.constprop.0+0x5e>
 8008c36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008c3a:	f1bc 0f19 	cmp.w	ip, #25
 8008c3e:	d804      	bhi.n	8008c4a <_strtoul_l.constprop.0+0xaa>
 8008c40:	3c57      	subs	r4, #87	; 0x57
 8008c42:	e7dc      	b.n	8008bfe <_strtoul_l.constprop.0+0x5e>
 8008c44:	f04f 37ff 	mov.w	r7, #4294967295
 8008c48:	e7e6      	b.n	8008c18 <_strtoul_l.constprop.0+0x78>
 8008c4a:	1c7b      	adds	r3, r7, #1
 8008c4c:	d106      	bne.n	8008c5c <_strtoul_l.constprop.0+0xbc>
 8008c4e:	2322      	movs	r3, #34	; 0x22
 8008c50:	f8ce 3000 	str.w	r3, [lr]
 8008c54:	4638      	mov	r0, r7
 8008c56:	b932      	cbnz	r2, 8008c66 <_strtoul_l.constprop.0+0xc6>
 8008c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c5c:	b106      	cbz	r6, 8008c60 <_strtoul_l.constprop.0+0xc0>
 8008c5e:	4240      	negs	r0, r0
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	d0f9      	beq.n	8008c58 <_strtoul_l.constprop.0+0xb8>
 8008c64:	b107      	cbz	r7, 8008c68 <_strtoul_l.constprop.0+0xc8>
 8008c66:	1e69      	subs	r1, r5, #1
 8008c68:	6011      	str	r1, [r2, #0]
 8008c6a:	e7f5      	b.n	8008c58 <_strtoul_l.constprop.0+0xb8>
 8008c6c:	2430      	movs	r4, #48	; 0x30
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1b5      	bne.n	8008bde <_strtoul_l.constprop.0+0x3e>
 8008c72:	2308      	movs	r3, #8
 8008c74:	e7b3      	b.n	8008bde <_strtoul_l.constprop.0+0x3e>
 8008c76:	2c30      	cmp	r4, #48	; 0x30
 8008c78:	d0a9      	beq.n	8008bce <_strtoul_l.constprop.0+0x2e>
 8008c7a:	230a      	movs	r3, #10
 8008c7c:	e7af      	b.n	8008bde <_strtoul_l.constprop.0+0x3e>
 8008c7e:	bf00      	nop
 8008c80:	0800a421 	.word	0x0800a421

08008c84 <_strtoul_r>:
 8008c84:	f7ff bf8c 	b.w	8008ba0 <_strtoul_l.constprop.0>

08008c88 <__ascii_wctomb>:
 8008c88:	b149      	cbz	r1, 8008c9e <__ascii_wctomb+0x16>
 8008c8a:	2aff      	cmp	r2, #255	; 0xff
 8008c8c:	bf85      	ittet	hi
 8008c8e:	238a      	movhi	r3, #138	; 0x8a
 8008c90:	6003      	strhi	r3, [r0, #0]
 8008c92:	700a      	strbls	r2, [r1, #0]
 8008c94:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c98:	bf98      	it	ls
 8008c9a:	2001      	movls	r0, #1
 8008c9c:	4770      	bx	lr
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4770      	bx	lr

08008ca2 <__sfputc_r>:
 8008ca2:	6893      	ldr	r3, [r2, #8]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	b410      	push	{r4}
 8008caa:	6093      	str	r3, [r2, #8]
 8008cac:	da08      	bge.n	8008cc0 <__sfputc_r+0x1e>
 8008cae:	6994      	ldr	r4, [r2, #24]
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	db01      	blt.n	8008cb8 <__sfputc_r+0x16>
 8008cb4:	290a      	cmp	r1, #10
 8008cb6:	d103      	bne.n	8008cc0 <__sfputc_r+0x1e>
 8008cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cbc:	f000 b934 	b.w	8008f28 <__swbuf_r>
 8008cc0:	6813      	ldr	r3, [r2, #0]
 8008cc2:	1c58      	adds	r0, r3, #1
 8008cc4:	6010      	str	r0, [r2, #0]
 8008cc6:	7019      	strb	r1, [r3, #0]
 8008cc8:	4608      	mov	r0, r1
 8008cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <__sfputs_r>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	18d5      	adds	r5, r2, r3
 8008cda:	42ac      	cmp	r4, r5
 8008cdc:	d101      	bne.n	8008ce2 <__sfputs_r+0x12>
 8008cde:	2000      	movs	r0, #0
 8008ce0:	e007      	b.n	8008cf2 <__sfputs_r+0x22>
 8008ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce6:	463a      	mov	r2, r7
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff ffda 	bl	8008ca2 <__sfputc_r>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d1f3      	bne.n	8008cda <__sfputs_r+0xa>
 8008cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cf4 <_vfiprintf_r>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	b09d      	sub	sp, #116	; 0x74
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	4698      	mov	r8, r3
 8008d00:	4606      	mov	r6, r0
 8008d02:	b118      	cbz	r0, 8008d0c <_vfiprintf_r+0x18>
 8008d04:	6a03      	ldr	r3, [r0, #32]
 8008d06:	b90b      	cbnz	r3, 8008d0c <_vfiprintf_r+0x18>
 8008d08:	f7fc f99a 	bl	8005040 <__sinit>
 8008d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d0e:	07d9      	lsls	r1, r3, #31
 8008d10:	d405      	bmi.n	8008d1e <_vfiprintf_r+0x2a>
 8008d12:	89ab      	ldrh	r3, [r5, #12]
 8008d14:	059a      	lsls	r2, r3, #22
 8008d16:	d402      	bmi.n	8008d1e <_vfiprintf_r+0x2a>
 8008d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d1a:	f7fc fb65 	bl	80053e8 <__retarget_lock_acquire_recursive>
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	071b      	lsls	r3, r3, #28
 8008d22:	d501      	bpl.n	8008d28 <_vfiprintf_r+0x34>
 8008d24:	692b      	ldr	r3, [r5, #16]
 8008d26:	b99b      	cbnz	r3, 8008d50 <_vfiprintf_r+0x5c>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 f93a 	bl	8008fa4 <__swsetup_r>
 8008d30:	b170      	cbz	r0, 8008d50 <_vfiprintf_r+0x5c>
 8008d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d34:	07dc      	lsls	r4, r3, #31
 8008d36:	d504      	bpl.n	8008d42 <_vfiprintf_r+0x4e>
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	b01d      	add	sp, #116	; 0x74
 8008d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d42:	89ab      	ldrh	r3, [r5, #12]
 8008d44:	0598      	lsls	r0, r3, #22
 8008d46:	d4f7      	bmi.n	8008d38 <_vfiprintf_r+0x44>
 8008d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d4a:	f7fc fb4e 	bl	80053ea <__retarget_lock_release_recursive>
 8008d4e:	e7f3      	b.n	8008d38 <_vfiprintf_r+0x44>
 8008d50:	2300      	movs	r3, #0
 8008d52:	9309      	str	r3, [sp, #36]	; 0x24
 8008d54:	2320      	movs	r3, #32
 8008d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d5e:	2330      	movs	r3, #48	; 0x30
 8008d60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008f14 <_vfiprintf_r+0x220>
 8008d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d68:	f04f 0901 	mov.w	r9, #1
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	469a      	mov	sl, r3
 8008d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d74:	b10a      	cbz	r2, 8008d7a <_vfiprintf_r+0x86>
 8008d76:	2a25      	cmp	r2, #37	; 0x25
 8008d78:	d1f9      	bne.n	8008d6e <_vfiprintf_r+0x7a>
 8008d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d7e:	d00b      	beq.n	8008d98 <_vfiprintf_r+0xa4>
 8008d80:	465b      	mov	r3, fp
 8008d82:	4622      	mov	r2, r4
 8008d84:	4629      	mov	r1, r5
 8008d86:	4630      	mov	r0, r6
 8008d88:	f7ff ffa2 	bl	8008cd0 <__sfputs_r>
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	f000 80a9 	beq.w	8008ee4 <_vfiprintf_r+0x1f0>
 8008d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d94:	445a      	add	r2, fp
 8008d96:	9209      	str	r2, [sp, #36]	; 0x24
 8008d98:	f89a 3000 	ldrb.w	r3, [sl]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 80a1 	beq.w	8008ee4 <_vfiprintf_r+0x1f0>
 8008da2:	2300      	movs	r3, #0
 8008da4:	f04f 32ff 	mov.w	r2, #4294967295
 8008da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dac:	f10a 0a01 	add.w	sl, sl, #1
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	9307      	str	r3, [sp, #28]
 8008db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008db8:	931a      	str	r3, [sp, #104]	; 0x68
 8008dba:	4654      	mov	r4, sl
 8008dbc:	2205      	movs	r2, #5
 8008dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc2:	4854      	ldr	r0, [pc, #336]	; (8008f14 <_vfiprintf_r+0x220>)
 8008dc4:	f7f7 fa24 	bl	8000210 <memchr>
 8008dc8:	9a04      	ldr	r2, [sp, #16]
 8008dca:	b9d8      	cbnz	r0, 8008e04 <_vfiprintf_r+0x110>
 8008dcc:	06d1      	lsls	r1, r2, #27
 8008dce:	bf44      	itt	mi
 8008dd0:	2320      	movmi	r3, #32
 8008dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dd6:	0713      	lsls	r3, r2, #28
 8008dd8:	bf44      	itt	mi
 8008dda:	232b      	movmi	r3, #43	; 0x2b
 8008ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de0:	f89a 3000 	ldrb.w	r3, [sl]
 8008de4:	2b2a      	cmp	r3, #42	; 0x2a
 8008de6:	d015      	beq.n	8008e14 <_vfiprintf_r+0x120>
 8008de8:	9a07      	ldr	r2, [sp, #28]
 8008dea:	4654      	mov	r4, sl
 8008dec:	2000      	movs	r0, #0
 8008dee:	f04f 0c0a 	mov.w	ip, #10
 8008df2:	4621      	mov	r1, r4
 8008df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df8:	3b30      	subs	r3, #48	; 0x30
 8008dfa:	2b09      	cmp	r3, #9
 8008dfc:	d94d      	bls.n	8008e9a <_vfiprintf_r+0x1a6>
 8008dfe:	b1b0      	cbz	r0, 8008e2e <_vfiprintf_r+0x13a>
 8008e00:	9207      	str	r2, [sp, #28]
 8008e02:	e014      	b.n	8008e2e <_vfiprintf_r+0x13a>
 8008e04:	eba0 0308 	sub.w	r3, r0, r8
 8008e08:	fa09 f303 	lsl.w	r3, r9, r3
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	9304      	str	r3, [sp, #16]
 8008e10:	46a2      	mov	sl, r4
 8008e12:	e7d2      	b.n	8008dba <_vfiprintf_r+0xc6>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	1d19      	adds	r1, r3, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	9103      	str	r1, [sp, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bfbb      	ittet	lt
 8008e20:	425b      	neglt	r3, r3
 8008e22:	f042 0202 	orrlt.w	r2, r2, #2
 8008e26:	9307      	strge	r3, [sp, #28]
 8008e28:	9307      	strlt	r3, [sp, #28]
 8008e2a:	bfb8      	it	lt
 8008e2c:	9204      	strlt	r2, [sp, #16]
 8008e2e:	7823      	ldrb	r3, [r4, #0]
 8008e30:	2b2e      	cmp	r3, #46	; 0x2e
 8008e32:	d10c      	bne.n	8008e4e <_vfiprintf_r+0x15a>
 8008e34:	7863      	ldrb	r3, [r4, #1]
 8008e36:	2b2a      	cmp	r3, #42	; 0x2a
 8008e38:	d134      	bne.n	8008ea4 <_vfiprintf_r+0x1b0>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	1d1a      	adds	r2, r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	9203      	str	r2, [sp, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfb8      	it	lt
 8008e46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e4a:	3402      	adds	r4, #2
 8008e4c:	9305      	str	r3, [sp, #20]
 8008e4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008f24 <_vfiprintf_r+0x230>
 8008e52:	7821      	ldrb	r1, [r4, #0]
 8008e54:	2203      	movs	r2, #3
 8008e56:	4650      	mov	r0, sl
 8008e58:	f7f7 f9da 	bl	8000210 <memchr>
 8008e5c:	b138      	cbz	r0, 8008e6e <_vfiprintf_r+0x17a>
 8008e5e:	9b04      	ldr	r3, [sp, #16]
 8008e60:	eba0 000a 	sub.w	r0, r0, sl
 8008e64:	2240      	movs	r2, #64	; 0x40
 8008e66:	4082      	lsls	r2, r0
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	3401      	adds	r4, #1
 8008e6c:	9304      	str	r3, [sp, #16]
 8008e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e72:	4829      	ldr	r0, [pc, #164]	; (8008f18 <_vfiprintf_r+0x224>)
 8008e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e78:	2206      	movs	r2, #6
 8008e7a:	f7f7 f9c9 	bl	8000210 <memchr>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d03f      	beq.n	8008f02 <_vfiprintf_r+0x20e>
 8008e82:	4b26      	ldr	r3, [pc, #152]	; (8008f1c <_vfiprintf_r+0x228>)
 8008e84:	bb1b      	cbnz	r3, 8008ece <_vfiprintf_r+0x1da>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	3307      	adds	r3, #7
 8008e8a:	f023 0307 	bic.w	r3, r3, #7
 8008e8e:	3308      	adds	r3, #8
 8008e90:	9303      	str	r3, [sp, #12]
 8008e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e94:	443b      	add	r3, r7
 8008e96:	9309      	str	r3, [sp, #36]	; 0x24
 8008e98:	e768      	b.n	8008d6c <_vfiprintf_r+0x78>
 8008e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	e7a6      	b.n	8008df2 <_vfiprintf_r+0xfe>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	3401      	adds	r4, #1
 8008ea8:	9305      	str	r3, [sp, #20]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	f04f 0c0a 	mov.w	ip, #10
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb6:	3a30      	subs	r2, #48	; 0x30
 8008eb8:	2a09      	cmp	r2, #9
 8008eba:	d903      	bls.n	8008ec4 <_vfiprintf_r+0x1d0>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0c6      	beq.n	8008e4e <_vfiprintf_r+0x15a>
 8008ec0:	9105      	str	r1, [sp, #20]
 8008ec2:	e7c4      	b.n	8008e4e <_vfiprintf_r+0x15a>
 8008ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ec8:	4604      	mov	r4, r0
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e7f0      	b.n	8008eb0 <_vfiprintf_r+0x1bc>
 8008ece:	ab03      	add	r3, sp, #12
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	462a      	mov	r2, r5
 8008ed4:	4b12      	ldr	r3, [pc, #72]	; (8008f20 <_vfiprintf_r+0x22c>)
 8008ed6:	a904      	add	r1, sp, #16
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7fb fa61 	bl	80043a0 <_printf_float>
 8008ede:	4607      	mov	r7, r0
 8008ee0:	1c78      	adds	r0, r7, #1
 8008ee2:	d1d6      	bne.n	8008e92 <_vfiprintf_r+0x19e>
 8008ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ee6:	07d9      	lsls	r1, r3, #31
 8008ee8:	d405      	bmi.n	8008ef6 <_vfiprintf_r+0x202>
 8008eea:	89ab      	ldrh	r3, [r5, #12]
 8008eec:	059a      	lsls	r2, r3, #22
 8008eee:	d402      	bmi.n	8008ef6 <_vfiprintf_r+0x202>
 8008ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ef2:	f7fc fa7a 	bl	80053ea <__retarget_lock_release_recursive>
 8008ef6:	89ab      	ldrh	r3, [r5, #12]
 8008ef8:	065b      	lsls	r3, r3, #25
 8008efa:	f53f af1d 	bmi.w	8008d38 <_vfiprintf_r+0x44>
 8008efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f00:	e71c      	b.n	8008d3c <_vfiprintf_r+0x48>
 8008f02:	ab03      	add	r3, sp, #12
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	462a      	mov	r2, r5
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <_vfiprintf_r+0x22c>)
 8008f0a:	a904      	add	r1, sp, #16
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7fb fceb 	bl	80048e8 <_printf_i>
 8008f12:	e7e4      	b.n	8008ede <_vfiprintf_r+0x1ea>
 8008f14:	0800a521 	.word	0x0800a521
 8008f18:	0800a52b 	.word	0x0800a52b
 8008f1c:	080043a1 	.word	0x080043a1
 8008f20:	08008cd1 	.word	0x08008cd1
 8008f24:	0800a527 	.word	0x0800a527

08008f28 <__swbuf_r>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	460e      	mov	r6, r1
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	4605      	mov	r5, r0
 8008f30:	b118      	cbz	r0, 8008f3a <__swbuf_r+0x12>
 8008f32:	6a03      	ldr	r3, [r0, #32]
 8008f34:	b90b      	cbnz	r3, 8008f3a <__swbuf_r+0x12>
 8008f36:	f7fc f883 	bl	8005040 <__sinit>
 8008f3a:	69a3      	ldr	r3, [r4, #24]
 8008f3c:	60a3      	str	r3, [r4, #8]
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	071a      	lsls	r2, r3, #28
 8008f42:	d525      	bpl.n	8008f90 <__swbuf_r+0x68>
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	b31b      	cbz	r3, 8008f90 <__swbuf_r+0x68>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	6922      	ldr	r2, [r4, #16]
 8008f4c:	1a98      	subs	r0, r3, r2
 8008f4e:	6963      	ldr	r3, [r4, #20]
 8008f50:	b2f6      	uxtb	r6, r6
 8008f52:	4283      	cmp	r3, r0
 8008f54:	4637      	mov	r7, r6
 8008f56:	dc04      	bgt.n	8008f62 <__swbuf_r+0x3a>
 8008f58:	4621      	mov	r1, r4
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f7ff f988 	bl	8008270 <_fflush_r>
 8008f60:	b9e0      	cbnz	r0, 8008f9c <__swbuf_r+0x74>
 8008f62:	68a3      	ldr	r3, [r4, #8]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	60a3      	str	r3, [r4, #8]
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	6022      	str	r2, [r4, #0]
 8008f6e:	701e      	strb	r6, [r3, #0]
 8008f70:	6962      	ldr	r2, [r4, #20]
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d004      	beq.n	8008f82 <__swbuf_r+0x5a>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	07db      	lsls	r3, r3, #31
 8008f7c:	d506      	bpl.n	8008f8c <__swbuf_r+0x64>
 8008f7e:	2e0a      	cmp	r6, #10
 8008f80:	d104      	bne.n	8008f8c <__swbuf_r+0x64>
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f7ff f973 	bl	8008270 <_fflush_r>
 8008f8a:	b938      	cbnz	r0, 8008f9c <__swbuf_r+0x74>
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f90:	4621      	mov	r1, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 f806 	bl	8008fa4 <__swsetup_r>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d0d5      	beq.n	8008f48 <__swbuf_r+0x20>
 8008f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8008fa0:	e7f4      	b.n	8008f8c <__swbuf_r+0x64>
	...

08008fa4 <__swsetup_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4b2a      	ldr	r3, [pc, #168]	; (8009050 <__swsetup_r+0xac>)
 8008fa8:	4605      	mov	r5, r0
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	460c      	mov	r4, r1
 8008fae:	b118      	cbz	r0, 8008fb8 <__swsetup_r+0x14>
 8008fb0:	6a03      	ldr	r3, [r0, #32]
 8008fb2:	b90b      	cbnz	r3, 8008fb8 <__swsetup_r+0x14>
 8008fb4:	f7fc f844 	bl	8005040 <__sinit>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fbe:	0718      	lsls	r0, r3, #28
 8008fc0:	d422      	bmi.n	8009008 <__swsetup_r+0x64>
 8008fc2:	06d9      	lsls	r1, r3, #27
 8008fc4:	d407      	bmi.n	8008fd6 <__swsetup_r+0x32>
 8008fc6:	2309      	movs	r3, #9
 8008fc8:	602b      	str	r3, [r5, #0]
 8008fca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	e034      	b.n	8009040 <__swsetup_r+0x9c>
 8008fd6:	0758      	lsls	r0, r3, #29
 8008fd8:	d512      	bpl.n	8009000 <__swsetup_r+0x5c>
 8008fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fdc:	b141      	cbz	r1, 8008ff0 <__swsetup_r+0x4c>
 8008fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe2:	4299      	cmp	r1, r3
 8008fe4:	d002      	beq.n	8008fec <__swsetup_r+0x48>
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f7fd f8b4 	bl	8006154 <_free_r>
 8008fec:	2300      	movs	r3, #0
 8008fee:	6363      	str	r3, [r4, #52]	; 0x34
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	6063      	str	r3, [r4, #4]
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	f043 0308 	orr.w	r3, r3, #8
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	b94b      	cbnz	r3, 8009020 <__swsetup_r+0x7c>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009016:	d003      	beq.n	8009020 <__swsetup_r+0x7c>
 8009018:	4621      	mov	r1, r4
 800901a:	4628      	mov	r0, r5
 800901c:	f000 f88c 	bl	8009138 <__smakebuf_r>
 8009020:	89a0      	ldrh	r0, [r4, #12]
 8009022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009026:	f010 0301 	ands.w	r3, r0, #1
 800902a:	d00a      	beq.n	8009042 <__swsetup_r+0x9e>
 800902c:	2300      	movs	r3, #0
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	6963      	ldr	r3, [r4, #20]
 8009032:	425b      	negs	r3, r3
 8009034:	61a3      	str	r3, [r4, #24]
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	b943      	cbnz	r3, 800904c <__swsetup_r+0xa8>
 800903a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800903e:	d1c4      	bne.n	8008fca <__swsetup_r+0x26>
 8009040:	bd38      	pop	{r3, r4, r5, pc}
 8009042:	0781      	lsls	r1, r0, #30
 8009044:	bf58      	it	pl
 8009046:	6963      	ldrpl	r3, [r4, #20]
 8009048:	60a3      	str	r3, [r4, #8]
 800904a:	e7f4      	b.n	8009036 <__swsetup_r+0x92>
 800904c:	2000      	movs	r0, #0
 800904e:	e7f7      	b.n	8009040 <__swsetup_r+0x9c>
 8009050:	20000080 	.word	0x20000080

08009054 <_raise_r>:
 8009054:	291f      	cmp	r1, #31
 8009056:	b538      	push	{r3, r4, r5, lr}
 8009058:	4604      	mov	r4, r0
 800905a:	460d      	mov	r5, r1
 800905c:	d904      	bls.n	8009068 <_raise_r+0x14>
 800905e:	2316      	movs	r3, #22
 8009060:	6003      	str	r3, [r0, #0]
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800906a:	b112      	cbz	r2, 8009072 <_raise_r+0x1e>
 800906c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009070:	b94b      	cbnz	r3, 8009086 <_raise_r+0x32>
 8009072:	4620      	mov	r0, r4
 8009074:	f000 f830 	bl	80090d8 <_getpid_r>
 8009078:	462a      	mov	r2, r5
 800907a:	4601      	mov	r1, r0
 800907c:	4620      	mov	r0, r4
 800907e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009082:	f000 b817 	b.w	80090b4 <_kill_r>
 8009086:	2b01      	cmp	r3, #1
 8009088:	d00a      	beq.n	80090a0 <_raise_r+0x4c>
 800908a:	1c59      	adds	r1, r3, #1
 800908c:	d103      	bne.n	8009096 <_raise_r+0x42>
 800908e:	2316      	movs	r3, #22
 8009090:	6003      	str	r3, [r0, #0]
 8009092:	2001      	movs	r0, #1
 8009094:	e7e7      	b.n	8009066 <_raise_r+0x12>
 8009096:	2400      	movs	r4, #0
 8009098:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800909c:	4628      	mov	r0, r5
 800909e:	4798      	blx	r3
 80090a0:	2000      	movs	r0, #0
 80090a2:	e7e0      	b.n	8009066 <_raise_r+0x12>

080090a4 <raise>:
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <raise+0xc>)
 80090a6:	4601      	mov	r1, r0
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f7ff bfd3 	b.w	8009054 <_raise_r>
 80090ae:	bf00      	nop
 80090b0:	20000080 	.word	0x20000080

080090b4 <_kill_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4d07      	ldr	r5, [pc, #28]	; (80090d4 <_kill_r+0x20>)
 80090b8:	2300      	movs	r3, #0
 80090ba:	4604      	mov	r4, r0
 80090bc:	4608      	mov	r0, r1
 80090be:	4611      	mov	r1, r2
 80090c0:	602b      	str	r3, [r5, #0]
 80090c2:	f7f8 fd31 	bl	8001b28 <_kill>
 80090c6:	1c43      	adds	r3, r0, #1
 80090c8:	d102      	bne.n	80090d0 <_kill_r+0x1c>
 80090ca:	682b      	ldr	r3, [r5, #0]
 80090cc:	b103      	cbz	r3, 80090d0 <_kill_r+0x1c>
 80090ce:	6023      	str	r3, [r4, #0]
 80090d0:	bd38      	pop	{r3, r4, r5, pc}
 80090d2:	bf00      	nop
 80090d4:	20000490 	.word	0x20000490

080090d8 <_getpid_r>:
 80090d8:	f7f8 bd1e 	b.w	8001b18 <_getpid>

080090dc <_malloc_usable_size_r>:
 80090dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e0:	1f18      	subs	r0, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bfbc      	itt	lt
 80090e6:	580b      	ldrlt	r3, [r1, r0]
 80090e8:	18c0      	addlt	r0, r0, r3
 80090ea:	4770      	bx	lr

080090ec <__swhatbuf_r>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	460c      	mov	r4, r1
 80090f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f4:	2900      	cmp	r1, #0
 80090f6:	b096      	sub	sp, #88	; 0x58
 80090f8:	4615      	mov	r5, r2
 80090fa:	461e      	mov	r6, r3
 80090fc:	da0d      	bge.n	800911a <__swhatbuf_r+0x2e>
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009104:	f04f 0100 	mov.w	r1, #0
 8009108:	bf0c      	ite	eq
 800910a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800910e:	2340      	movne	r3, #64	; 0x40
 8009110:	2000      	movs	r0, #0
 8009112:	6031      	str	r1, [r6, #0]
 8009114:	602b      	str	r3, [r5, #0]
 8009116:	b016      	add	sp, #88	; 0x58
 8009118:	bd70      	pop	{r4, r5, r6, pc}
 800911a:	466a      	mov	r2, sp
 800911c:	f000 f848 	bl	80091b0 <_fstat_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	dbec      	blt.n	80090fe <__swhatbuf_r+0x12>
 8009124:	9901      	ldr	r1, [sp, #4]
 8009126:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800912a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800912e:	4259      	negs	r1, r3
 8009130:	4159      	adcs	r1, r3
 8009132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009136:	e7eb      	b.n	8009110 <__swhatbuf_r+0x24>

08009138 <__smakebuf_r>:
 8009138:	898b      	ldrh	r3, [r1, #12]
 800913a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800913c:	079d      	lsls	r5, r3, #30
 800913e:	4606      	mov	r6, r0
 8009140:	460c      	mov	r4, r1
 8009142:	d507      	bpl.n	8009154 <__smakebuf_r+0x1c>
 8009144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	2301      	movs	r3, #1
 800914e:	6163      	str	r3, [r4, #20]
 8009150:	b002      	add	sp, #8
 8009152:	bd70      	pop	{r4, r5, r6, pc}
 8009154:	ab01      	add	r3, sp, #4
 8009156:	466a      	mov	r2, sp
 8009158:	f7ff ffc8 	bl	80090ec <__swhatbuf_r>
 800915c:	9900      	ldr	r1, [sp, #0]
 800915e:	4605      	mov	r5, r0
 8009160:	4630      	mov	r0, r6
 8009162:	f7fa fff1 	bl	8004148 <_malloc_r>
 8009166:	b948      	cbnz	r0, 800917c <__smakebuf_r+0x44>
 8009168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800916c:	059a      	lsls	r2, r3, #22
 800916e:	d4ef      	bmi.n	8009150 <__smakebuf_r+0x18>
 8009170:	f023 0303 	bic.w	r3, r3, #3
 8009174:	f043 0302 	orr.w	r3, r3, #2
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	e7e3      	b.n	8009144 <__smakebuf_r+0xc>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	6020      	str	r0, [r4, #0]
 8009180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	6163      	str	r3, [r4, #20]
 800918a:	9b01      	ldr	r3, [sp, #4]
 800918c:	6120      	str	r0, [r4, #16]
 800918e:	b15b      	cbz	r3, 80091a8 <__smakebuf_r+0x70>
 8009190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009194:	4630      	mov	r0, r6
 8009196:	f000 f81d 	bl	80091d4 <_isatty_r>
 800919a:	b128      	cbz	r0, 80091a8 <__smakebuf_r+0x70>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	431d      	orrs	r5, r3
 80091ac:	81a5      	strh	r5, [r4, #12]
 80091ae:	e7cf      	b.n	8009150 <__smakebuf_r+0x18>

080091b0 <_fstat_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d07      	ldr	r5, [pc, #28]	; (80091d0 <_fstat_r+0x20>)
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	4611      	mov	r1, r2
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	f7f8 fd12 	bl	8001be6 <_fstat>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	d102      	bne.n	80091cc <_fstat_r+0x1c>
 80091c6:	682b      	ldr	r3, [r5, #0]
 80091c8:	b103      	cbz	r3, 80091cc <_fstat_r+0x1c>
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20000490 	.word	0x20000490

080091d4 <_isatty_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	; (80091f0 <_isatty_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f8 fd11 	bl	8001c06 <_isatty>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_isatty_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_isatty_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000490 	.word	0x20000490

080091f4 <pow>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	ed2d 8b02 	vpush	{d8}
 80091fa:	eeb0 8a40 	vmov.f32	s16, s0
 80091fe:	eef0 8a60 	vmov.f32	s17, s1
 8009202:	ec55 4b11 	vmov	r4, r5, d1
 8009206:	f000 f873 	bl	80092f0 <__ieee754_pow>
 800920a:	4622      	mov	r2, r4
 800920c:	462b      	mov	r3, r5
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	ec57 6b10 	vmov	r6, r7, d0
 8009216:	f7f7 fca9 	bl	8000b6c <__aeabi_dcmpun>
 800921a:	2800      	cmp	r0, #0
 800921c:	d13b      	bne.n	8009296 <pow+0xa2>
 800921e:	ec51 0b18 	vmov	r0, r1, d8
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	f7f7 fc6f 	bl	8000b08 <__aeabi_dcmpeq>
 800922a:	b1b8      	cbz	r0, 800925c <pow+0x68>
 800922c:	2200      	movs	r2, #0
 800922e:	2300      	movs	r3, #0
 8009230:	4620      	mov	r0, r4
 8009232:	4629      	mov	r1, r5
 8009234:	f7f7 fc68 	bl	8000b08 <__aeabi_dcmpeq>
 8009238:	2800      	cmp	r0, #0
 800923a:	d146      	bne.n	80092ca <pow+0xd6>
 800923c:	ec45 4b10 	vmov	d0, r4, r5
 8009240:	f000 f848 	bl	80092d4 <finite>
 8009244:	b338      	cbz	r0, 8009296 <pow+0xa2>
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	4620      	mov	r0, r4
 800924c:	4629      	mov	r1, r5
 800924e:	f7f7 fc65 	bl	8000b1c <__aeabi_dcmplt>
 8009252:	b300      	cbz	r0, 8009296 <pow+0xa2>
 8009254:	f7fc f89e 	bl	8005394 <__errno>
 8009258:	2322      	movs	r3, #34	; 0x22
 800925a:	e01b      	b.n	8009294 <pow+0xa0>
 800925c:	ec47 6b10 	vmov	d0, r6, r7
 8009260:	f000 f838 	bl	80092d4 <finite>
 8009264:	b9e0      	cbnz	r0, 80092a0 <pow+0xac>
 8009266:	eeb0 0a48 	vmov.f32	s0, s16
 800926a:	eef0 0a68 	vmov.f32	s1, s17
 800926e:	f000 f831 	bl	80092d4 <finite>
 8009272:	b1a8      	cbz	r0, 80092a0 <pow+0xac>
 8009274:	ec45 4b10 	vmov	d0, r4, r5
 8009278:	f000 f82c 	bl	80092d4 <finite>
 800927c:	b180      	cbz	r0, 80092a0 <pow+0xac>
 800927e:	4632      	mov	r2, r6
 8009280:	463b      	mov	r3, r7
 8009282:	4630      	mov	r0, r6
 8009284:	4639      	mov	r1, r7
 8009286:	f7f7 fc71 	bl	8000b6c <__aeabi_dcmpun>
 800928a:	2800      	cmp	r0, #0
 800928c:	d0e2      	beq.n	8009254 <pow+0x60>
 800928e:	f7fc f881 	bl	8005394 <__errno>
 8009292:	2321      	movs	r3, #33	; 0x21
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	ecbd 8b02 	vpop	{d8}
 800929a:	ec47 6b10 	vmov	d0, r6, r7
 800929e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a0:	2200      	movs	r2, #0
 80092a2:	2300      	movs	r3, #0
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f7 fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d0f2      	beq.n	8009296 <pow+0xa2>
 80092b0:	eeb0 0a48 	vmov.f32	s0, s16
 80092b4:	eef0 0a68 	vmov.f32	s1, s17
 80092b8:	f000 f80c 	bl	80092d4 <finite>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d0ea      	beq.n	8009296 <pow+0xa2>
 80092c0:	ec45 4b10 	vmov	d0, r4, r5
 80092c4:	f000 f806 	bl	80092d4 <finite>
 80092c8:	e7c3      	b.n	8009252 <pow+0x5e>
 80092ca:	4f01      	ldr	r7, [pc, #4]	; (80092d0 <pow+0xdc>)
 80092cc:	2600      	movs	r6, #0
 80092ce:	e7e2      	b.n	8009296 <pow+0xa2>
 80092d0:	3ff00000 	.word	0x3ff00000

080092d4 <finite>:
 80092d4:	b082      	sub	sp, #8
 80092d6:	ed8d 0b00 	vstr	d0, [sp]
 80092da:	9801      	ldr	r0, [sp, #4]
 80092dc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80092e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80092e4:	0fc0      	lsrs	r0, r0, #31
 80092e6:	b002      	add	sp, #8
 80092e8:	4770      	bx	lr
 80092ea:	0000      	movs	r0, r0
 80092ec:	0000      	movs	r0, r0
	...

080092f0 <__ieee754_pow>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	ed2d 8b06 	vpush	{d8-d10}
 80092f8:	b089      	sub	sp, #36	; 0x24
 80092fa:	ed8d 1b00 	vstr	d1, [sp]
 80092fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009302:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009306:	ea58 0102 	orrs.w	r1, r8, r2
 800930a:	ec57 6b10 	vmov	r6, r7, d0
 800930e:	d115      	bne.n	800933c <__ieee754_pow+0x4c>
 8009310:	19b3      	adds	r3, r6, r6
 8009312:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009316:	4152      	adcs	r2, r2
 8009318:	4299      	cmp	r1, r3
 800931a:	4b89      	ldr	r3, [pc, #548]	; (8009540 <__ieee754_pow+0x250>)
 800931c:	4193      	sbcs	r3, r2
 800931e:	f080 84d1 	bcs.w	8009cc4 <__ieee754_pow+0x9d4>
 8009322:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009326:	4630      	mov	r0, r6
 8009328:	4639      	mov	r1, r7
 800932a:	f7f6 ffcf 	bl	80002cc <__adddf3>
 800932e:	ec41 0b10 	vmov	d0, r0, r1
 8009332:	b009      	add	sp, #36	; 0x24
 8009334:	ecbd 8b06 	vpop	{d8-d10}
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	4b81      	ldr	r3, [pc, #516]	; (8009544 <__ieee754_pow+0x254>)
 800933e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009342:	429c      	cmp	r4, r3
 8009344:	ee10 aa10 	vmov	sl, s0
 8009348:	463d      	mov	r5, r7
 800934a:	dc06      	bgt.n	800935a <__ieee754_pow+0x6a>
 800934c:	d101      	bne.n	8009352 <__ieee754_pow+0x62>
 800934e:	2e00      	cmp	r6, #0
 8009350:	d1e7      	bne.n	8009322 <__ieee754_pow+0x32>
 8009352:	4598      	cmp	r8, r3
 8009354:	dc01      	bgt.n	800935a <__ieee754_pow+0x6a>
 8009356:	d10f      	bne.n	8009378 <__ieee754_pow+0x88>
 8009358:	b172      	cbz	r2, 8009378 <__ieee754_pow+0x88>
 800935a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800935e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009362:	ea55 050a 	orrs.w	r5, r5, sl
 8009366:	d1dc      	bne.n	8009322 <__ieee754_pow+0x32>
 8009368:	e9dd 3200 	ldrd	r3, r2, [sp]
 800936c:	18db      	adds	r3, r3, r3
 800936e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009372:	4152      	adcs	r2, r2
 8009374:	429d      	cmp	r5, r3
 8009376:	e7d0      	b.n	800931a <__ieee754_pow+0x2a>
 8009378:	2d00      	cmp	r5, #0
 800937a:	da3b      	bge.n	80093f4 <__ieee754_pow+0x104>
 800937c:	4b72      	ldr	r3, [pc, #456]	; (8009548 <__ieee754_pow+0x258>)
 800937e:	4598      	cmp	r8, r3
 8009380:	dc51      	bgt.n	8009426 <__ieee754_pow+0x136>
 8009382:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009386:	4598      	cmp	r8, r3
 8009388:	f340 84ab 	ble.w	8009ce2 <__ieee754_pow+0x9f2>
 800938c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009390:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009394:	2b14      	cmp	r3, #20
 8009396:	dd0f      	ble.n	80093b8 <__ieee754_pow+0xc8>
 8009398:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800939c:	fa22 f103 	lsr.w	r1, r2, r3
 80093a0:	fa01 f303 	lsl.w	r3, r1, r3
 80093a4:	4293      	cmp	r3, r2
 80093a6:	f040 849c 	bne.w	8009ce2 <__ieee754_pow+0x9f2>
 80093aa:	f001 0101 	and.w	r1, r1, #1
 80093ae:	f1c1 0302 	rsb	r3, r1, #2
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	b182      	cbz	r2, 80093d8 <__ieee754_pow+0xe8>
 80093b6:	e05f      	b.n	8009478 <__ieee754_pow+0x188>
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	d15b      	bne.n	8009474 <__ieee754_pow+0x184>
 80093bc:	f1c3 0314 	rsb	r3, r3, #20
 80093c0:	fa48 f103 	asr.w	r1, r8, r3
 80093c4:	fa01 f303 	lsl.w	r3, r1, r3
 80093c8:	4543      	cmp	r3, r8
 80093ca:	f040 8487 	bne.w	8009cdc <__ieee754_pow+0x9ec>
 80093ce:	f001 0101 	and.w	r1, r1, #1
 80093d2:	f1c1 0302 	rsb	r3, r1, #2
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	4b5c      	ldr	r3, [pc, #368]	; (800954c <__ieee754_pow+0x25c>)
 80093da:	4598      	cmp	r8, r3
 80093dc:	d132      	bne.n	8009444 <__ieee754_pow+0x154>
 80093de:	f1b9 0f00 	cmp.w	r9, #0
 80093e2:	f280 8477 	bge.w	8009cd4 <__ieee754_pow+0x9e4>
 80093e6:	4959      	ldr	r1, [pc, #356]	; (800954c <__ieee754_pow+0x25c>)
 80093e8:	4632      	mov	r2, r6
 80093ea:	463b      	mov	r3, r7
 80093ec:	2000      	movs	r0, #0
 80093ee:	f7f7 fa4d 	bl	800088c <__aeabi_ddiv>
 80093f2:	e79c      	b.n	800932e <__ieee754_pow+0x3e>
 80093f4:	2300      	movs	r3, #0
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	2a00      	cmp	r2, #0
 80093fa:	d13d      	bne.n	8009478 <__ieee754_pow+0x188>
 80093fc:	4b51      	ldr	r3, [pc, #324]	; (8009544 <__ieee754_pow+0x254>)
 80093fe:	4598      	cmp	r8, r3
 8009400:	d1ea      	bne.n	80093d8 <__ieee754_pow+0xe8>
 8009402:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009406:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800940a:	ea53 030a 	orrs.w	r3, r3, sl
 800940e:	f000 8459 	beq.w	8009cc4 <__ieee754_pow+0x9d4>
 8009412:	4b4f      	ldr	r3, [pc, #316]	; (8009550 <__ieee754_pow+0x260>)
 8009414:	429c      	cmp	r4, r3
 8009416:	dd08      	ble.n	800942a <__ieee754_pow+0x13a>
 8009418:	f1b9 0f00 	cmp.w	r9, #0
 800941c:	f2c0 8456 	blt.w	8009ccc <__ieee754_pow+0x9dc>
 8009420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009424:	e783      	b.n	800932e <__ieee754_pow+0x3e>
 8009426:	2302      	movs	r3, #2
 8009428:	e7e5      	b.n	80093f6 <__ieee754_pow+0x106>
 800942a:	f1b9 0f00 	cmp.w	r9, #0
 800942e:	f04f 0000 	mov.w	r0, #0
 8009432:	f04f 0100 	mov.w	r1, #0
 8009436:	f6bf af7a 	bge.w	800932e <__ieee754_pow+0x3e>
 800943a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800943e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009442:	e774      	b.n	800932e <__ieee754_pow+0x3e>
 8009444:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009448:	d106      	bne.n	8009458 <__ieee754_pow+0x168>
 800944a:	4632      	mov	r2, r6
 800944c:	463b      	mov	r3, r7
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7f7 f8f1 	bl	8000638 <__aeabi_dmul>
 8009456:	e76a      	b.n	800932e <__ieee754_pow+0x3e>
 8009458:	4b3e      	ldr	r3, [pc, #248]	; (8009554 <__ieee754_pow+0x264>)
 800945a:	4599      	cmp	r9, r3
 800945c:	d10c      	bne.n	8009478 <__ieee754_pow+0x188>
 800945e:	2d00      	cmp	r5, #0
 8009460:	db0a      	blt.n	8009478 <__ieee754_pow+0x188>
 8009462:	ec47 6b10 	vmov	d0, r6, r7
 8009466:	b009      	add	sp, #36	; 0x24
 8009468:	ecbd 8b06 	vpop	{d8-d10}
 800946c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	f000 bd20 	b.w	8009eb4 <__ieee754_sqrt>
 8009474:	2300      	movs	r3, #0
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	ec47 6b10 	vmov	d0, r6, r7
 800947c:	f000 fc62 	bl	8009d44 <fabs>
 8009480:	ec51 0b10 	vmov	r0, r1, d0
 8009484:	f1ba 0f00 	cmp.w	sl, #0
 8009488:	d129      	bne.n	80094de <__ieee754_pow+0x1ee>
 800948a:	b124      	cbz	r4, 8009496 <__ieee754_pow+0x1a6>
 800948c:	4b2f      	ldr	r3, [pc, #188]	; (800954c <__ieee754_pow+0x25c>)
 800948e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009492:	429a      	cmp	r2, r3
 8009494:	d123      	bne.n	80094de <__ieee754_pow+0x1ee>
 8009496:	f1b9 0f00 	cmp.w	r9, #0
 800949a:	da05      	bge.n	80094a8 <__ieee754_pow+0x1b8>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	2000      	movs	r0, #0
 80094a2:	492a      	ldr	r1, [pc, #168]	; (800954c <__ieee754_pow+0x25c>)
 80094a4:	f7f7 f9f2 	bl	800088c <__aeabi_ddiv>
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	f6bf af40 	bge.w	800932e <__ieee754_pow+0x3e>
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80094b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094b8:	431c      	orrs	r4, r3
 80094ba:	d108      	bne.n	80094ce <__ieee754_pow+0x1de>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4610      	mov	r0, r2
 80094c2:	4619      	mov	r1, r3
 80094c4:	f7f6 ff00 	bl	80002c8 <__aeabi_dsub>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e78f      	b.n	80093ee <__ieee754_pow+0xfe>
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	f47f af2c 	bne.w	800932e <__ieee754_pow+0x3e>
 80094d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094da:	4619      	mov	r1, r3
 80094dc:	e727      	b.n	800932e <__ieee754_pow+0x3e>
 80094de:	0feb      	lsrs	r3, r5, #31
 80094e0:	3b01      	subs	r3, #1
 80094e2:	9306      	str	r3, [sp, #24]
 80094e4:	9a06      	ldr	r2, [sp, #24]
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	d102      	bne.n	80094f2 <__ieee754_pow+0x202>
 80094ec:	4632      	mov	r2, r6
 80094ee:	463b      	mov	r3, r7
 80094f0:	e7e6      	b.n	80094c0 <__ieee754_pow+0x1d0>
 80094f2:	4b19      	ldr	r3, [pc, #100]	; (8009558 <__ieee754_pow+0x268>)
 80094f4:	4598      	cmp	r8, r3
 80094f6:	f340 80fb 	ble.w	80096f0 <__ieee754_pow+0x400>
 80094fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80094fe:	4598      	cmp	r8, r3
 8009500:	4b13      	ldr	r3, [pc, #76]	; (8009550 <__ieee754_pow+0x260>)
 8009502:	dd0c      	ble.n	800951e <__ieee754_pow+0x22e>
 8009504:	429c      	cmp	r4, r3
 8009506:	dc0f      	bgt.n	8009528 <__ieee754_pow+0x238>
 8009508:	f1b9 0f00 	cmp.w	r9, #0
 800950c:	da0f      	bge.n	800952e <__ieee754_pow+0x23e>
 800950e:	2000      	movs	r0, #0
 8009510:	b009      	add	sp, #36	; 0x24
 8009512:	ecbd 8b06 	vpop	{d8-d10}
 8009516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951a:	f000 bcc2 	b.w	8009ea2 <__math_oflow>
 800951e:	429c      	cmp	r4, r3
 8009520:	dbf2      	blt.n	8009508 <__ieee754_pow+0x218>
 8009522:	4b0a      	ldr	r3, [pc, #40]	; (800954c <__ieee754_pow+0x25c>)
 8009524:	429c      	cmp	r4, r3
 8009526:	dd19      	ble.n	800955c <__ieee754_pow+0x26c>
 8009528:	f1b9 0f00 	cmp.w	r9, #0
 800952c:	dcef      	bgt.n	800950e <__ieee754_pow+0x21e>
 800952e:	2000      	movs	r0, #0
 8009530:	b009      	add	sp, #36	; 0x24
 8009532:	ecbd 8b06 	vpop	{d8-d10}
 8009536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953a:	f000 bca9 	b.w	8009e90 <__math_uflow>
 800953e:	bf00      	nop
 8009540:	fff00000 	.word	0xfff00000
 8009544:	7ff00000 	.word	0x7ff00000
 8009548:	433fffff 	.word	0x433fffff
 800954c:	3ff00000 	.word	0x3ff00000
 8009550:	3fefffff 	.word	0x3fefffff
 8009554:	3fe00000 	.word	0x3fe00000
 8009558:	41e00000 	.word	0x41e00000
 800955c:	4b60      	ldr	r3, [pc, #384]	; (80096e0 <__ieee754_pow+0x3f0>)
 800955e:	2200      	movs	r2, #0
 8009560:	f7f6 feb2 	bl	80002c8 <__aeabi_dsub>
 8009564:	a354      	add	r3, pc, #336	; (adr r3, 80096b8 <__ieee754_pow+0x3c8>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	4604      	mov	r4, r0
 800956c:	460d      	mov	r5, r1
 800956e:	f7f7 f863 	bl	8000638 <__aeabi_dmul>
 8009572:	a353      	add	r3, pc, #332	; (adr r3, 80096c0 <__ieee754_pow+0x3d0>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	4606      	mov	r6, r0
 800957a:	460f      	mov	r7, r1
 800957c:	4620      	mov	r0, r4
 800957e:	4629      	mov	r1, r5
 8009580:	f7f7 f85a 	bl	8000638 <__aeabi_dmul>
 8009584:	4b57      	ldr	r3, [pc, #348]	; (80096e4 <__ieee754_pow+0x3f4>)
 8009586:	4682      	mov	sl, r0
 8009588:	468b      	mov	fp, r1
 800958a:	2200      	movs	r2, #0
 800958c:	4620      	mov	r0, r4
 800958e:	4629      	mov	r1, r5
 8009590:	f7f7 f852 	bl	8000638 <__aeabi_dmul>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	a14b      	add	r1, pc, #300	; (adr r1, 80096c8 <__ieee754_pow+0x3d8>)
 800959a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800959e:	f7f6 fe93 	bl	80002c8 <__aeabi_dsub>
 80095a2:	4622      	mov	r2, r4
 80095a4:	462b      	mov	r3, r5
 80095a6:	f7f7 f847 	bl	8000638 <__aeabi_dmul>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	2000      	movs	r0, #0
 80095b0:	494d      	ldr	r1, [pc, #308]	; (80096e8 <__ieee754_pow+0x3f8>)
 80095b2:	f7f6 fe89 	bl	80002c8 <__aeabi_dsub>
 80095b6:	4622      	mov	r2, r4
 80095b8:	4680      	mov	r8, r0
 80095ba:	4689      	mov	r9, r1
 80095bc:	462b      	mov	r3, r5
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f7 f839 	bl	8000638 <__aeabi_dmul>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f7 f833 	bl	8000638 <__aeabi_dmul>
 80095d2:	a33f      	add	r3, pc, #252	; (adr r3, 80096d0 <__ieee754_pow+0x3e0>)
 80095d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d8:	f7f7 f82e 	bl	8000638 <__aeabi_dmul>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4650      	mov	r0, sl
 80095e2:	4659      	mov	r1, fp
 80095e4:	f7f6 fe70 	bl	80002c8 <__aeabi_dsub>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4680      	mov	r8, r0
 80095ee:	4689      	mov	r9, r1
 80095f0:	4630      	mov	r0, r6
 80095f2:	4639      	mov	r1, r7
 80095f4:	f7f6 fe6a 	bl	80002cc <__adddf3>
 80095f8:	2000      	movs	r0, #0
 80095fa:	4632      	mov	r2, r6
 80095fc:	463b      	mov	r3, r7
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	f7f6 fe61 	bl	80002c8 <__aeabi_dsub>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4640      	mov	r0, r8
 800960c:	4649      	mov	r1, r9
 800960e:	f7f6 fe5b 	bl	80002c8 <__aeabi_dsub>
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	9a06      	ldr	r2, [sp, #24]
 8009616:	3b01      	subs	r3, #1
 8009618:	4313      	orrs	r3, r2
 800961a:	4682      	mov	sl, r0
 800961c:	468b      	mov	fp, r1
 800961e:	f040 81e7 	bne.w	80099f0 <__ieee754_pow+0x700>
 8009622:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80096d8 <__ieee754_pow+0x3e8>
 8009626:	eeb0 8a47 	vmov.f32	s16, s14
 800962a:	eef0 8a67 	vmov.f32	s17, s15
 800962e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009632:	2600      	movs	r6, #0
 8009634:	4632      	mov	r2, r6
 8009636:	463b      	mov	r3, r7
 8009638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800963c:	f7f6 fe44 	bl	80002c8 <__aeabi_dsub>
 8009640:	4622      	mov	r2, r4
 8009642:	462b      	mov	r3, r5
 8009644:	f7f6 fff8 	bl	8000638 <__aeabi_dmul>
 8009648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800964c:	4680      	mov	r8, r0
 800964e:	4689      	mov	r9, r1
 8009650:	4650      	mov	r0, sl
 8009652:	4659      	mov	r1, fp
 8009654:	f7f6 fff0 	bl	8000638 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4640      	mov	r0, r8
 800965e:	4649      	mov	r1, r9
 8009660:	f7f6 fe34 	bl	80002cc <__adddf3>
 8009664:	4632      	mov	r2, r6
 8009666:	463b      	mov	r3, r7
 8009668:	4680      	mov	r8, r0
 800966a:	4689      	mov	r9, r1
 800966c:	4620      	mov	r0, r4
 800966e:	4629      	mov	r1, r5
 8009670:	f7f6 ffe2 	bl	8000638 <__aeabi_dmul>
 8009674:	460b      	mov	r3, r1
 8009676:	4604      	mov	r4, r0
 8009678:	460d      	mov	r5, r1
 800967a:	4602      	mov	r2, r0
 800967c:	4649      	mov	r1, r9
 800967e:	4640      	mov	r0, r8
 8009680:	f7f6 fe24 	bl	80002cc <__adddf3>
 8009684:	4b19      	ldr	r3, [pc, #100]	; (80096ec <__ieee754_pow+0x3fc>)
 8009686:	4299      	cmp	r1, r3
 8009688:	ec45 4b19 	vmov	d9, r4, r5
 800968c:	4606      	mov	r6, r0
 800968e:	460f      	mov	r7, r1
 8009690:	468b      	mov	fp, r1
 8009692:	f340 82f0 	ble.w	8009c76 <__ieee754_pow+0x986>
 8009696:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800969a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800969e:	4303      	orrs	r3, r0
 80096a0:	f000 81e4 	beq.w	8009a6c <__ieee754_pow+0x77c>
 80096a4:	ec51 0b18 	vmov	r0, r1, d8
 80096a8:	2200      	movs	r2, #0
 80096aa:	2300      	movs	r3, #0
 80096ac:	f7f7 fa36 	bl	8000b1c <__aeabi_dcmplt>
 80096b0:	3800      	subs	r0, #0
 80096b2:	bf18      	it	ne
 80096b4:	2001      	movne	r0, #1
 80096b6:	e72b      	b.n	8009510 <__ieee754_pow+0x220>
 80096b8:	60000000 	.word	0x60000000
 80096bc:	3ff71547 	.word	0x3ff71547
 80096c0:	f85ddf44 	.word	0xf85ddf44
 80096c4:	3e54ae0b 	.word	0x3e54ae0b
 80096c8:	55555555 	.word	0x55555555
 80096cc:	3fd55555 	.word	0x3fd55555
 80096d0:	652b82fe 	.word	0x652b82fe
 80096d4:	3ff71547 	.word	0x3ff71547
 80096d8:	00000000 	.word	0x00000000
 80096dc:	bff00000 	.word	0xbff00000
 80096e0:	3ff00000 	.word	0x3ff00000
 80096e4:	3fd00000 	.word	0x3fd00000
 80096e8:	3fe00000 	.word	0x3fe00000
 80096ec:	408fffff 	.word	0x408fffff
 80096f0:	4bd5      	ldr	r3, [pc, #852]	; (8009a48 <__ieee754_pow+0x758>)
 80096f2:	402b      	ands	r3, r5
 80096f4:	2200      	movs	r2, #0
 80096f6:	b92b      	cbnz	r3, 8009704 <__ieee754_pow+0x414>
 80096f8:	4bd4      	ldr	r3, [pc, #848]	; (8009a4c <__ieee754_pow+0x75c>)
 80096fa:	f7f6 ff9d 	bl	8000638 <__aeabi_dmul>
 80096fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009702:	460c      	mov	r4, r1
 8009704:	1523      	asrs	r3, r4, #20
 8009706:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800970a:	4413      	add	r3, r2
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	4bd0      	ldr	r3, [pc, #832]	; (8009a50 <__ieee754_pow+0x760>)
 8009710:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009714:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009718:	429c      	cmp	r4, r3
 800971a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800971e:	dd08      	ble.n	8009732 <__ieee754_pow+0x442>
 8009720:	4bcc      	ldr	r3, [pc, #816]	; (8009a54 <__ieee754_pow+0x764>)
 8009722:	429c      	cmp	r4, r3
 8009724:	f340 8162 	ble.w	80099ec <__ieee754_pow+0x6fc>
 8009728:	9b05      	ldr	r3, [sp, #20]
 800972a:	3301      	adds	r3, #1
 800972c:	9305      	str	r3, [sp, #20]
 800972e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009732:	2400      	movs	r4, #0
 8009734:	00e3      	lsls	r3, r4, #3
 8009736:	9307      	str	r3, [sp, #28]
 8009738:	4bc7      	ldr	r3, [pc, #796]	; (8009a58 <__ieee754_pow+0x768>)
 800973a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800973e:	ed93 7b00 	vldr	d7, [r3]
 8009742:	4629      	mov	r1, r5
 8009744:	ec53 2b17 	vmov	r2, r3, d7
 8009748:	eeb0 9a47 	vmov.f32	s18, s14
 800974c:	eef0 9a67 	vmov.f32	s19, s15
 8009750:	4682      	mov	sl, r0
 8009752:	f7f6 fdb9 	bl	80002c8 <__aeabi_dsub>
 8009756:	4652      	mov	r2, sl
 8009758:	4606      	mov	r6, r0
 800975a:	460f      	mov	r7, r1
 800975c:	462b      	mov	r3, r5
 800975e:	ec51 0b19 	vmov	r0, r1, d9
 8009762:	f7f6 fdb3 	bl	80002cc <__adddf3>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	2000      	movs	r0, #0
 800976c:	49bb      	ldr	r1, [pc, #748]	; (8009a5c <__ieee754_pow+0x76c>)
 800976e:	f7f7 f88d 	bl	800088c <__aeabi_ddiv>
 8009772:	ec41 0b1a 	vmov	d10, r0, r1
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	4630      	mov	r0, r6
 800977c:	4639      	mov	r1, r7
 800977e:	f7f6 ff5b 	bl	8000638 <__aeabi_dmul>
 8009782:	2300      	movs	r3, #0
 8009784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009788:	9302      	str	r3, [sp, #8]
 800978a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800978e:	46ab      	mov	fp, r5
 8009790:	106d      	asrs	r5, r5, #1
 8009792:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009796:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800979a:	ec41 0b18 	vmov	d8, r0, r1
 800979e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80097a2:	2200      	movs	r2, #0
 80097a4:	4640      	mov	r0, r8
 80097a6:	4649      	mov	r1, r9
 80097a8:	4614      	mov	r4, r2
 80097aa:	461d      	mov	r5, r3
 80097ac:	f7f6 ff44 	bl	8000638 <__aeabi_dmul>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4630      	mov	r0, r6
 80097b6:	4639      	mov	r1, r7
 80097b8:	f7f6 fd86 	bl	80002c8 <__aeabi_dsub>
 80097bc:	ec53 2b19 	vmov	r2, r3, d9
 80097c0:	4606      	mov	r6, r0
 80097c2:	460f      	mov	r7, r1
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	f7f6 fd7e 	bl	80002c8 <__aeabi_dsub>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4650      	mov	r0, sl
 80097d2:	4659      	mov	r1, fp
 80097d4:	f7f6 fd78 	bl	80002c8 <__aeabi_dsub>
 80097d8:	4642      	mov	r2, r8
 80097da:	464b      	mov	r3, r9
 80097dc:	f7f6 ff2c 	bl	8000638 <__aeabi_dmul>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4630      	mov	r0, r6
 80097e6:	4639      	mov	r1, r7
 80097e8:	f7f6 fd6e 	bl	80002c8 <__aeabi_dsub>
 80097ec:	ec53 2b1a 	vmov	r2, r3, d10
 80097f0:	f7f6 ff22 	bl	8000638 <__aeabi_dmul>
 80097f4:	ec53 2b18 	vmov	r2, r3, d8
 80097f8:	ec41 0b19 	vmov	d9, r0, r1
 80097fc:	ec51 0b18 	vmov	r0, r1, d8
 8009800:	f7f6 ff1a 	bl	8000638 <__aeabi_dmul>
 8009804:	a37c      	add	r3, pc, #496	; (adr r3, 80099f8 <__ieee754_pow+0x708>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	4604      	mov	r4, r0
 800980c:	460d      	mov	r5, r1
 800980e:	f7f6 ff13 	bl	8000638 <__aeabi_dmul>
 8009812:	a37b      	add	r3, pc, #492	; (adr r3, 8009a00 <__ieee754_pow+0x710>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f7f6 fd58 	bl	80002cc <__adddf3>
 800981c:	4622      	mov	r2, r4
 800981e:	462b      	mov	r3, r5
 8009820:	f7f6 ff0a 	bl	8000638 <__aeabi_dmul>
 8009824:	a378      	add	r3, pc, #480	; (adr r3, 8009a08 <__ieee754_pow+0x718>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f7f6 fd4f 	bl	80002cc <__adddf3>
 800982e:	4622      	mov	r2, r4
 8009830:	462b      	mov	r3, r5
 8009832:	f7f6 ff01 	bl	8000638 <__aeabi_dmul>
 8009836:	a376      	add	r3, pc, #472	; (adr r3, 8009a10 <__ieee754_pow+0x720>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	f7f6 fd46 	bl	80002cc <__adddf3>
 8009840:	4622      	mov	r2, r4
 8009842:	462b      	mov	r3, r5
 8009844:	f7f6 fef8 	bl	8000638 <__aeabi_dmul>
 8009848:	a373      	add	r3, pc, #460	; (adr r3, 8009a18 <__ieee754_pow+0x728>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f7f6 fd3d 	bl	80002cc <__adddf3>
 8009852:	4622      	mov	r2, r4
 8009854:	462b      	mov	r3, r5
 8009856:	f7f6 feef 	bl	8000638 <__aeabi_dmul>
 800985a:	a371      	add	r3, pc, #452	; (adr r3, 8009a20 <__ieee754_pow+0x730>)
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f7f6 fd34 	bl	80002cc <__adddf3>
 8009864:	4622      	mov	r2, r4
 8009866:	4606      	mov	r6, r0
 8009868:	460f      	mov	r7, r1
 800986a:	462b      	mov	r3, r5
 800986c:	4620      	mov	r0, r4
 800986e:	4629      	mov	r1, r5
 8009870:	f7f6 fee2 	bl	8000638 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	f7f6 fedc 	bl	8000638 <__aeabi_dmul>
 8009880:	4642      	mov	r2, r8
 8009882:	4604      	mov	r4, r0
 8009884:	460d      	mov	r5, r1
 8009886:	464b      	mov	r3, r9
 8009888:	ec51 0b18 	vmov	r0, r1, d8
 800988c:	f7f6 fd1e 	bl	80002cc <__adddf3>
 8009890:	ec53 2b19 	vmov	r2, r3, d9
 8009894:	f7f6 fed0 	bl	8000638 <__aeabi_dmul>
 8009898:	4622      	mov	r2, r4
 800989a:	462b      	mov	r3, r5
 800989c:	f7f6 fd16 	bl	80002cc <__adddf3>
 80098a0:	4642      	mov	r2, r8
 80098a2:	4682      	mov	sl, r0
 80098a4:	468b      	mov	fp, r1
 80098a6:	464b      	mov	r3, r9
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f6 fec4 	bl	8000638 <__aeabi_dmul>
 80098b0:	4b6b      	ldr	r3, [pc, #428]	; (8009a60 <__ieee754_pow+0x770>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	4606      	mov	r6, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	f7f6 fd08 	bl	80002cc <__adddf3>
 80098bc:	4652      	mov	r2, sl
 80098be:	465b      	mov	r3, fp
 80098c0:	f7f6 fd04 	bl	80002cc <__adddf3>
 80098c4:	2000      	movs	r0, #0
 80098c6:	4604      	mov	r4, r0
 80098c8:	460d      	mov	r5, r1
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	4640      	mov	r0, r8
 80098d0:	4649      	mov	r1, r9
 80098d2:	f7f6 feb1 	bl	8000638 <__aeabi_dmul>
 80098d6:	4b62      	ldr	r3, [pc, #392]	; (8009a60 <__ieee754_pow+0x770>)
 80098d8:	4680      	mov	r8, r0
 80098da:	4689      	mov	r9, r1
 80098dc:	2200      	movs	r2, #0
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f6 fcf1 	bl	80002c8 <__aeabi_dsub>
 80098e6:	4632      	mov	r2, r6
 80098e8:	463b      	mov	r3, r7
 80098ea:	f7f6 fced 	bl	80002c8 <__aeabi_dsub>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4650      	mov	r0, sl
 80098f4:	4659      	mov	r1, fp
 80098f6:	f7f6 fce7 	bl	80002c8 <__aeabi_dsub>
 80098fa:	ec53 2b18 	vmov	r2, r3, d8
 80098fe:	f7f6 fe9b 	bl	8000638 <__aeabi_dmul>
 8009902:	4622      	mov	r2, r4
 8009904:	4606      	mov	r6, r0
 8009906:	460f      	mov	r7, r1
 8009908:	462b      	mov	r3, r5
 800990a:	ec51 0b19 	vmov	r0, r1, d9
 800990e:	f7f6 fe93 	bl	8000638 <__aeabi_dmul>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f6 fcd7 	bl	80002cc <__adddf3>
 800991e:	4606      	mov	r6, r0
 8009920:	460f      	mov	r7, r1
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4640      	mov	r0, r8
 8009928:	4649      	mov	r1, r9
 800992a:	f7f6 fccf 	bl	80002cc <__adddf3>
 800992e:	a33e      	add	r3, pc, #248	; (adr r3, 8009a28 <__ieee754_pow+0x738>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	2000      	movs	r0, #0
 8009936:	4604      	mov	r4, r0
 8009938:	460d      	mov	r5, r1
 800993a:	f7f6 fe7d 	bl	8000638 <__aeabi_dmul>
 800993e:	4642      	mov	r2, r8
 8009940:	ec41 0b18 	vmov	d8, r0, r1
 8009944:	464b      	mov	r3, r9
 8009946:	4620      	mov	r0, r4
 8009948:	4629      	mov	r1, r5
 800994a:	f7f6 fcbd 	bl	80002c8 <__aeabi_dsub>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4630      	mov	r0, r6
 8009954:	4639      	mov	r1, r7
 8009956:	f7f6 fcb7 	bl	80002c8 <__aeabi_dsub>
 800995a:	a335      	add	r3, pc, #212	; (adr r3, 8009a30 <__ieee754_pow+0x740>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f7f6 fe6a 	bl	8000638 <__aeabi_dmul>
 8009964:	a334      	add	r3, pc, #208	; (adr r3, 8009a38 <__ieee754_pow+0x748>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	4606      	mov	r6, r0
 800996c:	460f      	mov	r7, r1
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f6 fe61 	bl	8000638 <__aeabi_dmul>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4630      	mov	r0, r6
 800997c:	4639      	mov	r1, r7
 800997e:	f7f6 fca5 	bl	80002cc <__adddf3>
 8009982:	9a07      	ldr	r2, [sp, #28]
 8009984:	4b37      	ldr	r3, [pc, #220]	; (8009a64 <__ieee754_pow+0x774>)
 8009986:	4413      	add	r3, r2
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f6 fc9e 	bl	80002cc <__adddf3>
 8009990:	4682      	mov	sl, r0
 8009992:	9805      	ldr	r0, [sp, #20]
 8009994:	468b      	mov	fp, r1
 8009996:	f7f6 fde5 	bl	8000564 <__aeabi_i2d>
 800999a:	9a07      	ldr	r2, [sp, #28]
 800999c:	4b32      	ldr	r3, [pc, #200]	; (8009a68 <__ieee754_pow+0x778>)
 800999e:	4413      	add	r3, r2
 80099a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	4652      	mov	r2, sl
 80099aa:	465b      	mov	r3, fp
 80099ac:	ec51 0b18 	vmov	r0, r1, d8
 80099b0:	f7f6 fc8c 	bl	80002cc <__adddf3>
 80099b4:	4642      	mov	r2, r8
 80099b6:	464b      	mov	r3, r9
 80099b8:	f7f6 fc88 	bl	80002cc <__adddf3>
 80099bc:	4632      	mov	r2, r6
 80099be:	463b      	mov	r3, r7
 80099c0:	f7f6 fc84 	bl	80002cc <__adddf3>
 80099c4:	2000      	movs	r0, #0
 80099c6:	4632      	mov	r2, r6
 80099c8:	463b      	mov	r3, r7
 80099ca:	4604      	mov	r4, r0
 80099cc:	460d      	mov	r5, r1
 80099ce:	f7f6 fc7b 	bl	80002c8 <__aeabi_dsub>
 80099d2:	4642      	mov	r2, r8
 80099d4:	464b      	mov	r3, r9
 80099d6:	f7f6 fc77 	bl	80002c8 <__aeabi_dsub>
 80099da:	ec53 2b18 	vmov	r2, r3, d8
 80099de:	f7f6 fc73 	bl	80002c8 <__aeabi_dsub>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4650      	mov	r0, sl
 80099e8:	4659      	mov	r1, fp
 80099ea:	e610      	b.n	800960e <__ieee754_pow+0x31e>
 80099ec:	2401      	movs	r4, #1
 80099ee:	e6a1      	b.n	8009734 <__ieee754_pow+0x444>
 80099f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009a40 <__ieee754_pow+0x750>
 80099f4:	e617      	b.n	8009626 <__ieee754_pow+0x336>
 80099f6:	bf00      	nop
 80099f8:	4a454eef 	.word	0x4a454eef
 80099fc:	3fca7e28 	.word	0x3fca7e28
 8009a00:	93c9db65 	.word	0x93c9db65
 8009a04:	3fcd864a 	.word	0x3fcd864a
 8009a08:	a91d4101 	.word	0xa91d4101
 8009a0c:	3fd17460 	.word	0x3fd17460
 8009a10:	518f264d 	.word	0x518f264d
 8009a14:	3fd55555 	.word	0x3fd55555
 8009a18:	db6fabff 	.word	0xdb6fabff
 8009a1c:	3fdb6db6 	.word	0x3fdb6db6
 8009a20:	33333303 	.word	0x33333303
 8009a24:	3fe33333 	.word	0x3fe33333
 8009a28:	e0000000 	.word	0xe0000000
 8009a2c:	3feec709 	.word	0x3feec709
 8009a30:	dc3a03fd 	.word	0xdc3a03fd
 8009a34:	3feec709 	.word	0x3feec709
 8009a38:	145b01f5 	.word	0x145b01f5
 8009a3c:	be3e2fe0 	.word	0xbe3e2fe0
 8009a40:	00000000 	.word	0x00000000
 8009a44:	3ff00000 	.word	0x3ff00000
 8009a48:	7ff00000 	.word	0x7ff00000
 8009a4c:	43400000 	.word	0x43400000
 8009a50:	0003988e 	.word	0x0003988e
 8009a54:	000bb679 	.word	0x000bb679
 8009a58:	0800a5b8 	.word	0x0800a5b8
 8009a5c:	3ff00000 	.word	0x3ff00000
 8009a60:	40080000 	.word	0x40080000
 8009a64:	0800a5d8 	.word	0x0800a5d8
 8009a68:	0800a5c8 	.word	0x0800a5c8
 8009a6c:	a3b3      	add	r3, pc, #716	; (adr r3, 8009d3c <__ieee754_pow+0xa4c>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	4640      	mov	r0, r8
 8009a74:	4649      	mov	r1, r9
 8009a76:	f7f6 fc29 	bl	80002cc <__adddf3>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	ec41 0b1a 	vmov	d10, r0, r1
 8009a80:	462b      	mov	r3, r5
 8009a82:	4630      	mov	r0, r6
 8009a84:	4639      	mov	r1, r7
 8009a86:	f7f6 fc1f 	bl	80002c8 <__aeabi_dsub>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	ec51 0b1a 	vmov	r0, r1, d10
 8009a92:	f7f7 f861 	bl	8000b58 <__aeabi_dcmpgt>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f47f ae04 	bne.w	80096a4 <__ieee754_pow+0x3b4>
 8009a9c:	4aa2      	ldr	r2, [pc, #648]	; (8009d28 <__ieee754_pow+0xa38>)
 8009a9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	f340 8107 	ble.w	8009cb6 <__ieee754_pow+0x9c6>
 8009aa8:	151b      	asrs	r3, r3, #20
 8009aaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009aae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009ab2:	fa4a fa03 	asr.w	sl, sl, r3
 8009ab6:	44da      	add	sl, fp
 8009ab8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009abc:	489b      	ldr	r0, [pc, #620]	; (8009d2c <__ieee754_pow+0xa3c>)
 8009abe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009ac2:	4108      	asrs	r0, r1
 8009ac4:	ea00 030a 	and.w	r3, r0, sl
 8009ac8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009acc:	f1c1 0114 	rsb	r1, r1, #20
 8009ad0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009ad4:	fa4a fa01 	asr.w	sl, sl, r1
 8009ad8:	f1bb 0f00 	cmp.w	fp, #0
 8009adc:	f04f 0200 	mov.w	r2, #0
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	bfb8      	it	lt
 8009ae6:	f1ca 0a00 	rsblt	sl, sl, #0
 8009aea:	f7f6 fbed 	bl	80002c8 <__aeabi_dsub>
 8009aee:	ec41 0b19 	vmov	d9, r0, r1
 8009af2:	4642      	mov	r2, r8
 8009af4:	464b      	mov	r3, r9
 8009af6:	ec51 0b19 	vmov	r0, r1, d9
 8009afa:	f7f6 fbe7 	bl	80002cc <__adddf3>
 8009afe:	a37a      	add	r3, pc, #488	; (adr r3, 8009ce8 <__ieee754_pow+0x9f8>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	2000      	movs	r0, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	460d      	mov	r5, r1
 8009b0a:	f7f6 fd95 	bl	8000638 <__aeabi_dmul>
 8009b0e:	ec53 2b19 	vmov	r2, r3, d9
 8009b12:	4606      	mov	r6, r0
 8009b14:	460f      	mov	r7, r1
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fbd5 	bl	80002c8 <__aeabi_dsub>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4640      	mov	r0, r8
 8009b24:	4649      	mov	r1, r9
 8009b26:	f7f6 fbcf 	bl	80002c8 <__aeabi_dsub>
 8009b2a:	a371      	add	r3, pc, #452	; (adr r3, 8009cf0 <__ieee754_pow+0xa00>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fd82 	bl	8000638 <__aeabi_dmul>
 8009b34:	a370      	add	r3, pc, #448	; (adr r3, 8009cf8 <__ieee754_pow+0xa08>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	4689      	mov	r9, r1
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4629      	mov	r1, r5
 8009b42:	f7f6 fd79 	bl	8000638 <__aeabi_dmul>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	f7f6 fbbd 	bl	80002cc <__adddf3>
 8009b52:	4604      	mov	r4, r0
 8009b54:	460d      	mov	r5, r1
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	f7f6 fbb5 	bl	80002cc <__adddf3>
 8009b62:	4632      	mov	r2, r6
 8009b64:	463b      	mov	r3, r7
 8009b66:	4680      	mov	r8, r0
 8009b68:	4689      	mov	r9, r1
 8009b6a:	f7f6 fbad 	bl	80002c8 <__aeabi_dsub>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 fba7 	bl	80002c8 <__aeabi_dsub>
 8009b7a:	4642      	mov	r2, r8
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460f      	mov	r7, r1
 8009b80:	464b      	mov	r3, r9
 8009b82:	4640      	mov	r0, r8
 8009b84:	4649      	mov	r1, r9
 8009b86:	f7f6 fd57 	bl	8000638 <__aeabi_dmul>
 8009b8a:	a35d      	add	r3, pc, #372	; (adr r3, 8009d00 <__ieee754_pow+0xa10>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	4604      	mov	r4, r0
 8009b92:	460d      	mov	r5, r1
 8009b94:	f7f6 fd50 	bl	8000638 <__aeabi_dmul>
 8009b98:	a35b      	add	r3, pc, #364	; (adr r3, 8009d08 <__ieee754_pow+0xa18>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7f6 fb93 	bl	80002c8 <__aeabi_dsub>
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	462b      	mov	r3, r5
 8009ba6:	f7f6 fd47 	bl	8000638 <__aeabi_dmul>
 8009baa:	a359      	add	r3, pc, #356	; (adr r3, 8009d10 <__ieee754_pow+0xa20>)
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	f7f6 fb8c 	bl	80002cc <__adddf3>
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	462b      	mov	r3, r5
 8009bb8:	f7f6 fd3e 	bl	8000638 <__aeabi_dmul>
 8009bbc:	a356      	add	r3, pc, #344	; (adr r3, 8009d18 <__ieee754_pow+0xa28>)
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	f7f6 fb81 	bl	80002c8 <__aeabi_dsub>
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	462b      	mov	r3, r5
 8009bca:	f7f6 fd35 	bl	8000638 <__aeabi_dmul>
 8009bce:	a354      	add	r3, pc, #336	; (adr r3, 8009d20 <__ieee754_pow+0xa30>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 fb7a 	bl	80002cc <__adddf3>
 8009bd8:	4622      	mov	r2, r4
 8009bda:	462b      	mov	r3, r5
 8009bdc:	f7f6 fd2c 	bl	8000638 <__aeabi_dmul>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4640      	mov	r0, r8
 8009be6:	4649      	mov	r1, r9
 8009be8:	f7f6 fb6e 	bl	80002c8 <__aeabi_dsub>
 8009bec:	4604      	mov	r4, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	f7f6 fd1e 	bl	8000638 <__aeabi_dmul>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	ec41 0b19 	vmov	d9, r0, r1
 8009c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 fb5d 	bl	80002c8 <__aeabi_dsub>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	ec51 0b19 	vmov	r0, r1, d9
 8009c16:	f7f6 fe39 	bl	800088c <__aeabi_ddiv>
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	460d      	mov	r5, r1
 8009c20:	463b      	mov	r3, r7
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 fd07 	bl	8000638 <__aeabi_dmul>
 8009c2a:	4632      	mov	r2, r6
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	f7f6 fb4d 	bl	80002cc <__adddf3>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4620      	mov	r0, r4
 8009c38:	4629      	mov	r1, r5
 8009c3a:	f7f6 fb45 	bl	80002c8 <__aeabi_dsub>
 8009c3e:	4642      	mov	r2, r8
 8009c40:	464b      	mov	r3, r9
 8009c42:	f7f6 fb41 	bl	80002c8 <__aeabi_dsub>
 8009c46:	460b      	mov	r3, r1
 8009c48:	4602      	mov	r2, r0
 8009c4a:	4939      	ldr	r1, [pc, #228]	; (8009d30 <__ieee754_pow+0xa40>)
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f7f6 fb3b 	bl	80002c8 <__aeabi_dsub>
 8009c52:	ec41 0b10 	vmov	d0, r0, r1
 8009c56:	ee10 3a90 	vmov	r3, s1
 8009c5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c62:	da2b      	bge.n	8009cbc <__ieee754_pow+0x9cc>
 8009c64:	4650      	mov	r0, sl
 8009c66:	f000 f877 	bl	8009d58 <scalbn>
 8009c6a:	ec51 0b10 	vmov	r0, r1, d0
 8009c6e:	ec53 2b18 	vmov	r2, r3, d8
 8009c72:	f7ff bbee 	b.w	8009452 <__ieee754_pow+0x162>
 8009c76:	4b2f      	ldr	r3, [pc, #188]	; (8009d34 <__ieee754_pow+0xa44>)
 8009c78:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009c7c:	429e      	cmp	r6, r3
 8009c7e:	f77f af0d 	ble.w	8009a9c <__ieee754_pow+0x7ac>
 8009c82:	4b2d      	ldr	r3, [pc, #180]	; (8009d38 <__ieee754_pow+0xa48>)
 8009c84:	440b      	add	r3, r1
 8009c86:	4303      	orrs	r3, r0
 8009c88:	d009      	beq.n	8009c9e <__ieee754_pow+0x9ae>
 8009c8a:	ec51 0b18 	vmov	r0, r1, d8
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2300      	movs	r3, #0
 8009c92:	f7f6 ff43 	bl	8000b1c <__aeabi_dcmplt>
 8009c96:	3800      	subs	r0, #0
 8009c98:	bf18      	it	ne
 8009c9a:	2001      	movne	r0, #1
 8009c9c:	e448      	b.n	8009530 <__ieee754_pow+0x240>
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	f7f6 fb11 	bl	80002c8 <__aeabi_dsub>
 8009ca6:	4642      	mov	r2, r8
 8009ca8:	464b      	mov	r3, r9
 8009caa:	f7f6 ff4b 	bl	8000b44 <__aeabi_dcmpge>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f43f aef4 	beq.w	8009a9c <__ieee754_pow+0x7ac>
 8009cb4:	e7e9      	b.n	8009c8a <__ieee754_pow+0x99a>
 8009cb6:	f04f 0a00 	mov.w	sl, #0
 8009cba:	e71a      	b.n	8009af2 <__ieee754_pow+0x802>
 8009cbc:	ec51 0b10 	vmov	r0, r1, d0
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	e7d4      	b.n	8009c6e <__ieee754_pow+0x97e>
 8009cc4:	491a      	ldr	r1, [pc, #104]	; (8009d30 <__ieee754_pow+0xa40>)
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	f7ff bb31 	b.w	800932e <__ieee754_pow+0x3e>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	2100      	movs	r1, #0
 8009cd0:	f7ff bb2d 	b.w	800932e <__ieee754_pow+0x3e>
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	f7ff bb29 	b.w	800932e <__ieee754_pow+0x3e>
 8009cdc:	9204      	str	r2, [sp, #16]
 8009cde:	f7ff bb7b 	b.w	80093d8 <__ieee754_pow+0xe8>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f7ff bb65 	b.w	80093b2 <__ieee754_pow+0xc2>
 8009ce8:	00000000 	.word	0x00000000
 8009cec:	3fe62e43 	.word	0x3fe62e43
 8009cf0:	fefa39ef 	.word	0xfefa39ef
 8009cf4:	3fe62e42 	.word	0x3fe62e42
 8009cf8:	0ca86c39 	.word	0x0ca86c39
 8009cfc:	be205c61 	.word	0xbe205c61
 8009d00:	72bea4d0 	.word	0x72bea4d0
 8009d04:	3e663769 	.word	0x3e663769
 8009d08:	c5d26bf1 	.word	0xc5d26bf1
 8009d0c:	3ebbbd41 	.word	0x3ebbbd41
 8009d10:	af25de2c 	.word	0xaf25de2c
 8009d14:	3f11566a 	.word	0x3f11566a
 8009d18:	16bebd93 	.word	0x16bebd93
 8009d1c:	3f66c16c 	.word	0x3f66c16c
 8009d20:	5555553e 	.word	0x5555553e
 8009d24:	3fc55555 	.word	0x3fc55555
 8009d28:	3fe00000 	.word	0x3fe00000
 8009d2c:	fff00000 	.word	0xfff00000
 8009d30:	3ff00000 	.word	0x3ff00000
 8009d34:	4090cbff 	.word	0x4090cbff
 8009d38:	3f6f3400 	.word	0x3f6f3400
 8009d3c:	652b82fe 	.word	0x652b82fe
 8009d40:	3c971547 	.word	0x3c971547

08009d44 <fabs>:
 8009d44:	ec51 0b10 	vmov	r0, r1, d0
 8009d48:	ee10 2a10 	vmov	r2, s0
 8009d4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d50:	ec43 2b10 	vmov	d0, r2, r3
 8009d54:	4770      	bx	lr
	...

08009d58 <scalbn>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	ec55 4b10 	vmov	r4, r5, d0
 8009d5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009d62:	4606      	mov	r6, r0
 8009d64:	462b      	mov	r3, r5
 8009d66:	b999      	cbnz	r1, 8009d90 <scalbn+0x38>
 8009d68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d6c:	4323      	orrs	r3, r4
 8009d6e:	d03f      	beq.n	8009df0 <scalbn+0x98>
 8009d70:	4b35      	ldr	r3, [pc, #212]	; (8009e48 <scalbn+0xf0>)
 8009d72:	4629      	mov	r1, r5
 8009d74:	ee10 0a10 	vmov	r0, s0
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f7f6 fc5d 	bl	8000638 <__aeabi_dmul>
 8009d7e:	4b33      	ldr	r3, [pc, #204]	; (8009e4c <scalbn+0xf4>)
 8009d80:	429e      	cmp	r6, r3
 8009d82:	4604      	mov	r4, r0
 8009d84:	460d      	mov	r5, r1
 8009d86:	da10      	bge.n	8009daa <scalbn+0x52>
 8009d88:	a327      	add	r3, pc, #156	; (adr r3, 8009e28 <scalbn+0xd0>)
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	e01f      	b.n	8009dd0 <scalbn+0x78>
 8009d90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009d94:	4291      	cmp	r1, r2
 8009d96:	d10c      	bne.n	8009db2 <scalbn+0x5a>
 8009d98:	ee10 2a10 	vmov	r2, s0
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f7f6 fa94 	bl	80002cc <__adddf3>
 8009da4:	4604      	mov	r4, r0
 8009da6:	460d      	mov	r5, r1
 8009da8:	e022      	b.n	8009df0 <scalbn+0x98>
 8009daa:	460b      	mov	r3, r1
 8009dac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009db0:	3936      	subs	r1, #54	; 0x36
 8009db2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009db6:	4296      	cmp	r6, r2
 8009db8:	dd0d      	ble.n	8009dd6 <scalbn+0x7e>
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	a11c      	add	r1, pc, #112	; (adr r1, 8009e30 <scalbn+0xd8>)
 8009dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc2:	da02      	bge.n	8009dca <scalbn+0x72>
 8009dc4:	a11c      	add	r1, pc, #112	; (adr r1, 8009e38 <scalbn+0xe0>)
 8009dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dca:	a319      	add	r3, pc, #100	; (adr r3, 8009e30 <scalbn+0xd8>)
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	f7f6 fc32 	bl	8000638 <__aeabi_dmul>
 8009dd4:	e7e6      	b.n	8009da4 <scalbn+0x4c>
 8009dd6:	1872      	adds	r2, r6, r1
 8009dd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009ddc:	428a      	cmp	r2, r1
 8009dde:	dcec      	bgt.n	8009dba <scalbn+0x62>
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	dd08      	ble.n	8009df6 <scalbn+0x9e>
 8009de4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009de8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009dec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009df0:	ec45 4b10 	vmov	d0, r4, r5
 8009df4:	bd70      	pop	{r4, r5, r6, pc}
 8009df6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009dfa:	da08      	bge.n	8009e0e <scalbn+0xb6>
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	a10a      	add	r1, pc, #40	; (adr r1, 8009e28 <scalbn+0xd0>)
 8009e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e04:	dac0      	bge.n	8009d88 <scalbn+0x30>
 8009e06:	a10e      	add	r1, pc, #56	; (adr r1, 8009e40 <scalbn+0xe8>)
 8009e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0c:	e7bc      	b.n	8009d88 <scalbn+0x30>
 8009e0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e12:	3236      	adds	r2, #54	; 0x36
 8009e14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <scalbn+0xf8>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	e7d5      	b.n	8009dd0 <scalbn+0x78>
 8009e24:	f3af 8000 	nop.w
 8009e28:	c2f8f359 	.word	0xc2f8f359
 8009e2c:	01a56e1f 	.word	0x01a56e1f
 8009e30:	8800759c 	.word	0x8800759c
 8009e34:	7e37e43c 	.word	0x7e37e43c
 8009e38:	8800759c 	.word	0x8800759c
 8009e3c:	fe37e43c 	.word	0xfe37e43c
 8009e40:	c2f8f359 	.word	0xc2f8f359
 8009e44:	81a56e1f 	.word	0x81a56e1f
 8009e48:	43500000 	.word	0x43500000
 8009e4c:	ffff3cb0 	.word	0xffff3cb0
 8009e50:	3c900000 	.word	0x3c900000

08009e54 <with_errno>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	4604      	mov	r4, r0
 8009e58:	460d      	mov	r5, r1
 8009e5a:	4616      	mov	r6, r2
 8009e5c:	f7fb fa9a 	bl	8005394 <__errno>
 8009e60:	4629      	mov	r1, r5
 8009e62:	6006      	str	r6, [r0, #0]
 8009e64:	4620      	mov	r0, r4
 8009e66:	bd70      	pop	{r4, r5, r6, pc}

08009e68 <xflow>:
 8009e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e6a:	4614      	mov	r4, r2
 8009e6c:	461d      	mov	r5, r3
 8009e6e:	b108      	cbz	r0, 8009e74 <xflow+0xc>
 8009e70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e74:	e9cd 2300 	strd	r2, r3, [sp]
 8009e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 fbda 	bl	8000638 <__aeabi_dmul>
 8009e84:	2222      	movs	r2, #34	; 0x22
 8009e86:	b003      	add	sp, #12
 8009e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e8c:	f7ff bfe2 	b.w	8009e54 <with_errno>

08009e90 <__math_uflow>:
 8009e90:	b508      	push	{r3, lr}
 8009e92:	2200      	movs	r2, #0
 8009e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e98:	f7ff ffe6 	bl	8009e68 <xflow>
 8009e9c:	ec41 0b10 	vmov	d0, r0, r1
 8009ea0:	bd08      	pop	{r3, pc}

08009ea2 <__math_oflow>:
 8009ea2:	b508      	push	{r3, lr}
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009eaa:	f7ff ffdd 	bl	8009e68 <xflow>
 8009eae:	ec41 0b10 	vmov	d0, r0, r1
 8009eb2:	bd08      	pop	{r3, pc}

08009eb4 <__ieee754_sqrt>:
 8009eb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	ec55 4b10 	vmov	r4, r5, d0
 8009ebc:	4e67      	ldr	r6, [pc, #412]	; (800a05c <__ieee754_sqrt+0x1a8>)
 8009ebe:	43ae      	bics	r6, r5
 8009ec0:	ee10 0a10 	vmov	r0, s0
 8009ec4:	ee10 2a10 	vmov	r2, s0
 8009ec8:	4629      	mov	r1, r5
 8009eca:	462b      	mov	r3, r5
 8009ecc:	d10d      	bne.n	8009eea <__ieee754_sqrt+0x36>
 8009ece:	f7f6 fbb3 	bl	8000638 <__aeabi_dmul>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	4629      	mov	r1, r5
 8009eda:	f7f6 f9f7 	bl	80002cc <__adddf3>
 8009ede:	4604      	mov	r4, r0
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	ec45 4b10 	vmov	d0, r4, r5
 8009ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eea:	2d00      	cmp	r5, #0
 8009eec:	dc0b      	bgt.n	8009f06 <__ieee754_sqrt+0x52>
 8009eee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ef2:	4326      	orrs	r6, r4
 8009ef4:	d0f5      	beq.n	8009ee2 <__ieee754_sqrt+0x2e>
 8009ef6:	b135      	cbz	r5, 8009f06 <__ieee754_sqrt+0x52>
 8009ef8:	f7f6 f9e6 	bl	80002c8 <__aeabi_dsub>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	f7f6 fcc4 	bl	800088c <__aeabi_ddiv>
 8009f04:	e7eb      	b.n	8009ede <__ieee754_sqrt+0x2a>
 8009f06:	1509      	asrs	r1, r1, #20
 8009f08:	f000 808d 	beq.w	800a026 <__ieee754_sqrt+0x172>
 8009f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f10:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f18:	07c9      	lsls	r1, r1, #31
 8009f1a:	bf5c      	itt	pl
 8009f1c:	005b      	lslpl	r3, r3, #1
 8009f1e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009f22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f26:	bf58      	it	pl
 8009f28:	0052      	lslpl	r2, r2, #1
 8009f2a:	2500      	movs	r5, #0
 8009f2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009f30:	1076      	asrs	r6, r6, #1
 8009f32:	0052      	lsls	r2, r2, #1
 8009f34:	f04f 0e16 	mov.w	lr, #22
 8009f38:	46ac      	mov	ip, r5
 8009f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f3e:	eb0c 0001 	add.w	r0, ip, r1
 8009f42:	4298      	cmp	r0, r3
 8009f44:	bfde      	ittt	le
 8009f46:	1a1b      	suble	r3, r3, r0
 8009f48:	eb00 0c01 	addle.w	ip, r0, r1
 8009f4c:	186d      	addle	r5, r5, r1
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	f1be 0e01 	subs.w	lr, lr, #1
 8009f54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009f58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009f5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009f60:	d1ed      	bne.n	8009f3e <__ieee754_sqrt+0x8a>
 8009f62:	4674      	mov	r4, lr
 8009f64:	2720      	movs	r7, #32
 8009f66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009f6a:	4563      	cmp	r3, ip
 8009f6c:	eb01 000e 	add.w	r0, r1, lr
 8009f70:	dc02      	bgt.n	8009f78 <__ieee754_sqrt+0xc4>
 8009f72:	d113      	bne.n	8009f9c <__ieee754_sqrt+0xe8>
 8009f74:	4290      	cmp	r0, r2
 8009f76:	d811      	bhi.n	8009f9c <__ieee754_sqrt+0xe8>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	eb00 0e01 	add.w	lr, r0, r1
 8009f7e:	da57      	bge.n	800a030 <__ieee754_sqrt+0x17c>
 8009f80:	f1be 0f00 	cmp.w	lr, #0
 8009f84:	db54      	blt.n	800a030 <__ieee754_sqrt+0x17c>
 8009f86:	f10c 0801 	add.w	r8, ip, #1
 8009f8a:	eba3 030c 	sub.w	r3, r3, ip
 8009f8e:	4290      	cmp	r0, r2
 8009f90:	bf88      	it	hi
 8009f92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009f96:	1a12      	subs	r2, r2, r0
 8009f98:	440c      	add	r4, r1
 8009f9a:	46c4      	mov	ip, r8
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	3f01      	subs	r7, #1
 8009fa0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009fa4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009fa8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009fac:	d1dd      	bne.n	8009f6a <__ieee754_sqrt+0xb6>
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	d01b      	beq.n	8009fea <__ieee754_sqrt+0x136>
 8009fb2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a060 <__ieee754_sqrt+0x1ac>
 8009fb6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a064 <__ieee754_sqrt+0x1b0>
 8009fba:	e9da 0100 	ldrd	r0, r1, [sl]
 8009fbe:	e9db 2300 	ldrd	r2, r3, [fp]
 8009fc2:	f7f6 f981 	bl	80002c8 <__aeabi_dsub>
 8009fc6:	e9da 8900 	ldrd	r8, r9, [sl]
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4640      	mov	r0, r8
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	f7f6 fdad 	bl	8000b30 <__aeabi_dcmple>
 8009fd6:	b140      	cbz	r0, 8009fea <__ieee754_sqrt+0x136>
 8009fd8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009fdc:	e9da 0100 	ldrd	r0, r1, [sl]
 8009fe0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009fe4:	d126      	bne.n	800a034 <__ieee754_sqrt+0x180>
 8009fe6:	3501      	adds	r5, #1
 8009fe8:	463c      	mov	r4, r7
 8009fea:	106a      	asrs	r2, r5, #1
 8009fec:	0863      	lsrs	r3, r4, #1
 8009fee:	07e9      	lsls	r1, r5, #31
 8009ff0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009ff4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009ff8:	bf48      	it	mi
 8009ffa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009ffe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a002:	461c      	mov	r4, r3
 800a004:	e76d      	b.n	8009ee2 <__ieee754_sqrt+0x2e>
 800a006:	0ad3      	lsrs	r3, r2, #11
 800a008:	3815      	subs	r0, #21
 800a00a:	0552      	lsls	r2, r2, #21
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0fa      	beq.n	800a006 <__ieee754_sqrt+0x152>
 800a010:	02dc      	lsls	r4, r3, #11
 800a012:	d50a      	bpl.n	800a02a <__ieee754_sqrt+0x176>
 800a014:	f1c1 0420 	rsb	r4, r1, #32
 800a018:	fa22 f404 	lsr.w	r4, r2, r4
 800a01c:	1e4d      	subs	r5, r1, #1
 800a01e:	408a      	lsls	r2, r1
 800a020:	4323      	orrs	r3, r4
 800a022:	1b41      	subs	r1, r0, r5
 800a024:	e772      	b.n	8009f0c <__ieee754_sqrt+0x58>
 800a026:	4608      	mov	r0, r1
 800a028:	e7f0      	b.n	800a00c <__ieee754_sqrt+0x158>
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	3101      	adds	r1, #1
 800a02e:	e7ef      	b.n	800a010 <__ieee754_sqrt+0x15c>
 800a030:	46e0      	mov	r8, ip
 800a032:	e7aa      	b.n	8009f8a <__ieee754_sqrt+0xd6>
 800a034:	f7f6 f94a 	bl	80002cc <__adddf3>
 800a038:	e9da 8900 	ldrd	r8, r9, [sl]
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4640      	mov	r0, r8
 800a042:	4649      	mov	r1, r9
 800a044:	f7f6 fd6a 	bl	8000b1c <__aeabi_dcmplt>
 800a048:	b120      	cbz	r0, 800a054 <__ieee754_sqrt+0x1a0>
 800a04a:	1ca0      	adds	r0, r4, #2
 800a04c:	bf08      	it	eq
 800a04e:	3501      	addeq	r5, #1
 800a050:	3402      	adds	r4, #2
 800a052:	e7ca      	b.n	8009fea <__ieee754_sqrt+0x136>
 800a054:	3401      	adds	r4, #1
 800a056:	f024 0401 	bic.w	r4, r4, #1
 800a05a:	e7c6      	b.n	8009fea <__ieee754_sqrt+0x136>
 800a05c:	7ff00000 	.word	0x7ff00000
 800a060:	200001f0 	.word	0x200001f0
 800a064:	200001f8 	.word	0x200001f8

0800a068 <_init>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	bf00      	nop
 800a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06e:	bc08      	pop	{r3}
 800a070:	469e      	mov	lr, r3
 800a072:	4770      	bx	lr

0800a074 <_fini>:
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	bf00      	nop
 800a078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07a:	bc08      	pop	{r3}
 800a07c:	469e      	mov	lr, r3
 800a07e:	4770      	bx	lr
