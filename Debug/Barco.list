
Barco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800566c  0800566c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005674  08005674  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800567c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000005c  080056d8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080056d8  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fff5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdd  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be8  00000000  00000000  00032fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027a5  00000000  00000000  00033b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013411  00000000  00000000  00036335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4fce  00000000  00000000  00049746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004734  00000000  00000000  0011e714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00122e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055b8 	.word	0x080055b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080055b8 	.word	0x080055b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <HMC5883L_Init>:
 *      Author: Gustavo da Silva Gomes
 */

#include "HMC5883L.h"

HAL_StatusTypeDef HMC5883L_Init(HMC5883L_Config_t config) {
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b08b      	sub	sp, #44	; 0x2c
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	463c      	mov	r4, r7
 8000e00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t registerA = HMC5883L_REG_BIT_CRA7;
 8000e04:	2300      	movs	r3, #0
 8000e06:	75bb      	strb	r3, [r7, #22]
	registerA <<= 2;
 8000e08:	7dbb      	ldrb	r3, [r7, #22]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	75bb      	strb	r3, [r7, #22]
	registerA |= config.samplesNum;
 8000e10:	793a      	ldrb	r2, [r7, #4]
 8000e12:	7dbb      	ldrb	r3, [r7, #22]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	75bb      	strb	r3, [r7, #22]
	registerA <<= 3;
 8000e1a:	7dbb      	ldrb	r3, [r7, #22]
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	75bb      	strb	r3, [r7, #22]
	registerA |= config.dataOutputRate;
 8000e22:	797a      	ldrb	r2, [r7, #5]
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	75bb      	strb	r3, [r7, #22]
	registerA <<= 2;
 8000e2c:	7dbb      	ldrb	r3, [r7, #22]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	75bb      	strb	r3, [r7, #22]
	registerA |= config.measurementMode;
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	7dbb      	ldrb	r3, [r7, #22]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	75bb      	strb	r3, [r7, #22]

	uint8_t registerB = config.gain;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	757b      	strb	r3, [r7, #21]
	registerB <<= 5;
 8000e42:	7d7b      	ldrb	r3, [r7, #21]
 8000e44:	015b      	lsls	r3, r3, #5
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	757b      	strb	r3, [r7, #21]

	uint8_t registerMode = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	753b      	strb	r3, [r7, #20]
	registerMode |= config.operatingMode;
 8000e4e:	7a3a      	ldrb	r2, [r7, #8]
 8000e50:	7d3b      	ldrb	r3, [r7, #20]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	753b      	strb	r3, [r7, #20]

	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Write(config.handle, HMC5883L_DEVICE_ADDR, HMC5883L_REG_ADDR_A, I2C_MEMADD_SIZE_8BIT, &registerA, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000e58:	6838      	ldr	r0, [r7, #0]
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	2301      	movs	r3, #1
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	f107 0316 	add.w	r3, r7, #22
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	213c      	movs	r1, #60	; 0x3c
 8000e70:	f001 fa02 	bl	8002278 <HAL_I2C_Mem_Write>
 8000e74:	4603      	mov	r3, r0
 8000e76:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HMC5883L_Init+0x8a>
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	e025      	b.n	8000ece <HMC5883L_Init+0xd6>

	status = HAL_I2C_Mem_Write(config.handle, HMC5883L_DEVICE_ADDR, HMC5883L_REG_ADDR_B, I2C_MEMADD_SIZE_8BIT, &registerB, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000e82:	6838      	ldr	r0, [r7, #0]
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f107 0315 	add.w	r3, r7, #21
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	2201      	movs	r2, #1
 8000e98:	213c      	movs	r1, #60	; 0x3c
 8000e9a:	f001 f9ed 	bl	8002278 <HAL_I2C_Mem_Write>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HMC5883L_Init+0xb4>
 8000ea8:	7dfb      	ldrb	r3, [r7, #23]
 8000eaa:	e010      	b.n	8000ece <HMC5883L_Init+0xd6>

	status = HAL_I2C_Mem_Write(config.handle, HMC5883L_DEVICE_ADDR, HMC5883L_REG_ADDR_MODE, I2C_MEMADD_SIZE_8BIT, &registerMode, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000eac:	6838      	ldr	r0, [r7, #0]
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	213c      	movs	r1, #60	; 0x3c
 8000ec4:	f001 f9d8 	bl	8002278 <HAL_I2C_Mem_Write>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	75fb      	strb	r3, [r7, #23]
	return status;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd90      	pop	{r4, r7, pc}
	...

08000ed8 <HMC5883L_Read>:

HAL_StatusTypeDef HMC5883L_Read(HMC5883L_Config_t config, HMC5883L_Data_t *data) {
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b091      	sub	sp, #68	; 0x44
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	463c      	mov	r4, r7
 8000ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	HMC5883L_Status_t readyOrLocked = LOCKED;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// wait until data registers are unlocked
	while(readyOrLocked == LOCKED) {
 8000eea:	e017      	b.n	8000f1c <HMC5883L_Read+0x44>
		status = __HMC5883L_GetStatus(config, &readyOrLocked);
 8000eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef6:	f000 f95f 	bl	80011b8 <__HMC5883L_GetStatus>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(status != HAL_OK) return status;
 8000f00:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HMC5883L_Read+0x36>
 8000f08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f0c:	e0a6      	b.n	800105c <HMC5883L_Read+0x184>
		if(readyOrLocked == LOCKED) HAL_Delay(10);
 8000f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d102      	bne.n	8000f1c <HMC5883L_Read+0x44>
 8000f16:	200a      	movs	r0, #10
 8000f18:	f000 fdb2 	bl	8001a80 <HAL_Delay>
	while(readyOrLocked == LOCKED) {
 8000f1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d0e3      	beq.n	8000eec <HMC5883L_Read+0x14>
	}

	uint8_t addrsLow[3] = {HMC5883L_REG_ADDR_X_L, HMC5883L_REG_ADDR_Y_L, HMC5883L_REG_ADDR_Z_L};
 8000f24:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HMC5883L_Read+0x18c>)
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	8019      	strh	r1, [r3, #0]
 8000f30:	3302      	adds	r3, #2
 8000f32:	0c12      	lsrs	r2, r2, #16
 8000f34:	701a      	strb	r2, [r3, #0]
	uint8_t addrsHigh[3] = {HMC5883L_REG_ADDR_X_H, HMC5883L_REG_ADDR_Y_H, HMC5883L_REG_ADDR_Z_H};
 8000f36:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HMC5883L_Read+0x190>)
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	8019      	strh	r1, [r3, #0]
 8000f42:	3302      	adds	r3, #2
 8000f44:	0c12      	lsrs	r2, r2, #16
 8000f46:	701a      	strb	r2, [r3, #0]
	uint8_t axisArr[3] = {__HMC5883L_AXIS_X,__HMC5883L_AXIS_Y,__HMC5883L_AXIS_Z};
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HMC5883L_Read+0x194>)
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	4611      	mov	r1, r2
 8000f52:	8019      	strh	r1, [r3, #0]
 8000f54:	3302      	adds	r3, #2
 8000f56:	0c12      	lsrs	r2, r2, #16
 8000f58:	701a      	strb	r2, [r3, #0]

	uint8_t dataHigh = 0, dataLow = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	76fb      	strb	r3, [r7, #27]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	76bb      	strb	r3, [r7, #26]
	int16_t axisData = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t offsetData[3] = {config.calibration.x_offset, config.calibration.y_offset, config.calibration.z_offset};
 8000f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f6a:	82bb      	strh	r3, [r7, #20]
 8000f6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f70:	82fb      	strh	r3, [r7, #22]
 8000f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f76:	833b      	strh	r3, [r7, #24]

	for(int i=0; i<3; i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f7c:	e067      	b.n	800104e <HMC5883L_Read+0x176>
		// get most significant bits
		status = HAL_I2C_Mem_Read(config.handle, HMC5883L_DEVICE_ADDR, addrsHigh[i], I2C_MEMADD_SIZE_8BIT, &dataHigh, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f107 0220 	add.w	r2, r7, #32
 8000f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f86:	4413      	add	r3, r2
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f107 031b 	add.w	r3, r7, #27
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	213c      	movs	r1, #60	; 0x3c
 8000fa0:	f001 fa64 	bl	800246c <HAL_I2C_Mem_Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(status != HAL_OK) return status;
 8000faa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <HMC5883L_Read+0xe0>
 8000fb2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fb6:	e051      	b.n	800105c <HMC5883L_Read+0x184>
		// get less significant bits
		status = HAL_I2C_Mem_Read(config.handle, HMC5883L_DEVICE_ADDR, addrsLow[i], I2C_MEMADD_SIZE_8BIT, &dataLow, HMC5883L_BYTE_SZ, HAL_MAX_DELAY);
 8000fb8:	6838      	ldr	r0, [r7, #0]
 8000fba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	f107 031a 	add.w	r3, r7, #26
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	213c      	movs	r1, #60	; 0x3c
 8000fda:	f001 fa47 	bl	800246c <HAL_I2C_Mem_Read>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(status != HAL_OK) return status;
 8000fe4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HMC5883L_Read+0x11a>
 8000fec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000ff0:	e034      	b.n	800105c <HMC5883L_Read+0x184>

		axisData = dataHigh;
 8000ff2:	7efb      	ldrb	r3, [r7, #27]
 8000ff4:	857b      	strh	r3, [r7, #42]	; 0x2a
		axisData <<= 8;
 8000ff6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	857b      	strh	r3, [r7, #42]	; 0x2a
		axisData |= dataLow;
 8000ffe:	7ebb      	ldrb	r3, [r7, #26]
 8001000:	b21a      	sxth	r2, r3
 8001002:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001004:	4313      	orrs	r3, r2
 8001006:	857b      	strh	r3, [r7, #42]	; 0x2a

		axisData += offsetData[i];
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	3330      	adds	r3, #48	; 0x30
 800100e:	443b      	add	r3, r7
 8001010:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8001014:	b29a      	uxth	r2, r3
 8001016:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001018:	4413      	add	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	857b      	strh	r3, [r7, #42]	; 0x2a

		status = __HMC5883L_SetDataAxis(data, axisArr[i], axisData);
 800101e:	f107 021c 	add.w	r2, r7, #28
 8001022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800102c:	4619      	mov	r1, r3
 800102e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001030:	f000 f860 	bl	80010f4 <__HMC5883L_SetDataAxis>
 8001034:	4603      	mov	r3, r0
 8001036:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(status != HAL_OK) return status;
 800103a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HMC5883L_Read+0x170>
 8001042:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001046:	e009      	b.n	800105c <HMC5883L_Read+0x184>
	for(int i=0; i<3; i++) {
 8001048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104a:	3301      	adds	r3, #1
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	2b02      	cmp	r3, #2
 8001052:	dd94      	ble.n	8000f7e <HMC5883L_Read+0xa6>
	}

	__HMC5883L_SetDataAngles(data);
 8001054:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001056:	f000 f877 	bl	8001148 <__HMC5883L_SetDataAngles>

	return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3734      	adds	r7, #52	; 0x34
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	080055d0 	.word	0x080055d0
 8001068:	080055d4 	.word	0x080055d4
 800106c:	080055d8 	.word	0x080055d8

08001070 <HMC5883L_GetCalibrationData>:
/**
 * Creates CSV format data, with collected points of x, y and z data. This data can be used with other software,
 * such as Matlab, Excel, R, etc, to get the center point of the measured data and apply the found offsets to the
 * HMC5883LCalibration_t in the HMC5883LConfig_t struct.
 */
void HMC5883L_GetCalibrationData(HMC5883L_Config_t config, UART_HandleTypeDef *huart) {
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b093      	sub	sp, #76	; 0x4c
 8001074:	af02      	add	r7, sp, #8
 8001076:	463c      	mov	r4, r7
 8001078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	volatile int32_t num_collected = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HMC5883L_Data_t data = {0,0,0,0,0};
 8001080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
	char transmitStr[22];

	while(num_collected < 2000) {
 800108e:	e026      	b.n	80010de <HMC5883L_GetCalibrationData+0x6e>
		HMC5883L_Read(config, &data);
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	463b      	mov	r3, r7
 8001098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800109a:	f7ff ff1d 	bl	8000ed8 <HMC5883L_Read>
		sprintf(transmitStr,"%i, %i, %i\n", data.x, data.y, data.z);
 800109e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010a0:	461a      	mov	r2, r3
 80010a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010a4:	4619      	mov	r1, r3
 80010a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	460b      	mov	r3, r1
 80010b0:	490f      	ldr	r1, [pc, #60]	; (80010f0 <HMC5883L_GetCalibrationData+0x80>)
 80010b2:	f003 fd0b 	bl	8004acc <siprintf>

		HAL_UART_Transmit(huart, (uint8_t*)transmitStr, strlen(transmitStr), HAL_MAX_DELAY);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f8a8 	bl	8000210 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f107 0114 	add.w	r1, r7, #20
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80010ce:	f003 f8dc 	bl	800428a <HAL_UART_Transmit>
		HAL_Delay(20);
 80010d2:	2014      	movs	r0, #20
 80010d4:	f000 fcd4 	bl	8001a80 <HAL_Delay>
		num_collected++;
 80010d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010da:	3301      	adds	r3, #1
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(num_collected < 2000) {
 80010de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010e4:	dbd4      	blt.n	8001090 <HMC5883L_GetCalibrationData+0x20>
	}
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3744      	adds	r7, #68	; 0x44
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	080055dc 	.word	0x080055dc

080010f4 <__HMC5883L_SetDataAxis>:


HAL_StatusTypeDef __HMC5883L_SetDataAxis(HMC5883L_Data_t *data, uint8_t axis, int16_t axisData) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
 8001100:	4613      	mov	r3, r2
 8001102:	803b      	strh	r3, [r7, #0]
	switch(axis) {
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d010      	beq.n	800112c <__HMC5883L_SetDataAxis+0x38>
 800110a:	2b02      	cmp	r3, #2
 800110c:	dc13      	bgt.n	8001136 <__HMC5883L_SetDataAxis+0x42>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <__HMC5883L_SetDataAxis+0x24>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <__HMC5883L_SetDataAxis+0x2e>
 8001116:	e00e      	b.n	8001136 <__HMC5883L_SetDataAxis+0x42>
		case __HMC5883L_AXIS_X:
			data->x = axisData;
 8001118:	883a      	ldrh	r2, [r7, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	801a      	strh	r2, [r3, #0]
			return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e00a      	b.n	8001138 <__HMC5883L_SetDataAxis+0x44>
		case __HMC5883L_AXIS_Y:
			data->y = axisData;
 8001122:	883a      	ldrh	r2, [r7, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	805a      	strh	r2, [r3, #2]
			return HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	e005      	b.n	8001138 <__HMC5883L_SetDataAxis+0x44>
		case __HMC5883L_AXIS_Z:
			data->z = axisData;
 800112c:	883a      	ldrh	r2, [r7, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	809a      	strh	r2, [r3, #4]
			return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <__HMC5883L_SetDataAxis+0x44>
		default:
			return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
	}
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	0000      	movs	r0, r0
	...

08001148 <__HMC5883L_SetDataAngles>:

void __HMC5883L_SetDataAngles(HMC5883L_Data_t *data) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	data->radians = atan2f(data->x, data->y);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	885b      	ldrh	r3, [r3, #2]
 8001160:	ee07 3a10 	vmov	s14, r3
 8001164:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001168:	eef0 0a47 	vmov.f32	s1, s14
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	f004 f8a3 	bl	80052ba <atan2f>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	edc3 7a03 	vstr	s15, [r3, #12]
	data->degrees = data->radians * (180.0/M_PI);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fa00 	bl	8000588 <__aeabi_f2d>
 8001188:	a309      	add	r3, pc, #36	; (adr r3, 80011b0 <__HMC5883L_SetDataAngles+0x68>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa53 	bl	8000638 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fc5f 	bl	8000a5c <__aeabi_d2f>
 800119e:	4602      	mov	r2, r0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	1a63c1f8 	.word	0x1a63c1f8
 80011b4:	404ca5dc 	.word	0x404ca5dc

080011b8 <__HMC5883L_GetStatus>:

HAL_StatusTypeDef __HMC5883L_GetStatus(HMC5883L_Config_t config, HMC5883L_Status_t *registerStatus) {
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b08b      	sub	sp, #44	; 0x2c
 80011bc:	af04      	add	r7, sp, #16
 80011be:	463c      	mov	r4, r7
 80011c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t statusRegisterData = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Read(config.handle, HMC5883L_DEVICE_ADDR, HMC5883L_REG_ADDR_STATUS, I2C_MEMADD_SIZE_8BIT, &statusRegisterData, 1, HAL_MAX_DELAY);
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 0316 	add.w	r3, r7, #22
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2209      	movs	r2, #9
 80011de:	213c      	movs	r1, #60	; 0x3c
 80011e0:	f001 f944 	bl	800246c <HAL_I2C_Mem_Read>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <__HMC5883L_GetStatus+0x3a>
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	e011      	b.n	8001216 <__HMC5883L_GetStatus+0x5e>

	// clear the six most significant bits, since they are not used
	statusRegisterData &= 0b00000011;
 80011f2:	7dbb      	ldrb	r3, [r7, #22]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	75bb      	strb	r3, [r7, #22]

	*registerStatus = statusRegisterData;
 80011fc:	7dba      	ldrb	r2, [r7, #22]
 80011fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001200:	701a      	strb	r2, [r3, #0]

	// the only possible values read are READY and LOCKED, otherwise an error occurred in the communication
	return (statusRegisterData == READY || statusRegisterData == LOCKED) ? HAL_OK : HAL_ERROR;
 8001202:	7dbb      	ldrb	r3, [r7, #22]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d004      	beq.n	8001212 <__HMC5883L_GetStatus+0x5a>
 8001208:	7dbb      	ldrb	r3, [r7, #22]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d001      	beq.n	8001212 <__HMC5883L_GetStatus+0x5a>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <__HMC5883L_GetStatus+0x5c>
 8001212:	2300      	movs	r3, #0
 8001214:	b2db      	uxtb	r3, r3
}
 8001216:	4618      	mov	r0, r3
 8001218:	371c      	adds	r7, #28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
	...

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0be      	sub	sp, #248	; 0xf8
 8001224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f000 fbb9 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122a:	f000 f879 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f000 f989 	bl	8001544 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001232:	f000 f903 	bl	800143c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001236:	f000 f8d3 	bl	80013e0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800123a:	f000 f959 	bl	80014f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SERVO_TimerConfig_t servoPWMConfig;
  servoPWMConfig.handle = htim3;
 800123e:	4a31      	ldr	r2, [pc, #196]	; (8001304 <main+0xe4>)
 8001240:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001244:	4611      	mov	r1, r2
 8001246:	2248      	movs	r2, #72	; 0x48
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fca3 	bl	8004b94 <memcpy>
  servoPWMConfig.channel = TIM_CHANNEL_2;
 800124e:	2304      	movs	r3, #4
 8001250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  servoPWMConfig.period = SERVO_PERIOD;
 8001254:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001258:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  servoPWMConfig.minDutyCyclePercentage = SERVO_MIN_DUTY_CICLE;
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <main+0xe8>)
 800125e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  servoPWMConfig.maxDutyCyclePercentage = SERVO_MAX_DUTY_CICLE;
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <main+0xec>)
 8001264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  SERVO_Calibration_t servoCalibration;
  servoCalibration.gain = SERVO_CALIBRATION_GAIN;
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <main+0xf0>)
 800126a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  servoCalibration.offset = SERVO_CALIBRATION_OFFSET;
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <main+0xf4>)
 8001270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  SERVO_Config_t servoConfig;
  servoConfig.timerConfig = servoPWMConfig;
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800127c:	2258      	movs	r2, #88	; 0x58
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fc88 	bl	8004b94 <memcpy>
  servoConfig.calibration = servoCalibration;
 8001284:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001288:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800128c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001290:	e883 0003 	stmia.w	r3, {r0, r1}

  HMC5883L_Config_t magnetometerConfig;
  magnetometerConfig.dataOutputRate = HMC5883L_DOR_15;
 8001294:	2304      	movs	r3, #4
 8001296:	757b      	strb	r3, [r7, #21]
  magnetometerConfig.gain = HMC5883L_GAIN_0_88;
 8001298:	2300      	movs	r3, #0
 800129a:	75fb      	strb	r3, [r7, #23]
  magnetometerConfig.measurementMode = HMC5883L_MESUAREMENT_NORMAL;
 800129c:	2300      	movs	r3, #0
 800129e:	75bb      	strb	r3, [r7, #22]
  magnetometerConfig.operatingMode = HMC5883L_CONTINUOUS_MODE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	763b      	strb	r3, [r7, #24]
  magnetometerConfig.samplesNum = HMC5883L_SAMPLES_8;
 80012a4:	2303      	movs	r3, #3
 80012a6:	753b      	strb	r3, [r7, #20]
  magnetometerConfig.handle = &hi2c1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <main+0xf8>)
 80012aa:	613b      	str	r3, [r7, #16]
  HMC5883L_Init(magnetometerConfig);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b2:	f7ff fda1 	bl	8000df8 <HMC5883L_Init>
  HMC5883L_GetCalibrationData(magnetometerConfig, &huart2);
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <main+0xfc>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c0:	f7ff fed6 	bl	8001070 <HMC5883L_GetCalibrationData>

  HMC5883L_Data_t magnetometerData = {0,0,0,0,0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]

  const int servoMin = SERVO_MIN_ANGLE;
 80012d0:	f06f 0359 	mvn.w	r3, #89	; 0x59
 80012d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  const int servoMax = SERVO_MAX_ANGLE;
 80012d8:	235a      	movs	r3, #90	; 0x5a
 80012da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  int pwmServoIncrement = 5;
 80012de:	2305      	movs	r3, #5
 80012e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  int pwmServoValue = servoMin;
 80012e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
//	if((pwmServoValue <= servoMin) || (pwmServoValue >= servoMax)) pwmServoIncrement = -pwmServoIncrement;
//
//	setServoPWMAngle(servoConfig, pwmServoValue);
//	HAL_Delay(500);

	HMC5883L_Read(magnetometerConfig, &magnetometerData);
 80012ec:	463b      	mov	r3, r7
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f6:	f7ff fdef 	bl	8000ed8 <HMC5883L_Read>
	HAL_Delay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f000 fbbf 	bl	8001a80 <HAL_Delay>
	HMC5883L_Read(magnetometerConfig, &magnetometerData);
 8001302:	e7f3      	b.n	80012ec <main+0xcc>
 8001304:	200000cc 	.word	0x200000cc
 8001308:	3d4ccccd 	.word	0x3d4ccccd
 800130c:	3deb851f 	.word	0x3deb851f
 8001310:	3fbc28f6 	.word	0x3fbc28f6
 8001314:	c149999a 	.word	0xc149999a
 8001318:	20000078 	.word	0x20000078
 800131c:	20000114 	.word	0x20000114

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	; 0x50
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	2234      	movs	r2, #52	; 0x34
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fbec 	bl	8004b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <SystemClock_Config+0xb8>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <SystemClock_Config+0xb8>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <SystemClock_Config+0xb8>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001360:	2300      	movs	r3, #0
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <SystemClock_Config+0xbc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800136c:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <SystemClock_Config+0xbc>)
 800136e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <SystemClock_Config+0xbc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001388:	2310      	movs	r3, #16
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4618      	mov	r0, r3
 8001396:	f002 f8af 	bl	80034f8 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013a0:	f000 f946 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80013ac:	23a0      	movs	r3, #160	; 0xa0
 80013ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80013b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fdd5 	bl	8002f70 <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013cc:	f000 f930 	bl	8001630 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3750      	adds	r7, #80	; 0x50
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_I2C1_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <MX_I2C1_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_I2C1_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_I2C1_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_I2C1_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_I2C1_Init+0x50>)
 800141e:	f000 fde7 	bl	8001ff0 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 f902 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000078 	.word	0x20000078
 8001434:	40005400 	.word	0x40005400
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <MX_TIM3_Init+0xac>)
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <MX_TIM3_Init+0xb0>)
 8001462:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM3_Init+0xac>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_TIM3_Init+0xac>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM3_Init+0xac>)
 8001472:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_TIM3_Init+0xac>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM3_Init+0xac>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM3_Init+0xac>)
 8001486:	f002 fad5 	bl	8003a34 <HAL_TIM_PWM_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001490:	f000 f8ce 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4619      	mov	r1, r3
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <MX_TIM3_Init+0xac>)
 80014a4:	f002 fe28 	bl	80040f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014ae:	f000 f8bf 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b2:	2360      	movs	r3, #96	; 0x60
 80014b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 94;
 80014b6:	235e      	movs	r3, #94	; 0x5e
 80014b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2204      	movs	r2, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM3_Init+0xac>)
 80014ca:	f002 fb03 	bl	8003ad4 <HAL_TIM_PWM_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014d4:	f000 f8ac 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM3_Init+0xac>)
 80014da:	f000 f941 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000cc 	.word	0x200000cc
 80014ec:	40000400 	.word	0x40000400

080014f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART2_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_USART2_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_USART2_UART_Init+0x4c>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART2_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001528:	f002 fe62 	bl	80041f0 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f000 f87d 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000114 	.word	0x20000114
 8001540:	40004400 	.word	0x40004400

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <MX_GPIO_Init+0xdc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <MX_GPIO_Init+0xdc>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <MX_GPIO_Init+0xdc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_GPIO_Init+0xdc>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a28      	ldr	r2, [pc, #160]	; (8001620 <MX_GPIO_Init+0xdc>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <MX_GPIO_Init+0xdc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <MX_GPIO_Init+0xdc>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <MX_GPIO_Init+0xdc>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <MX_GPIO_Init+0xdc>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	481c      	ldr	r0, [pc, #112]	; (8001624 <MX_GPIO_Init+0xe0>)
 80015b4:	f000 fd02 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015b8:	2320      	movs	r3, #32
 80015ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <MX_GPIO_Init+0xe0>)
 80015d0:	f000 fb60 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015d4:	2320      	movs	r3, #32
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e4:	2307      	movs	r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <MX_GPIO_Init+0xe4>)
 80015f0:	f000 fb50 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001606:	2307      	movs	r3, #7
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <MX_GPIO_Init+0xe8>)
 8001612:	f000 fb3f 	bl	8001c94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020800 	.word	0x40020800
 800162c:	40020400 	.word	0x40020400

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	e7fe      	b.n	8001638 <Error_Handler+0x8>
	...

0800163c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_I2C_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016dc:	2304      	movs	r3, #4
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <HAL_I2C_MspInit+0x8c>)
 80016e8:	f000 fad4 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40005400 	.word	0x40005400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020400 	.word	0x40020400

0800171c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_TIM_PWM_MspInit+0x3c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10d      	bne.n	800174a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_TIM_PWM_MspInit+0x40>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_TIM_PWM_MspInit+0x40>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_TIM_PWM_MspInit+0x40>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40000400 	.word	0x40000400
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <HAL_TIM_MspPostInit+0x68>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d11d      	bne.n	80017be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_TIM_MspPostInit+0x6c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_TIM_MspPostInit+0x6c>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_TIM_MspPostInit+0x6c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_TIM_MspPostInit+0x70>)
 80017ba:	f000 fa6b 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40000400 	.word	0x40000400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000

080017d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_UART_MspInit+0x84>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12b      	bne.n	800184e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_UART_MspInit+0x88>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_UART_MspInit+0x88>)
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_UART_MspInit+0x88>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_UART_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_UART_MspInit+0x88>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_UART_MspInit+0x88>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800182e:	230c      	movs	r3, #12
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183e:	2307      	movs	r3, #7
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_UART_MspInit+0x8c>)
 800184a:	f000 fa23 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40004400 	.word	0x40004400
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <NMI_Handler+0x4>

0800186a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <MemManage_Handler+0x4>

08001876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <UsageFault_Handler+0x4>

08001882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 f8c6 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f003 f928 	bl	8004b3c <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20020000 	.word	0x20020000
 8001918:	00000400 	.word	0x00000400
 800191c:	20000158 	.word	0x20000158
 8001920:	200002a8 	.word	0x200002a8

08001924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194e:	490e      	ldr	r1, [pc, #56]	; (8001988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001964:	4c0b      	ldr	r4, [pc, #44]	; (8001994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001972:	f7ff ffd7 	bl	8001924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001976:	f003 f8e7 	bl	8004b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7ff fc51 	bl	8001220 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800198c:	0800567c 	.word	0x0800567c
  ldr r2, =_sbss
 8001990:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001994:	200002a8 	.word	0x200002a8

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_Init+0x40>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_Init+0x40>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x40>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f931 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fe34 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f93b 	bl	8001c7a <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 f911 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	2000015c 	.word	0x2000015c

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000015c 	.word	0x2000015c

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff8e 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff47 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff5c 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff8e 	bl	8001b80 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffb0 	bl	8001be8 <SysTick_Config>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e165      	b.n	8001f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f040 8154 	bne.w	8001f76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d005      	beq.n	8001ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d130      	bne.n	8001d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d017      	beq.n	8001d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d123      	bne.n	8001dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80ae 	beq.w	8001f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <HAL_GPIO_Init+0x308>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d025      	beq.n	8001eae <HAL_GPIO_Init+0x21a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <HAL_GPIO_Init+0x30c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_Init+0x216>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4d      	ldr	r2, [pc, #308]	; (8001fa4 <HAL_GPIO_Init+0x310>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4c      	ldr	r2, [pc, #304]	; (8001fa8 <HAL_GPIO_Init+0x314>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x20e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4b      	ldr	r2, [pc, #300]	; (8001fac <HAL_GPIO_Init+0x318>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x20a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_GPIO_Init+0x31c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x206>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a49      	ldr	r2, [pc, #292]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x202>
 8001e92:	2306      	movs	r3, #6
 8001e94:	e00c      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00a      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e008      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e004      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	f002 0203 	and.w	r2, r2, #3
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	4093      	lsls	r3, r2
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec0:	4935      	ldr	r1, [pc, #212]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ece:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef2:	4a31      	ldr	r2, [pc, #196]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f22:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f70:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b0f      	cmp	r3, #15
 8001f80:	f67f ae96 	bls.w	8001cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd8:	e003      	b.n	8001fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	041a      	lsls	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e12b      	b.n	800225a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fb38 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2224      	movs	r2, #36	; 0x24
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002054:	f001 f87e 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8002058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a81      	ldr	r2, [pc, #516]	; (8002264 <HAL_I2C_Init+0x274>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d807      	bhi.n	8002074 <HAL_I2C_Init+0x84>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_I2C_Init+0x278>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e006      	b.n	8002082 <HAL_I2C_Init+0x92>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a7d      	ldr	r2, [pc, #500]	; (800226c <HAL_I2C_Init+0x27c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	bf94      	ite	ls
 800207c:	2301      	movls	r3, #1
 800207e:	2300      	movhi	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0e7      	b.n	800225a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a78      	ldr	r2, [pc, #480]	; (8002270 <HAL_I2C_Init+0x280>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9b      	lsrs	r3, r3, #18
 8002094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <HAL_I2C_Init+0x274>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d802      	bhi.n	80020c4 <HAL_I2C_Init+0xd4>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3301      	adds	r3, #1
 80020c2:	e009      	b.n	80020d8 <HAL_I2C_Init+0xe8>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	4a69      	ldr	r2, [pc, #420]	; (8002274 <HAL_I2C_Init+0x284>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	3301      	adds	r3, #1
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	430b      	orrs	r3, r1
 80020de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	495c      	ldr	r1, [pc, #368]	; (8002264 <HAL_I2C_Init+0x274>)
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d819      	bhi.n	800212c <HAL_I2C_Init+0x13c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e59      	subs	r1, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fbb1 f3f3 	udiv	r3, r1, r3
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800210c:	400b      	ands	r3, r1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_I2C_Init+0x138>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1e59      	subs	r1, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002120:	3301      	adds	r3, #1
 8002122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002126:	e051      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 8002128:	2304      	movs	r3, #4
 800212a:	e04f      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d111      	bne.n	8002158 <HAL_I2C_Init+0x168>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e58      	subs	r0, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	440b      	add	r3, r1
 8002142:	fbb0 f3f3 	udiv	r3, r0, r3
 8002146:	3301      	adds	r3, #1
 8002148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e012      	b.n	800217e <HAL_I2C_Init+0x18e>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	0099      	lsls	r1, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Init+0x196>
 8002182:	2301      	movs	r3, #1
 8002184:	e022      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10e      	bne.n	80021ac <HAL_I2C_Init+0x1bc>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e58      	subs	r0, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	440b      	add	r3, r1
 800219c:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	e00f      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	0099      	lsls	r1, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	6809      	ldr	r1, [r1, #0]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6911      	ldr	r1, [r2, #16]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68d2      	ldr	r2, [r2, #12]
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	430b      	orrs	r3, r1
 800220e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	000186a0 	.word	0x000186a0
 8002268:	001e847f 	.word	0x001e847f
 800226c:	003d08ff 	.word	0x003d08ff
 8002270:	431bde83 	.word	0x431bde83
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	4608      	mov	r0, r1
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	4603      	mov	r3, r0
 8002288:	817b      	strh	r3, [r7, #10]
 800228a:	460b      	mov	r3, r1
 800228c:	813b      	strh	r3, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002292:	f7ff fbe9 	bl	8001a68 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	f040 80d9 	bne.w	8002458 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2319      	movs	r3, #25
 80022ac:	2201      	movs	r2, #1
 80022ae:	496d      	ldr	r1, [pc, #436]	; (8002464 <HAL_I2C_Mem_Write+0x1ec>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fc7f 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
 80022be:	e0cc      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Mem_Write+0x56>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0c5      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d007      	beq.n	80022f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2221      	movs	r2, #33	; 0x21
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_I2C_Mem_Write+0x1f0>)
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002336:	88f8      	ldrh	r0, [r7, #6]
 8002338:	893a      	ldrh	r2, [r7, #8]
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4603      	mov	r3, r0
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fab6 	bl	80028b8 <I2C_RequestMemoryWrite>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d052      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e081      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fd00 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b04      	cmp	r3, #4
 800236c:	d107      	bne.n	800237e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06b      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11b      	bne.n	80023f8 <HAL_I2C_Mem_Write+0x180>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d017      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1aa      	bne.n	8002356 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fcec 	bl	8002de2 <I2C_WaitOnBTFFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b04      	cmp	r3, #4
 8002416:	d107      	bne.n	8002428 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e016      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	00100002 	.word	0x00100002
 8002468:	ffff0000 	.word	0xffff0000

0800246c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	4608      	mov	r0, r1
 8002476:	4611      	mov	r1, r2
 8002478:	461a      	mov	r2, r3
 800247a:	4603      	mov	r3, r0
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	460b      	mov	r3, r1
 8002480:	813b      	strh	r3, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002486:	f7ff faef 	bl	8001a68 <HAL_GetTick>
 800248a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b20      	cmp	r3, #32
 8002496:	f040 8208 	bne.w	80028aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2319      	movs	r3, #25
 80024a0:	2201      	movs	r2, #1
 80024a2:	497b      	ldr	r1, [pc, #492]	; (8002690 <HAL_I2C_Mem_Read+0x224>)
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fb85 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
 80024b2:	e1fb      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_I2C_Mem_Read+0x56>
 80024be:	2302      	movs	r3, #2
 80024c0:	e1f4      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d007      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2222      	movs	r2, #34	; 0x22
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a5b      	ldr	r2, [pc, #364]	; (8002694 <HAL_I2C_Mem_Read+0x228>)
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800252a:	88f8      	ldrh	r0, [r7, #6]
 800252c:	893a      	ldrh	r2, [r7, #8]
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4603      	mov	r3, r0
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa52 	bl	80029e4 <I2C_RequestMemoryRead>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1b0      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d113      	bne.n	800257a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	623b      	str	r3, [r7, #32]
 8002566:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e184      	b.n	8002884 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	2b01      	cmp	r3, #1
 8002580:	d11b      	bne.n	80025ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e164      	b.n	8002884 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d11b      	bne.n	80025fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	e144      	b.n	8002884 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002610:	e138      	b.n	8002884 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	2b03      	cmp	r3, #3
 8002618:	f200 80f1 	bhi.w	80027fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	2b01      	cmp	r3, #1
 8002622:	d123      	bne.n	800266c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fc1b 	bl	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e139      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a
 800266a:	e10b      	b.n	8002884 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b02      	cmp	r3, #2
 8002672:	d14e      	bne.n	8002712 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	2200      	movs	r2, #0
 800267c:	4906      	ldr	r1, [pc, #24]	; (8002698 <HAL_I2C_Mem_Read+0x22c>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fa98 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e10e      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
 800268e:	bf00      	nop
 8002690:	00100002 	.word	0x00100002
 8002694:	ffff0000 	.word	0xffff0000
 8002698:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002710:	e0b8      	b.n	8002884 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	2200      	movs	r2, #0
 800271a:	4966      	ldr	r1, [pc, #408]	; (80028b4 <HAL_I2C_Mem_Read+0x448>)
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fa49 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0bf      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	2200      	movs	r2, #0
 8002776:	494f      	ldr	r1, [pc, #316]	; (80028b4 <HAL_I2C_Mem_Read+0x448>)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fa1b 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e091      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027fc:	e042      	b.n	8002884 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fb2e 	bl	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e04c      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b04      	cmp	r3, #4
 8002850:	d118      	bne.n	8002884 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	f47f aec2 	bne.w	8002612 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e000      	b.n	80028ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028aa:	2302      	movs	r3, #2
  }
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	00010004 	.word	0x00010004

080028b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	817b      	strh	r3, [r7, #10]
 80028ca:	460b      	mov	r3, r1
 80028cc:	813b      	strh	r3, [r7, #8]
 80028ce:	4613      	mov	r3, r2
 80028d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f960 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002908:	d103      	bne.n	8002912 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e05f      	b.n	80029d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002924:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	492d      	ldr	r1, [pc, #180]	; (80029e0 <I2C_RequestMemoryWrite+0x128>)
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f998 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e04c      	b.n	80029d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	6a39      	ldr	r1, [r7, #32]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fa02 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b04      	cmp	r3, #4
 8002968:	d107      	bne.n	800297a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e02b      	b.n	80029d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d105      	bne.n	8002990 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002984:	893b      	ldrh	r3, [r7, #8]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	611a      	str	r2, [r3, #16]
 800298e:	e021      	b.n	80029d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002990:	893b      	ldrh	r3, [r7, #8]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b29b      	uxth	r3, r3
 8002996:	b2da      	uxtb	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	6a39      	ldr	r1, [r7, #32]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f9dc 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e005      	b.n	80029d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ca:	893b      	ldrh	r3, [r7, #8]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	00010002 	.word	0x00010002

080029e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	460b      	mov	r3, r1
 80029f8:	813b      	strh	r3, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f8c2 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a44:	d103      	bne.n	8002a4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0aa      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	4952      	ldr	r1, [pc, #328]	; (8002bb0 <I2C_RequestMemoryRead+0x1cc>)
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f8fa 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e097      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	6a39      	ldr	r1, [r7, #32]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f964 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d107      	bne.n	8002ab6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e076      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac0:	893b      	ldrh	r3, [r7, #8]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	e021      	b.n	8002b10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002acc:	893b      	ldrh	r3, [r7, #8]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002adc:	6a39      	ldr	r1, [r7, #32]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f93e 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d107      	bne.n	8002b02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e050      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b06:	893b      	ldrh	r3, [r7, #8]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	6a39      	ldr	r1, [r7, #32]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f923 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e035      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f82b 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b72:	d103      	bne.n	8002b7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e013      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b80:	897b      	ldrh	r3, [r7, #10]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	6a3a      	ldr	r2, [r7, #32]
 8002b94:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <I2C_RequestMemoryRead+0x1cc>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f863 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	00010002 	.word	0x00010002

08002bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc4:	e025      	b.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d021      	beq.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fe ff4b 	bl	8001a68 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d116      	bne.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f043 0220 	orr.w	r2, r3, #32
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e023      	b.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d10d      	bne.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	e00c      	b.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d0b6      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c70:	e051      	b.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c80:	d123      	bne.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0204 	orr.w	r2, r3, #4
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e046      	b.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d021      	beq.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fe fec9 	bl	8001a68 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d116      	bne.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e020      	b.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10c      	bne.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e00b      	b.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	43da      	mvns	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4013      	ands	r3, r2
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d18d      	bne.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d6c:	e02d      	b.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8ce 	bl	8002f10 <I2C_IsAcknowledgeFailed>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e02d      	b.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d021      	beq.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe fe6f 	bl	8001a68 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e007      	b.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd4:	2b80      	cmp	r3, #128	; 0x80
 8002dd6:	d1ca      	bne.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dee:	e02d      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f88d 	bl	8002f10 <I2C_IsAcknowledgeFailed>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e02d      	b.n	8002e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d021      	beq.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7fe fe2e 	bl	8001a68 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e007      	b.n	8002e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d1ca      	bne.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e70:	e042      	b.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d119      	bne.n	8002eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0210 	mvn.w	r2, #16
 8002e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e029      	b.n	8002f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7fe fdd8 	bl	8001a68 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d302      	bcc.n	8002eca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e007      	b.n	8002f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d1b5      	bne.n	8002e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d11b      	bne.n	8002f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0cc      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b68      	ldr	r3, [pc, #416]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d90c      	bls.n	8002fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b8      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	494d      	ldr	r1, [pc, #308]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d044      	beq.n	8003090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d119      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d003      	beq.n	800302e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302a:	2b03      	cmp	r3, #3
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e06f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e067      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b37      	ldr	r3, [pc, #220]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4934      	ldr	r1, [pc, #208]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7fe fd02 	bl	8001a68 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fe fcfe 	bl	8001a68 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e04f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d20c      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e032      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4916      	ldr	r1, [pc, #88]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030f6:	f000 f855 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490a      	ldr	r1, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fc62 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00
 800312c:	40023800 	.word	0x40023800
 8003130:	080055e8 	.word	0x080055e8
 8003134:	20000000 	.word	0x20000000
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	080055f8 	.word	0x080055f8

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffdc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	080055f8 	.word	0x080055f8

080031a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a8:	b0a6      	sub	sp, #152	; 0x98
 80031aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ca:	4bc8      	ldr	r3, [pc, #800]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	f200 817e 	bhi.w	80034d4 <HAL_RCC_GetSysClockFreq+0x330>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	08003215 	.word	0x08003215
 80031e4:	080034d5 	.word	0x080034d5
 80031e8:	080034d5 	.word	0x080034d5
 80031ec:	080034d5 	.word	0x080034d5
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	080034d5 	.word	0x080034d5
 80031f8:	080034d5 	.word	0x080034d5
 80031fc:	080034d5 	.word	0x080034d5
 8003200:	08003225 	.word	0x08003225
 8003204:	080034d5 	.word	0x080034d5
 8003208:	080034d5 	.word	0x080034d5
 800320c:	080034d5 	.word	0x080034d5
 8003210:	0800338f 	.word	0x0800338f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4bb6      	ldr	r3, [pc, #728]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800321a:	e15f      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800321c:	4bb5      	ldr	r3, [pc, #724]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800321e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003222:	e15b      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003224:	4bb1      	ldr	r3, [pc, #708]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800322c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003230:	4bae      	ldr	r3, [pc, #696]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d031      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323c:	4bab      	ldr	r3, [pc, #684]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	2200      	movs	r2, #0
 8003244:	66bb      	str	r3, [r7, #104]	; 0x68
 8003246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800324a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324e:	663b      	str	r3, [r7, #96]	; 0x60
 8003250:	2300      	movs	r3, #0
 8003252:	667b      	str	r3, [r7, #100]	; 0x64
 8003254:	4ba7      	ldr	r3, [pc, #668]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003256:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800325a:	462a      	mov	r2, r5
 800325c:	fb03 f202 	mul.w	r2, r3, r2
 8003260:	2300      	movs	r3, #0
 8003262:	4621      	mov	r1, r4
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	4aa2      	ldr	r2, [pc, #648]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800326c:	4621      	mov	r1, r4
 800326e:	fba1 1202 	umull	r1, r2, r1, r2
 8003272:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003274:	460a      	mov	r2, r1
 8003276:	67ba      	str	r2, [r7, #120]	; 0x78
 8003278:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800327a:	4413      	add	r3, r2
 800327c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800327e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003282:	2200      	movs	r2, #0
 8003284:	65bb      	str	r3, [r7, #88]	; 0x58
 8003286:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003288:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800328c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003290:	f7fd fc34 	bl	8000afc <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4613      	mov	r3, r2
 800329a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800329e:	e064      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a0:	4b92      	ldr	r3, [pc, #584]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	2200      	movs	r2, #0
 80032a8:	653b      	str	r3, [r7, #80]	; 0x50
 80032aa:	657a      	str	r2, [r7, #84]	; 0x54
 80032ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b4:	2300      	movs	r3, #0
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80032bc:	4622      	mov	r2, r4
 80032be:	462b      	mov	r3, r5
 80032c0:	f04f 0000 	mov.w	r0, #0
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	0159      	lsls	r1, r3, #5
 80032ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ce:	0150      	lsls	r0, r2, #5
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4621      	mov	r1, r4
 80032d6:	1a51      	subs	r1, r2, r1
 80032d8:	6139      	str	r1, [r7, #16]
 80032da:	4629      	mov	r1, r5
 80032dc:	eb63 0301 	sbc.w	r3, r3, r1
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032ee:	4659      	mov	r1, fp
 80032f0:	018b      	lsls	r3, r1, #6
 80032f2:	4651      	mov	r1, sl
 80032f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f8:	4651      	mov	r1, sl
 80032fa:	018a      	lsls	r2, r1, #6
 80032fc:	4651      	mov	r1, sl
 80032fe:	ebb2 0801 	subs.w	r8, r2, r1
 8003302:	4659      	mov	r1, fp
 8003304:	eb63 0901 	sbc.w	r9, r3, r1
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003314:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003318:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331c:	4690      	mov	r8, r2
 800331e:	4699      	mov	r9, r3
 8003320:	4623      	mov	r3, r4
 8003322:	eb18 0303 	adds.w	r3, r8, r3
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	462b      	mov	r3, r5
 800332a:	eb49 0303 	adc.w	r3, r9, r3
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800333c:	4629      	mov	r1, r5
 800333e:	028b      	lsls	r3, r1, #10
 8003340:	4621      	mov	r1, r4
 8003342:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003346:	4621      	mov	r1, r4
 8003348:	028a      	lsls	r2, r1, #10
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003352:	2200      	movs	r2, #0
 8003354:	643b      	str	r3, [r7, #64]	; 0x40
 8003356:	647a      	str	r2, [r7, #68]	; 0x44
 8003358:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800335c:	f7fd fbce 	bl	8000afc <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800336a:	4b60      	ldr	r3, [pc, #384]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	0c1b      	lsrs	r3, r3, #16
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	3301      	adds	r3, #1
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800337c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800338c:	e0a6      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800338e:	4b57      	ldr	r3, [pc, #348]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800339a:	4b54      	ldr	r3, [pc, #336]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d02a      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a6:	4b51      	ldr	r3, [pc, #324]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	2200      	movs	r2, #0
 80033ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033b8:	2100      	movs	r1, #0
 80033ba:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80033bc:	fb03 f201 	mul.w	r2, r3, r1
 80033c0:	2300      	movs	r3, #0
 80033c2:	fb00 f303 	mul.w	r3, r0, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80033ca:	fba0 1202 	umull	r1, r2, r0, r2
 80033ce:	677a      	str	r2, [r7, #116]	; 0x74
 80033d0:	460a      	mov	r2, r1
 80033d2:	673a      	str	r2, [r7, #112]	; 0x70
 80033d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033d6:	4413      	add	r3, r2
 80033d8:	677b      	str	r3, [r7, #116]	; 0x74
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033de:	2200      	movs	r2, #0
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
 80033e2:	637a      	str	r2, [r7, #52]	; 0x34
 80033e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80033ec:	f7fd fb86 	bl	8000afc <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4613      	mov	r3, r2
 80033f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033fa:	e05b      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	2200      	movs	r2, #0
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
 8003406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003418:	4642      	mov	r2, r8
 800341a:	464b      	mov	r3, r9
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	0159      	lsls	r1, r3, #5
 8003426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342a:	0150      	lsls	r0, r2, #5
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4641      	mov	r1, r8
 8003432:	ebb2 0a01 	subs.w	sl, r2, r1
 8003436:	4649      	mov	r1, r9
 8003438:	eb63 0b01 	sbc.w	fp, r3, r1
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003448:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800344c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003450:	ebb2 040a 	subs.w	r4, r2, sl
 8003454:	eb63 050b 	sbc.w	r5, r3, fp
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	00eb      	lsls	r3, r5, #3
 8003462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003466:	00e2      	lsls	r2, r4, #3
 8003468:	4614      	mov	r4, r2
 800346a:	461d      	mov	r5, r3
 800346c:	4643      	mov	r3, r8
 800346e:	18e3      	adds	r3, r4, r3
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	464b      	mov	r3, r9
 8003474:	eb45 0303 	adc.w	r3, r5, r3
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003486:	4629      	mov	r1, r5
 8003488:	028b      	lsls	r3, r1, #10
 800348a:	4621      	mov	r1, r4
 800348c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003490:	4621      	mov	r1, r4
 8003492:	028a      	lsls	r2, r1, #10
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349c:	2200      	movs	r2, #0
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	61fa      	str	r2, [r7, #28]
 80034a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a6:	f7fd fb29 	bl	8000afc <__aeabi_uldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4613      	mov	r3, r2
 80034b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_RCC_GetSysClockFreq+0x348>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0f1b      	lsrs	r3, r3, #28
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80034c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034d2:	e003      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80034d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3798      	adds	r7, #152	; 0x98
 80034e4:	46bd      	mov	sp, r7
 80034e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	017d7840 	.word	0x017d7840

080034f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e28d      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8083 	beq.w	800361e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003518:	4b94      	ldr	r3, [pc, #592]	; (800376c <HAL_RCC_OscConfig+0x274>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b04      	cmp	r3, #4
 8003522:	d019      	beq.n	8003558 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003524:	4b91      	ldr	r3, [pc, #580]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800352c:	2b08      	cmp	r3, #8
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003530:	4b8e      	ldr	r3, [pc, #568]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353c:	d00c      	beq.n	8003558 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353e:	4b8b      	ldr	r3, [pc, #556]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d112      	bne.n	8003570 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354a:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCC_OscConfig+0x274>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003556:	d10b      	bne.n	8003570 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	4b84      	ldr	r3, [pc, #528]	; (800376c <HAL_RCC_OscConfig+0x274>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d05b      	beq.n	800361c <HAL_RCC_OscConfig+0x124>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d157      	bne.n	800361c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e25a      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d106      	bne.n	8003588 <HAL_RCC_OscConfig+0x90>
 800357a:	4b7c      	ldr	r3, [pc, #496]	; (800376c <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7b      	ldr	r2, [pc, #492]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0xcc>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0xb4>
 8003592:	4b76      	ldr	r3, [pc, #472]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a72      	ldr	r2, [pc, #456]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xcc>
 80035ac:	4b6f      	ldr	r3, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6e      	ldr	r2, [pc, #440]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b6c      	ldr	r3, [pc, #432]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6b      	ldr	r2, [pc, #428]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fa4c 	bl	8001a68 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe fa48 	bl	8001a68 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e21f      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b61      	ldr	r3, [pc, #388]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xdc>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe fa38 	bl	8001a68 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe fa34 	bl	8001a68 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e20b      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b57      	ldr	r3, [pc, #348]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x104>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d06f      	beq.n	800370a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800362a:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_OscConfig+0x274>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b00      	cmp	r3, #0
 8003634:	d017      	beq.n	8003666 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003636:	4b4d      	ldr	r3, [pc, #308]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800363e:	2b08      	cmp	r3, #8
 8003640:	d105      	bne.n	800364e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003642:	4b4a      	ldr	r3, [pc, #296]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b44      	ldr	r3, [pc, #272]	; (800376c <HAL_RCC_OscConfig+0x274>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x186>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1d3      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4937      	ldr	r1, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x274>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_RCC_OscConfig+0x278>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe f9e1 	bl	8001a68 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe f9dd 	bl	8001a68 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1b4      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4925      	ldr	r1, [pc, #148]	; (800376c <HAL_RCC_OscConfig+0x274>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x278>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe f9c0 	bl	8001a68 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fe f9bc 	bl	8001a68 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e193      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCC_OscConfig+0x27c>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe f9a0 	bl	8001a68 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe f99c 	bl	8001a68 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e173      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x274>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x234>
 800374a:	e01b      	b.n	8003784 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_OscConfig+0x27c>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fe f989 	bl	8001a68 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00e      	b.n	8003778 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe f985 	bl	8001a68 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d907      	bls.n	8003778 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e15c      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
 800376c:	40023800 	.word	0x40023800
 8003770:	42470000 	.word	0x42470000
 8003774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	4b8a      	ldr	r3, [pc, #552]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ea      	bne.n	800375a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8097 	beq.w	80038c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003796:	4b83      	ldr	r3, [pc, #524]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a7e      	ldr	r2, [pc, #504]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b7c      	ldr	r3, [pc, #496]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c2:	4b79      	ldr	r3, [pc, #484]	; (80039a8 <HAL_RCC_OscConfig+0x4b0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x4b0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	; (80039a8 <HAL_RCC_OscConfig+0x4b0>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037da:	f7fe f945 	bl	8001a68 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fe f941 	bl	8001a68 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e118      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x4b0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x31e>
 8003808:	4b66      	ldr	r3, [pc, #408]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a65      	ldr	r2, [pc, #404]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
 8003814:	e01c      	b.n	8003850 <HAL_RCC_OscConfig+0x358>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x340>
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a60      	ldr	r2, [pc, #384]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	4b5e      	ldr	r3, [pc, #376]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a5d      	ldr	r2, [pc, #372]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0x358>
 8003838:	4b5a      	ldr	r3, [pc, #360]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a59      	ldr	r2, [pc, #356]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a56      	ldr	r2, [pc, #344]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fe f906 	bl	8001a68 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe f902 	bl	8001a68 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0d7      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b4b      	ldr	r3, [pc, #300]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCC_OscConfig+0x368>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe f8f0 	bl	8001a68 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe f8ec 	bl	8001a68 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0c1      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	4b40      	ldr	r3, [pc, #256]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ee      	bne.n	800388c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	4a3a      	ldr	r2, [pc, #232]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80ad 	beq.w	8003a24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ca:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d060      	beq.n	8003998 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d145      	bne.n	800396a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <HAL_RCC_OscConfig+0x4b4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe f8c0 	bl	8001a68 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe f8bc 	bl	8001a68 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e093      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	071b      	lsls	r3, r3, #28
 8003936:	491b      	ldr	r1, [pc, #108]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x4b4>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fe f891 	bl	8001a68 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fe f88d 	bl	8001a68 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e064      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x452>
 8003968:	e05c      	b.n	8003a24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_RCC_OscConfig+0x4b4>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe f87a 	bl	8001a68 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe f876 	bl	8001a68 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04d      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x480>
 8003996:	e045      	b.n	8003a24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e040      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40007000 	.word	0x40007000
 80039ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b0:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <HAL_RCC_OscConfig+0x538>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d030      	beq.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d129      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d122      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d119      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d10f      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800

08003a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e041      	b.n	8003aca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd fe5e 	bl	800171c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 f8f0 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e0ae      	b.n	8003c50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	f200 809f 	bhi.w	8003c40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003c41 	.word	0x08003c41
 8003b10:	08003c41 	.word	0x08003c41
 8003b14:	08003c41 	.word	0x08003c41
 8003b18:	08003b7d 	.word	0x08003b7d
 8003b1c:	08003c41 	.word	0x08003c41
 8003b20:	08003c41 	.word	0x08003c41
 8003b24:	08003c41 	.word	0x08003c41
 8003b28:	08003bbf 	.word	0x08003bbf
 8003b2c:	08003c41 	.word	0x08003c41
 8003b30:	08003c41 	.word	0x08003c41
 8003b34:	08003c41 	.word	0x08003c41
 8003b38:	08003bff 	.word	0x08003bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f928 	bl	8003d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0208 	orr.w	r2, r2, #8
 8003b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0204 	bic.w	r2, r2, #4
 8003b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6999      	ldr	r1, [r3, #24]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	619a      	str	r2, [r3, #24]
      break;
 8003b7a:	e064      	b.n	8003c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f978 	bl	8003e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6999      	ldr	r1, [r3, #24]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	021a      	lsls	r2, r3, #8
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	619a      	str	r2, [r3, #24]
      break;
 8003bbc:	e043      	b.n	8003c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f9cd 	bl	8003f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0208 	orr.w	r2, r2, #8
 8003bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0204 	bic.w	r2, r2, #4
 8003be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69d9      	ldr	r1, [r3, #28]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	61da      	str	r2, [r3, #28]
      break;
 8003bfc:	e023      	b.n	8003c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fa21 	bl	800404c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69d9      	ldr	r1, [r3, #28]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	021a      	lsls	r2, r3, #8
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	61da      	str	r2, [r3, #28]
      break;
 8003c3e:	e002      	b.n	8003c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
      break;
 8003c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a40      	ldr	r2, [pc, #256]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d00f      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a3d      	ldr	r2, [pc, #244]	; (8003d70 <TIM_Base_SetConfig+0x118>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <TIM_Base_SetConfig+0x11c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <TIM_Base_SetConfig+0x120>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d108      	bne.n	8003caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2f      	ldr	r2, [pc, #188]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d027      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <TIM_Base_SetConfig+0x118>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d023      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	; (8003d74 <TIM_Base_SetConfig+0x11c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01f      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <TIM_Base_SetConfig+0x120>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d017      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <TIM_Base_SetConfig+0x128>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <TIM_Base_SetConfig+0x130>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <TIM_Base_SetConfig+0x134>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a24      	ldr	r2, [pc, #144]	; (8003d90 <TIM_Base_SetConfig+0x138>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a23      	ldr	r2, [pc, #140]	; (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0xf8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40000400 	.word	0x40000400
 8003d74:	40000800 	.word	0x40000800
 8003d78:	40000c00 	.word	0x40000c00
 8003d7c:	40010400 	.word	0x40010400
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800
 8003d8c:	40001800 	.word	0x40001800
 8003d90:	40001c00 	.word	0x40001c00
 8003d94:	40002000 	.word	0x40002000

08003d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <TIM_OC1_SetConfig+0xd8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC1_SetConfig+0x64>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <TIM_OC1_SetConfig+0xdc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10c      	bne.n	8003e16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f023 0308 	bic.w	r3, r3, #8
 8003e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <TIM_OC1_SetConfig+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_OC1_SetConfig+0x8e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <TIM_OC1_SetConfig+0xdc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d111      	bne.n	8003e4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40010400 	.word	0x40010400

08003e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0210 	bic.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <TIM_OC2_SetConfig+0xe4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0x68>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <TIM_OC2_SetConfig+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10d      	bne.n	8003efc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <TIM_OC2_SetConfig+0xe4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_OC2_SetConfig+0x94>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <TIM_OC2_SetConfig+0xe8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d113      	bne.n	8003f34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40010400 	.word	0x40010400

08003f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a21      	ldr	r2, [pc, #132]	; (8004044 <TIM_OC3_SetConfig+0xe0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_OC3_SetConfig+0x66>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a20      	ldr	r2, [pc, #128]	; (8004048 <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10d      	bne.n	8003fe6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a16      	ldr	r2, [pc, #88]	; (8004044 <TIM_OC3_SetConfig+0xe0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC3_SetConfig+0x92>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <TIM_OC3_SetConfig+0xe4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d113      	bne.n	800401e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40010000 	.word	0x40010000
 8004048:	40010400 	.word	0x40010400

0800404c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	031b      	lsls	r3, r3, #12
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <TIM_OC4_SetConfig+0xa4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_OC4_SetConfig+0x68>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <TIM_OC4_SetConfig+0xa8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d109      	bne.n	80040c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400

080040f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800410c:	2302      	movs	r3, #2
 800410e:	e05a      	b.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a21      	ldr	r2, [pc, #132]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d01d      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1a      	ldr	r2, [pc, #104]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10c      	bne.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40010400 	.word	0x40010400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40001800 	.word	0x40001800

080041f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e03f      	b.n	8004282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd fadc 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	; 0x24
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f929 	bl	800448c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08a      	sub	sp, #40	; 0x28
 800428e:	af02      	add	r7, sp, #8
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d17c      	bne.n	80043a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_UART_Transmit+0x2c>
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e075      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_UART_Transmit+0x3e>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e06e      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2221      	movs	r2, #33	; 0x21
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042de:	f7fd fbc3 	bl	8001a68 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d108      	bne.n	800430c <HAL_UART_Transmit+0x82>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	e003      	b.n	8004314 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800431c:	e02a      	b.n	8004374 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f840 	bl	80043ae <UART_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e036      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	3302      	adds	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e007      	b.n	8004366 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1cf      	bne.n	800431e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2140      	movs	r1, #64	; 0x40
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f810 	bl	80043ae <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b090      	sub	sp, #64	; 0x40
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043be:	e050      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d04c      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0x30>
 80043ce:	f7fd fb4b 	bl	8001a68 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043da:	429a      	cmp	r2, r3
 80043dc:	d241      	bcs.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043fe:	637a      	str	r2, [r7, #52]	; 0x34
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e5      	bne.n	80043de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3314      	adds	r3, #20
 8004418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	613b      	str	r3, [r7, #16]
   return(result);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	63bb      	str	r3, [r7, #56]	; 0x38
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004432:	623a      	str	r2, [r7, #32]
 8004434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	69f9      	ldr	r1, [r7, #28]
 8004438:	6a3a      	ldr	r2, [r7, #32]
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e5      	bne.n	8004412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e00f      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	429a      	cmp	r2, r3
 800447e:	d09f      	beq.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3740      	adds	r7, #64	; 0x40
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b0c0      	sub	sp, #256	; 0x100
 8004492:	af00      	add	r7, sp, #0
 8004494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	68d9      	ldr	r1, [r3, #12]
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	ea40 0301 	orr.w	r3, r0, r1
 80044b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044e4:	f021 010c 	bic.w	r1, r1, #12
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044f2:	430b      	orrs	r3, r1
 80044f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	6999      	ldr	r1, [r3, #24]
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	ea40 0301 	orr.w	r3, r0, r1
 8004512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b8f      	ldr	r3, [pc, #572]	; (8004758 <UART_SetConfig+0x2cc>)
 800451c:	429a      	cmp	r2, r3
 800451e:	d005      	beq.n	800452c <UART_SetConfig+0xa0>
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b8d      	ldr	r3, [pc, #564]	; (800475c <UART_SetConfig+0x2d0>)
 8004528:	429a      	cmp	r2, r3
 800452a:	d104      	bne.n	8004536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7fe fe26 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8004530:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004534:	e003      	b.n	800453e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004536:	f7fe fe0d 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 800453a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004548:	f040 810c 	bne.w	8004764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004556:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800455a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	1891      	adds	r1, r2, r2
 8004564:	65b9      	str	r1, [r7, #88]	; 0x58
 8004566:	415b      	adcs	r3, r3
 8004568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800456e:	4621      	mov	r1, r4
 8004570:	eb12 0801 	adds.w	r8, r2, r1
 8004574:	4629      	mov	r1, r5
 8004576:	eb43 0901 	adc.w	r9, r3, r1
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800459c:	462b      	mov	r3, r5
 800459e:	eb49 0303 	adc.w	r3, r9, r3
 80045a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045ba:	460b      	mov	r3, r1
 80045bc:	18db      	adds	r3, r3, r3
 80045be:	653b      	str	r3, [r7, #80]	; 0x50
 80045c0:	4613      	mov	r3, r2
 80045c2:	eb42 0303 	adc.w	r3, r2, r3
 80045c6:	657b      	str	r3, [r7, #84]	; 0x54
 80045c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045d0:	f7fc fa94 	bl	8000afc <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4b61      	ldr	r3, [pc, #388]	; (8004760 <UART_SetConfig+0x2d4>)
 80045da:	fba3 2302 	umull	r2, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	011c      	lsls	r4, r3, #4
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80045fc:	415b      	adcs	r3, r3
 80045fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004604:	4641      	mov	r1, r8
 8004606:	eb12 0a01 	adds.w	sl, r2, r1
 800460a:	4649      	mov	r1, r9
 800460c:	eb43 0b01 	adc.w	fp, r3, r1
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800461c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004624:	4692      	mov	sl, r2
 8004626:	469b      	mov	fp, r3
 8004628:	4643      	mov	r3, r8
 800462a:	eb1a 0303 	adds.w	r3, sl, r3
 800462e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004632:	464b      	mov	r3, r9
 8004634:	eb4b 0303 	adc.w	r3, fp, r3
 8004638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800464c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004650:	460b      	mov	r3, r1
 8004652:	18db      	adds	r3, r3, r3
 8004654:	643b      	str	r3, [r7, #64]	; 0x40
 8004656:	4613      	mov	r3, r2
 8004658:	eb42 0303 	adc.w	r3, r2, r3
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
 800465e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004666:	f7fc fa49 	bl	8000afc <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4611      	mov	r1, r2
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <UART_SetConfig+0x2d4>)
 8004672:	fba3 2301 	umull	r2, r3, r3, r1
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2264      	movs	r2, #100	; 0x64
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	1acb      	subs	r3, r1, r3
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004686:	4b36      	ldr	r3, [pc, #216]	; (8004760 <UART_SetConfig+0x2d4>)
 8004688:	fba3 2302 	umull	r2, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004694:	441c      	add	r4, r3
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80046b0:	415b      	adcs	r3, r3
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046b8:	4641      	mov	r1, r8
 80046ba:	1851      	adds	r1, r2, r1
 80046bc:	6339      	str	r1, [r7, #48]	; 0x30
 80046be:	4649      	mov	r1, r9
 80046c0:	414b      	adcs	r3, r1
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046d0:	4659      	mov	r1, fp
 80046d2:	00cb      	lsls	r3, r1, #3
 80046d4:	4651      	mov	r1, sl
 80046d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046da:	4651      	mov	r1, sl
 80046dc:	00ca      	lsls	r2, r1, #3
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	4642      	mov	r2, r8
 80046e6:	189b      	adds	r3, r3, r2
 80046e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046ec:	464b      	mov	r3, r9
 80046ee:	460a      	mov	r2, r1
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004704:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800470c:	460b      	mov	r3, r1
 800470e:	18db      	adds	r3, r3, r3
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	4613      	mov	r3, r2
 8004714:	eb42 0303 	adc.w	r3, r2, r3
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800471e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004722:	f7fc f9eb 	bl	8000afc <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <UART_SetConfig+0x2d4>)
 800472c:	fba3 1302 	umull	r1, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2164      	movs	r1, #100	; 0x64
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a08      	ldr	r2, [pc, #32]	; (8004760 <UART_SetConfig+0x2d4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 0207 	and.w	r2, r3, #7
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4422      	add	r2, r4
 8004752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004754:	e106      	b.n	8004964 <UART_SetConfig+0x4d8>
 8004756:	bf00      	nop
 8004758:	40011000 	.word	0x40011000
 800475c:	40011400 	.word	0x40011400
 8004760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800476e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004776:	4642      	mov	r2, r8
 8004778:	464b      	mov	r3, r9
 800477a:	1891      	adds	r1, r2, r2
 800477c:	6239      	str	r1, [r7, #32]
 800477e:	415b      	adcs	r3, r3
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004786:	4641      	mov	r1, r8
 8004788:	1854      	adds	r4, r2, r1
 800478a:	4649      	mov	r1, r9
 800478c:	eb43 0501 	adc.w	r5, r3, r1
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	00eb      	lsls	r3, r5, #3
 800479a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479e:	00e2      	lsls	r2, r4, #3
 80047a0:	4614      	mov	r4, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	4643      	mov	r3, r8
 80047a6:	18e3      	adds	r3, r4, r3
 80047a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047ac:	464b      	mov	r3, r9
 80047ae:	eb45 0303 	adc.w	r3, r5, r3
 80047b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047d2:	4629      	mov	r1, r5
 80047d4:	008b      	lsls	r3, r1, #2
 80047d6:	4621      	mov	r1, r4
 80047d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047dc:	4621      	mov	r1, r4
 80047de:	008a      	lsls	r2, r1, #2
 80047e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047e4:	f7fc f98a 	bl	8000afc <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4b60      	ldr	r3, [pc, #384]	; (8004970 <UART_SetConfig+0x4e4>)
 80047ee:	fba3 2302 	umull	r2, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	011c      	lsls	r4, r3, #4
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	61b9      	str	r1, [r7, #24]
 8004810:	415b      	adcs	r3, r3
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004818:	4641      	mov	r1, r8
 800481a:	1851      	adds	r1, r2, r1
 800481c:	6139      	str	r1, [r7, #16]
 800481e:	4649      	mov	r1, r9
 8004820:	414b      	adcs	r3, r1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004830:	4659      	mov	r1, fp
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483a:	4651      	mov	r1, sl
 800483c:	00ca      	lsls	r2, r1, #3
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	4603      	mov	r3, r0
 8004844:	4642      	mov	r2, r8
 8004846:	189b      	adds	r3, r3, r2
 8004848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800484c:	464b      	mov	r3, r9
 800484e:	460a      	mov	r2, r1
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	67bb      	str	r3, [r7, #120]	; 0x78
 8004862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004870:	4649      	mov	r1, r9
 8004872:	008b      	lsls	r3, r1, #2
 8004874:	4641      	mov	r1, r8
 8004876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800487a:	4641      	mov	r1, r8
 800487c:	008a      	lsls	r2, r1, #2
 800487e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004882:	f7fc f93b 	bl	8000afc <__aeabi_uldivmod>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4611      	mov	r1, r2
 800488c:	4b38      	ldr	r3, [pc, #224]	; (8004970 <UART_SetConfig+0x4e4>)
 800488e:	fba3 2301 	umull	r2, r3, r3, r1
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2264      	movs	r2, #100	; 0x64
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	1acb      	subs	r3, r1, r3
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	3332      	adds	r3, #50	; 0x32
 80048a0:	4a33      	ldr	r2, [pc, #204]	; (8004970 <UART_SetConfig+0x4e4>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ac:	441c      	add	r4, r3
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b2:	2200      	movs	r2, #0
 80048b4:	673b      	str	r3, [r7, #112]	; 0x70
 80048b6:	677a      	str	r2, [r7, #116]	; 0x74
 80048b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	415b      	adcs	r3, r3
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048cc:	4641      	mov	r1, r8
 80048ce:	1851      	adds	r1, r2, r1
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	4649      	mov	r1, r9
 80048d4:	414b      	adcs	r3, r1
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048e4:	4659      	mov	r1, fp
 80048e6:	00cb      	lsls	r3, r1, #3
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ee:	4651      	mov	r1, sl
 80048f0:	00ca      	lsls	r2, r1, #3
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	4642      	mov	r2, r8
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80048fe:	464b      	mov	r3, r9
 8004900:	460a      	mov	r2, r1
 8004902:	eb42 0303 	adc.w	r3, r2, r3
 8004906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	663b      	str	r3, [r7, #96]	; 0x60
 8004912:	667a      	str	r2, [r7, #100]	; 0x64
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004920:	4649      	mov	r1, r9
 8004922:	008b      	lsls	r3, r1, #2
 8004924:	4641      	mov	r1, r8
 8004926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492a:	4641      	mov	r1, r8
 800492c:	008a      	lsls	r2, r1, #2
 800492e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004932:	f7fc f8e3 	bl	8000afc <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <UART_SetConfig+0x4e4>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	3332      	adds	r3, #50	; 0x32
 800494e:	4a08      	ldr	r2, [pc, #32]	; (8004970 <UART_SetConfig+0x4e4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f003 020f 	and.w	r2, r3, #15
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4422      	add	r2, r4
 8004962:	609a      	str	r2, [r3, #8]
}
 8004964:	bf00      	nop
 8004966:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800496a:	46bd      	mov	sp, r7
 800496c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004970:	51eb851f 	.word	0x51eb851f

08004974 <sbrk_aligned>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	4e0e      	ldr	r6, [pc, #56]	; (80049b0 <sbrk_aligned+0x3c>)
 8004978:	460c      	mov	r4, r1
 800497a:	6831      	ldr	r1, [r6, #0]
 800497c:	4605      	mov	r5, r0
 800497e:	b911      	cbnz	r1, 8004986 <sbrk_aligned+0x12>
 8004980:	f000 f8cc 	bl	8004b1c <_sbrk_r>
 8004984:	6030      	str	r0, [r6, #0]
 8004986:	4621      	mov	r1, r4
 8004988:	4628      	mov	r0, r5
 800498a:	f000 f8c7 	bl	8004b1c <_sbrk_r>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	d00a      	beq.n	80049a8 <sbrk_aligned+0x34>
 8004992:	1cc4      	adds	r4, r0, #3
 8004994:	f024 0403 	bic.w	r4, r4, #3
 8004998:	42a0      	cmp	r0, r4
 800499a:	d007      	beq.n	80049ac <sbrk_aligned+0x38>
 800499c:	1a21      	subs	r1, r4, r0
 800499e:	4628      	mov	r0, r5
 80049a0:	f000 f8bc 	bl	8004b1c <_sbrk_r>
 80049a4:	3001      	adds	r0, #1
 80049a6:	d101      	bne.n	80049ac <sbrk_aligned+0x38>
 80049a8:	f04f 34ff 	mov.w	r4, #4294967295
 80049ac:	4620      	mov	r0, r4
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	20000164 	.word	0x20000164

080049b4 <_malloc_r>:
 80049b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b8:	1ccd      	adds	r5, r1, #3
 80049ba:	f025 0503 	bic.w	r5, r5, #3
 80049be:	3508      	adds	r5, #8
 80049c0:	2d0c      	cmp	r5, #12
 80049c2:	bf38      	it	cc
 80049c4:	250c      	movcc	r5, #12
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	4607      	mov	r7, r0
 80049ca:	db01      	blt.n	80049d0 <_malloc_r+0x1c>
 80049cc:	42a9      	cmp	r1, r5
 80049ce:	d905      	bls.n	80049dc <_malloc_r+0x28>
 80049d0:	230c      	movs	r3, #12
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	2600      	movs	r6, #0
 80049d6:	4630      	mov	r0, r6
 80049d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ab0 <_malloc_r+0xfc>
 80049e0:	f000 f868 	bl	8004ab4 <__malloc_lock>
 80049e4:	f8d8 3000 	ldr.w	r3, [r8]
 80049e8:	461c      	mov	r4, r3
 80049ea:	bb5c      	cbnz	r4, 8004a44 <_malloc_r+0x90>
 80049ec:	4629      	mov	r1, r5
 80049ee:	4638      	mov	r0, r7
 80049f0:	f7ff ffc0 	bl	8004974 <sbrk_aligned>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	4604      	mov	r4, r0
 80049f8:	d155      	bne.n	8004aa6 <_malloc_r+0xf2>
 80049fa:	f8d8 4000 	ldr.w	r4, [r8]
 80049fe:	4626      	mov	r6, r4
 8004a00:	2e00      	cmp	r6, #0
 8004a02:	d145      	bne.n	8004a90 <_malloc_r+0xdc>
 8004a04:	2c00      	cmp	r4, #0
 8004a06:	d048      	beq.n	8004a9a <_malloc_r+0xe6>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	eb04 0903 	add.w	r9, r4, r3
 8004a12:	f000 f883 	bl	8004b1c <_sbrk_r>
 8004a16:	4581      	cmp	r9, r0
 8004a18:	d13f      	bne.n	8004a9a <_malloc_r+0xe6>
 8004a1a:	6821      	ldr	r1, [r4, #0]
 8004a1c:	1a6d      	subs	r5, r5, r1
 8004a1e:	4629      	mov	r1, r5
 8004a20:	4638      	mov	r0, r7
 8004a22:	f7ff ffa7 	bl	8004974 <sbrk_aligned>
 8004a26:	3001      	adds	r0, #1
 8004a28:	d037      	beq.n	8004a9a <_malloc_r+0xe6>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	442b      	add	r3, r5
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	f8d8 3000 	ldr.w	r3, [r8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d038      	beq.n	8004aaa <_malloc_r+0xf6>
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	42a2      	cmp	r2, r4
 8004a3c:	d12b      	bne.n	8004a96 <_malloc_r+0xe2>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	e00f      	b.n	8004a64 <_malloc_r+0xb0>
 8004a44:	6822      	ldr	r2, [r4, #0]
 8004a46:	1b52      	subs	r2, r2, r5
 8004a48:	d41f      	bmi.n	8004a8a <_malloc_r+0xd6>
 8004a4a:	2a0b      	cmp	r2, #11
 8004a4c:	d917      	bls.n	8004a7e <_malloc_r+0xca>
 8004a4e:	1961      	adds	r1, r4, r5
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	6025      	str	r5, [r4, #0]
 8004a54:	bf18      	it	ne
 8004a56:	6059      	strne	r1, [r3, #4]
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	bf08      	it	eq
 8004a5c:	f8c8 1000 	streq.w	r1, [r8]
 8004a60:	5162      	str	r2, [r4, r5]
 8004a62:	604b      	str	r3, [r1, #4]
 8004a64:	4638      	mov	r0, r7
 8004a66:	f104 060b 	add.w	r6, r4, #11
 8004a6a:	f000 f829 	bl	8004ac0 <__malloc_unlock>
 8004a6e:	f026 0607 	bic.w	r6, r6, #7
 8004a72:	1d23      	adds	r3, r4, #4
 8004a74:	1af2      	subs	r2, r6, r3
 8004a76:	d0ae      	beq.n	80049d6 <_malloc_r+0x22>
 8004a78:	1b9b      	subs	r3, r3, r6
 8004a7a:	50a3      	str	r3, [r4, r2]
 8004a7c:	e7ab      	b.n	80049d6 <_malloc_r+0x22>
 8004a7e:	42a3      	cmp	r3, r4
 8004a80:	6862      	ldr	r2, [r4, #4]
 8004a82:	d1dd      	bne.n	8004a40 <_malloc_r+0x8c>
 8004a84:	f8c8 2000 	str.w	r2, [r8]
 8004a88:	e7ec      	b.n	8004a64 <_malloc_r+0xb0>
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	6864      	ldr	r4, [r4, #4]
 8004a8e:	e7ac      	b.n	80049ea <_malloc_r+0x36>
 8004a90:	4634      	mov	r4, r6
 8004a92:	6876      	ldr	r6, [r6, #4]
 8004a94:	e7b4      	b.n	8004a00 <_malloc_r+0x4c>
 8004a96:	4613      	mov	r3, r2
 8004a98:	e7cc      	b.n	8004a34 <_malloc_r+0x80>
 8004a9a:	230c      	movs	r3, #12
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	f000 f80e 	bl	8004ac0 <__malloc_unlock>
 8004aa4:	e797      	b.n	80049d6 <_malloc_r+0x22>
 8004aa6:	6025      	str	r5, [r4, #0]
 8004aa8:	e7dc      	b.n	8004a64 <_malloc_r+0xb0>
 8004aaa:	605b      	str	r3, [r3, #4]
 8004aac:	deff      	udf	#255	; 0xff
 8004aae:	bf00      	nop
 8004ab0:	20000160 	.word	0x20000160

08004ab4 <__malloc_lock>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__malloc_lock+0x8>)
 8004ab6:	f000 b86b 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	200002a4 	.word	0x200002a4

08004ac0 <__malloc_unlock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__malloc_unlock+0x8>)
 8004ac2:	f000 b866 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	200002a4 	.word	0x200002a4

08004acc <siprintf>:
 8004acc:	b40e      	push	{r1, r2, r3}
 8004ace:	b500      	push	{lr}
 8004ad0:	b09c      	sub	sp, #112	; 0x70
 8004ad2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ad4:	9002      	str	r0, [sp, #8]
 8004ad6:	9006      	str	r0, [sp, #24]
 8004ad8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004adc:	4809      	ldr	r0, [pc, #36]	; (8004b04 <siprintf+0x38>)
 8004ade:	9107      	str	r1, [sp, #28]
 8004ae0:	9104      	str	r1, [sp, #16]
 8004ae2:	4909      	ldr	r1, [pc, #36]	; (8004b08 <siprintf+0x3c>)
 8004ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ae8:	9105      	str	r1, [sp, #20]
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	a902      	add	r1, sp, #8
 8004af0:	f000 f904 	bl	8004cfc <_svfiprintf_r>
 8004af4:	9b02      	ldr	r3, [sp, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	b01c      	add	sp, #112	; 0x70
 8004afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b00:	b003      	add	sp, #12
 8004b02:	4770      	bx	lr
 8004b04:	20000058 	.word	0x20000058
 8004b08:	ffff0208 	.word	0xffff0208

08004b0c <memset>:
 8004b0c:	4402      	add	r2, r0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d100      	bne.n	8004b16 <memset+0xa>
 8004b14:	4770      	bx	lr
 8004b16:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1a:	e7f9      	b.n	8004b10 <memset+0x4>

08004b1c <_sbrk_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4d06      	ldr	r5, [pc, #24]	; (8004b38 <_sbrk_r+0x1c>)
 8004b20:	2300      	movs	r3, #0
 8004b22:	4604      	mov	r4, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	f7fc fec6 	bl	80018b8 <_sbrk>
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d102      	bne.n	8004b36 <_sbrk_r+0x1a>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	b103      	cbz	r3, 8004b36 <_sbrk_r+0x1a>
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	200002a0 	.word	0x200002a0

08004b3c <__errno>:
 8004b3c:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <__errno+0x8>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000058 	.word	0x20000058

08004b48 <__libc_init_array>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	4d0d      	ldr	r5, [pc, #52]	; (8004b80 <__libc_init_array+0x38>)
 8004b4c:	4c0d      	ldr	r4, [pc, #52]	; (8004b84 <__libc_init_array+0x3c>)
 8004b4e:	1b64      	subs	r4, r4, r5
 8004b50:	10a4      	asrs	r4, r4, #2
 8004b52:	2600      	movs	r6, #0
 8004b54:	42a6      	cmp	r6, r4
 8004b56:	d109      	bne.n	8004b6c <__libc_init_array+0x24>
 8004b58:	4d0b      	ldr	r5, [pc, #44]	; (8004b88 <__libc_init_array+0x40>)
 8004b5a:	4c0c      	ldr	r4, [pc, #48]	; (8004b8c <__libc_init_array+0x44>)
 8004b5c:	f000 fd2c 	bl	80055b8 <_init>
 8004b60:	1b64      	subs	r4, r4, r5
 8004b62:	10a4      	asrs	r4, r4, #2
 8004b64:	2600      	movs	r6, #0
 8004b66:	42a6      	cmp	r6, r4
 8004b68:	d105      	bne.n	8004b76 <__libc_init_array+0x2e>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b70:	4798      	blx	r3
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7ee      	b.n	8004b54 <__libc_init_array+0xc>
 8004b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b7a:	4798      	blx	r3
 8004b7c:	3601      	adds	r6, #1
 8004b7e:	e7f2      	b.n	8004b66 <__libc_init_array+0x1e>
 8004b80:	08005674 	.word	0x08005674
 8004b84:	08005674 	.word	0x08005674
 8004b88:	08005674 	.word	0x08005674
 8004b8c:	08005678 	.word	0x08005678

08004b90 <__retarget_lock_acquire_recursive>:
 8004b90:	4770      	bx	lr

08004b92 <__retarget_lock_release_recursive>:
 8004b92:	4770      	bx	lr

08004b94 <memcpy>:
 8004b94:	440a      	add	r2, r1
 8004b96:	4291      	cmp	r1, r2
 8004b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b9c:	d100      	bne.n	8004ba0 <memcpy+0xc>
 8004b9e:	4770      	bx	lr
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004baa:	4291      	cmp	r1, r2
 8004bac:	d1f9      	bne.n	8004ba2 <memcpy+0xe>
 8004bae:	bd10      	pop	{r4, pc}

08004bb0 <_free_r>:
 8004bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bb2:	2900      	cmp	r1, #0
 8004bb4:	d044      	beq.n	8004c40 <_free_r+0x90>
 8004bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bba:	9001      	str	r0, [sp, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004bc2:	bfb8      	it	lt
 8004bc4:	18e4      	addlt	r4, r4, r3
 8004bc6:	f7ff ff75 	bl	8004ab4 <__malloc_lock>
 8004bca:	4a1e      	ldr	r2, [pc, #120]	; (8004c44 <_free_r+0x94>)
 8004bcc:	9801      	ldr	r0, [sp, #4]
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	b933      	cbnz	r3, 8004be0 <_free_r+0x30>
 8004bd2:	6063      	str	r3, [r4, #4]
 8004bd4:	6014      	str	r4, [r2, #0]
 8004bd6:	b003      	add	sp, #12
 8004bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bdc:	f7ff bf70 	b.w	8004ac0 <__malloc_unlock>
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d908      	bls.n	8004bf6 <_free_r+0x46>
 8004be4:	6825      	ldr	r5, [r4, #0]
 8004be6:	1961      	adds	r1, r4, r5
 8004be8:	428b      	cmp	r3, r1
 8004bea:	bf01      	itttt	eq
 8004bec:	6819      	ldreq	r1, [r3, #0]
 8004bee:	685b      	ldreq	r3, [r3, #4]
 8004bf0:	1949      	addeq	r1, r1, r5
 8004bf2:	6021      	streq	r1, [r4, #0]
 8004bf4:	e7ed      	b.n	8004bd2 <_free_r+0x22>
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	b10b      	cbz	r3, 8004c00 <_free_r+0x50>
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	d9fa      	bls.n	8004bf6 <_free_r+0x46>
 8004c00:	6811      	ldr	r1, [r2, #0]
 8004c02:	1855      	adds	r5, r2, r1
 8004c04:	42a5      	cmp	r5, r4
 8004c06:	d10b      	bne.n	8004c20 <_free_r+0x70>
 8004c08:	6824      	ldr	r4, [r4, #0]
 8004c0a:	4421      	add	r1, r4
 8004c0c:	1854      	adds	r4, r2, r1
 8004c0e:	42a3      	cmp	r3, r4
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	d1e0      	bne.n	8004bd6 <_free_r+0x26>
 8004c14:	681c      	ldr	r4, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	6053      	str	r3, [r2, #4]
 8004c1a:	440c      	add	r4, r1
 8004c1c:	6014      	str	r4, [r2, #0]
 8004c1e:	e7da      	b.n	8004bd6 <_free_r+0x26>
 8004c20:	d902      	bls.n	8004c28 <_free_r+0x78>
 8004c22:	230c      	movs	r3, #12
 8004c24:	6003      	str	r3, [r0, #0]
 8004c26:	e7d6      	b.n	8004bd6 <_free_r+0x26>
 8004c28:	6825      	ldr	r5, [r4, #0]
 8004c2a:	1961      	adds	r1, r4, r5
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	bf04      	itt	eq
 8004c30:	6819      	ldreq	r1, [r3, #0]
 8004c32:	685b      	ldreq	r3, [r3, #4]
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	bf04      	itt	eq
 8004c38:	1949      	addeq	r1, r1, r5
 8004c3a:	6021      	streq	r1, [r4, #0]
 8004c3c:	6054      	str	r4, [r2, #4]
 8004c3e:	e7ca      	b.n	8004bd6 <_free_r+0x26>
 8004c40:	b003      	add	sp, #12
 8004c42:	bd30      	pop	{r4, r5, pc}
 8004c44:	20000160 	.word	0x20000160

08004c48 <__ssputs_r>:
 8004c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4c:	688e      	ldr	r6, [r1, #8]
 8004c4e:	461f      	mov	r7, r3
 8004c50:	42be      	cmp	r6, r7
 8004c52:	680b      	ldr	r3, [r1, #0]
 8004c54:	4682      	mov	sl, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	4690      	mov	r8, r2
 8004c5a:	d82c      	bhi.n	8004cb6 <__ssputs_r+0x6e>
 8004c5c:	898a      	ldrh	r2, [r1, #12]
 8004c5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c62:	d026      	beq.n	8004cb2 <__ssputs_r+0x6a>
 8004c64:	6965      	ldr	r5, [r4, #20]
 8004c66:	6909      	ldr	r1, [r1, #16]
 8004c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c6c:	eba3 0901 	sub.w	r9, r3, r1
 8004c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c74:	1c7b      	adds	r3, r7, #1
 8004c76:	444b      	add	r3, r9
 8004c78:	106d      	asrs	r5, r5, #1
 8004c7a:	429d      	cmp	r5, r3
 8004c7c:	bf38      	it	cc
 8004c7e:	461d      	movcc	r5, r3
 8004c80:	0553      	lsls	r3, r2, #21
 8004c82:	d527      	bpl.n	8004cd4 <__ssputs_r+0x8c>
 8004c84:	4629      	mov	r1, r5
 8004c86:	f7ff fe95 	bl	80049b4 <_malloc_r>
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	b360      	cbz	r0, 8004ce8 <__ssputs_r+0xa0>
 8004c8e:	6921      	ldr	r1, [r4, #16]
 8004c90:	464a      	mov	r2, r9
 8004c92:	f7ff ff7f 	bl	8004b94 <memcpy>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca0:	81a3      	strh	r3, [r4, #12]
 8004ca2:	6126      	str	r6, [r4, #16]
 8004ca4:	6165      	str	r5, [r4, #20]
 8004ca6:	444e      	add	r6, r9
 8004ca8:	eba5 0509 	sub.w	r5, r5, r9
 8004cac:	6026      	str	r6, [r4, #0]
 8004cae:	60a5      	str	r5, [r4, #8]
 8004cb0:	463e      	mov	r6, r7
 8004cb2:	42be      	cmp	r6, r7
 8004cb4:	d900      	bls.n	8004cb8 <__ssputs_r+0x70>
 8004cb6:	463e      	mov	r6, r7
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	4632      	mov	r2, r6
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	f000 faab 	bl	8005218 <memmove>
 8004cc2:	68a3      	ldr	r3, [r4, #8]
 8004cc4:	1b9b      	subs	r3, r3, r6
 8004cc6:	60a3      	str	r3, [r4, #8]
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	4433      	add	r3, r6
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd4:	462a      	mov	r2, r5
 8004cd6:	f000 fab9 	bl	800524c <_realloc_r>
 8004cda:	4606      	mov	r6, r0
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d1e0      	bne.n	8004ca2 <__ssputs_r+0x5a>
 8004ce0:	6921      	ldr	r1, [r4, #16]
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	f7ff ff64 	bl	8004bb0 <_free_r>
 8004ce8:	230c      	movs	r3, #12
 8004cea:	f8ca 3000 	str.w	r3, [sl]
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfa:	e7e9      	b.n	8004cd0 <__ssputs_r+0x88>

08004cfc <_svfiprintf_r>:
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	4698      	mov	r8, r3
 8004d02:	898b      	ldrh	r3, [r1, #12]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	b09d      	sub	sp, #116	; 0x74
 8004d08:	4607      	mov	r7, r0
 8004d0a:	460d      	mov	r5, r1
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	d50e      	bpl.n	8004d2e <_svfiprintf_r+0x32>
 8004d10:	690b      	ldr	r3, [r1, #16]
 8004d12:	b963      	cbnz	r3, 8004d2e <_svfiprintf_r+0x32>
 8004d14:	2140      	movs	r1, #64	; 0x40
 8004d16:	f7ff fe4d 	bl	80049b4 <_malloc_r>
 8004d1a:	6028      	str	r0, [r5, #0]
 8004d1c:	6128      	str	r0, [r5, #16]
 8004d1e:	b920      	cbnz	r0, 8004d2a <_svfiprintf_r+0x2e>
 8004d20:	230c      	movs	r3, #12
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	e0d0      	b.n	8004ecc <_svfiprintf_r+0x1d0>
 8004d2a:	2340      	movs	r3, #64	; 0x40
 8004d2c:	616b      	str	r3, [r5, #20]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9309      	str	r3, [sp, #36]	; 0x24
 8004d32:	2320      	movs	r3, #32
 8004d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d3c:	2330      	movs	r3, #48	; 0x30
 8004d3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ee4 <_svfiprintf_r+0x1e8>
 8004d42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d46:	f04f 0901 	mov.w	r9, #1
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	469a      	mov	sl, r3
 8004d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d52:	b10a      	cbz	r2, 8004d58 <_svfiprintf_r+0x5c>
 8004d54:	2a25      	cmp	r2, #37	; 0x25
 8004d56:	d1f9      	bne.n	8004d4c <_svfiprintf_r+0x50>
 8004d58:	ebba 0b04 	subs.w	fp, sl, r4
 8004d5c:	d00b      	beq.n	8004d76 <_svfiprintf_r+0x7a>
 8004d5e:	465b      	mov	r3, fp
 8004d60:	4622      	mov	r2, r4
 8004d62:	4629      	mov	r1, r5
 8004d64:	4638      	mov	r0, r7
 8004d66:	f7ff ff6f 	bl	8004c48 <__ssputs_r>
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f000 80a9 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d72:	445a      	add	r2, fp
 8004d74:	9209      	str	r2, [sp, #36]	; 0x24
 8004d76:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80a1 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d80:	2300      	movs	r3, #0
 8004d82:	f04f 32ff 	mov.w	r2, #4294967295
 8004d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d8a:	f10a 0a01 	add.w	sl, sl, #1
 8004d8e:	9304      	str	r3, [sp, #16]
 8004d90:	9307      	str	r3, [sp, #28]
 8004d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d96:	931a      	str	r3, [sp, #104]	; 0x68
 8004d98:	4654      	mov	r4, sl
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da0:	4850      	ldr	r0, [pc, #320]	; (8004ee4 <_svfiprintf_r+0x1e8>)
 8004da2:	f7fb fa3d 	bl	8000220 <memchr>
 8004da6:	9a04      	ldr	r2, [sp, #16]
 8004da8:	b9d8      	cbnz	r0, 8004de2 <_svfiprintf_r+0xe6>
 8004daa:	06d0      	lsls	r0, r2, #27
 8004dac:	bf44      	itt	mi
 8004dae:	2320      	movmi	r3, #32
 8004db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004db4:	0711      	lsls	r1, r2, #28
 8004db6:	bf44      	itt	mi
 8004db8:	232b      	movmi	r3, #43	; 0x2b
 8004dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc4:	d015      	beq.n	8004df2 <_svfiprintf_r+0xf6>
 8004dc6:	9a07      	ldr	r2, [sp, #28]
 8004dc8:	4654      	mov	r4, sl
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f04f 0c0a 	mov.w	ip, #10
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dd6:	3b30      	subs	r3, #48	; 0x30
 8004dd8:	2b09      	cmp	r3, #9
 8004dda:	d94d      	bls.n	8004e78 <_svfiprintf_r+0x17c>
 8004ddc:	b1b0      	cbz	r0, 8004e0c <_svfiprintf_r+0x110>
 8004dde:	9207      	str	r2, [sp, #28]
 8004de0:	e014      	b.n	8004e0c <_svfiprintf_r+0x110>
 8004de2:	eba0 0308 	sub.w	r3, r0, r8
 8004de6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dea:	4313      	orrs	r3, r2
 8004dec:	9304      	str	r3, [sp, #16]
 8004dee:	46a2      	mov	sl, r4
 8004df0:	e7d2      	b.n	8004d98 <_svfiprintf_r+0x9c>
 8004df2:	9b03      	ldr	r3, [sp, #12]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	9103      	str	r1, [sp, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bfbb      	ittet	lt
 8004dfe:	425b      	neglt	r3, r3
 8004e00:	f042 0202 	orrlt.w	r2, r2, #2
 8004e04:	9307      	strge	r3, [sp, #28]
 8004e06:	9307      	strlt	r3, [sp, #28]
 8004e08:	bfb8      	it	lt
 8004e0a:	9204      	strlt	r2, [sp, #16]
 8004e0c:	7823      	ldrb	r3, [r4, #0]
 8004e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e10:	d10c      	bne.n	8004e2c <_svfiprintf_r+0x130>
 8004e12:	7863      	ldrb	r3, [r4, #1]
 8004e14:	2b2a      	cmp	r3, #42	; 0x2a
 8004e16:	d134      	bne.n	8004e82 <_svfiprintf_r+0x186>
 8004e18:	9b03      	ldr	r3, [sp, #12]
 8004e1a:	1d1a      	adds	r2, r3, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	9203      	str	r2, [sp, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bfb8      	it	lt
 8004e24:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e28:	3402      	adds	r4, #2
 8004e2a:	9305      	str	r3, [sp, #20]
 8004e2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ef4 <_svfiprintf_r+0x1f8>
 8004e30:	7821      	ldrb	r1, [r4, #0]
 8004e32:	2203      	movs	r2, #3
 8004e34:	4650      	mov	r0, sl
 8004e36:	f7fb f9f3 	bl	8000220 <memchr>
 8004e3a:	b138      	cbz	r0, 8004e4c <_svfiprintf_r+0x150>
 8004e3c:	9b04      	ldr	r3, [sp, #16]
 8004e3e:	eba0 000a 	sub.w	r0, r0, sl
 8004e42:	2240      	movs	r2, #64	; 0x40
 8004e44:	4082      	lsls	r2, r0
 8004e46:	4313      	orrs	r3, r2
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e50:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <_svfiprintf_r+0x1ec>)
 8004e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e56:	2206      	movs	r2, #6
 8004e58:	f7fb f9e2 	bl	8000220 <memchr>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d038      	beq.n	8004ed2 <_svfiprintf_r+0x1d6>
 8004e60:	4b22      	ldr	r3, [pc, #136]	; (8004eec <_svfiprintf_r+0x1f0>)
 8004e62:	bb1b      	cbnz	r3, 8004eac <_svfiprintf_r+0x1b0>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	3307      	adds	r3, #7
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e72:	4433      	add	r3, r6
 8004e74:	9309      	str	r3, [sp, #36]	; 0x24
 8004e76:	e768      	b.n	8004d4a <_svfiprintf_r+0x4e>
 8004e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7a6      	b.n	8004dd0 <_svfiprintf_r+0xd4>
 8004e82:	2300      	movs	r3, #0
 8004e84:	3401      	adds	r4, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f04f 0c0a 	mov.w	ip, #10
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e94:	3a30      	subs	r2, #48	; 0x30
 8004e96:	2a09      	cmp	r2, #9
 8004e98:	d903      	bls.n	8004ea2 <_svfiprintf_r+0x1a6>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0c6      	beq.n	8004e2c <_svfiprintf_r+0x130>
 8004e9e:	9105      	str	r1, [sp, #20]
 8004ea0:	e7c4      	b.n	8004e2c <_svfiprintf_r+0x130>
 8004ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7f0      	b.n	8004e8e <_svfiprintf_r+0x192>
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <_svfiprintf_r+0x1f4>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f3af 8000 	nop.w
 8004ebc:	1c42      	adds	r2, r0, #1
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	d1d6      	bne.n	8004e70 <_svfiprintf_r+0x174>
 8004ec2:	89ab      	ldrh	r3, [r5, #12]
 8004ec4:	065b      	lsls	r3, r3, #25
 8004ec6:	f53f af2d 	bmi.w	8004d24 <_svfiprintf_r+0x28>
 8004eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ecc:	b01d      	add	sp, #116	; 0x74
 8004ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed2:	ab03      	add	r3, sp, #12
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	462a      	mov	r2, r5
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <_svfiprintf_r+0x1f4>)
 8004eda:	a904      	add	r1, sp, #16
 8004edc:	4638      	mov	r0, r7
 8004ede:	f000 f879 	bl	8004fd4 <_printf_i>
 8004ee2:	e7eb      	b.n	8004ebc <_svfiprintf_r+0x1c0>
 8004ee4:	08005600 	.word	0x08005600
 8004ee8:	0800560a 	.word	0x0800560a
 8004eec:	00000000 	.word	0x00000000
 8004ef0:	08004c49 	.word	0x08004c49
 8004ef4:	08005606 	.word	0x08005606

08004ef8 <_printf_common>:
 8004ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004efc:	4616      	mov	r6, r2
 8004efe:	4699      	mov	r9, r3
 8004f00:	688a      	ldr	r2, [r1, #8]
 8004f02:	690b      	ldr	r3, [r1, #16]
 8004f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfb8      	it	lt
 8004f0c:	4613      	movlt	r3, r2
 8004f0e:	6033      	str	r3, [r6, #0]
 8004f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f14:	4607      	mov	r7, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	b10a      	cbz	r2, 8004f1e <_printf_common+0x26>
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	0699      	lsls	r1, r3, #26
 8004f22:	bf42      	ittt	mi
 8004f24:	6833      	ldrmi	r3, [r6, #0]
 8004f26:	3302      	addmi	r3, #2
 8004f28:	6033      	strmi	r3, [r6, #0]
 8004f2a:	6825      	ldr	r5, [r4, #0]
 8004f2c:	f015 0506 	ands.w	r5, r5, #6
 8004f30:	d106      	bne.n	8004f40 <_printf_common+0x48>
 8004f32:	f104 0a19 	add.w	sl, r4, #25
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	6832      	ldr	r2, [r6, #0]
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	dc26      	bgt.n	8004f8e <_printf_common+0x96>
 8004f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f44:	1e13      	subs	r3, r2, #0
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	bf18      	it	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	0692      	lsls	r2, r2, #26
 8004f4e:	d42b      	bmi.n	8004fa8 <_printf_common+0xb0>
 8004f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f54:	4649      	mov	r1, r9
 8004f56:	4638      	mov	r0, r7
 8004f58:	47c0      	blx	r8
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d01e      	beq.n	8004f9c <_printf_common+0xa4>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	6922      	ldr	r2, [r4, #16]
 8004f62:	f003 0306 	and.w	r3, r3, #6
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	bf02      	ittt	eq
 8004f6a:	68e5      	ldreq	r5, [r4, #12]
 8004f6c:	6833      	ldreq	r3, [r6, #0]
 8004f6e:	1aed      	subeq	r5, r5, r3
 8004f70:	68a3      	ldr	r3, [r4, #8]
 8004f72:	bf0c      	ite	eq
 8004f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f78:	2500      	movne	r5, #0
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bfc4      	itt	gt
 8004f7e:	1a9b      	subgt	r3, r3, r2
 8004f80:	18ed      	addgt	r5, r5, r3
 8004f82:	2600      	movs	r6, #0
 8004f84:	341a      	adds	r4, #26
 8004f86:	42b5      	cmp	r5, r6
 8004f88:	d11a      	bne.n	8004fc0 <_printf_common+0xc8>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e008      	b.n	8004fa0 <_printf_common+0xa8>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4652      	mov	r2, sl
 8004f92:	4649      	mov	r1, r9
 8004f94:	4638      	mov	r0, r7
 8004f96:	47c0      	blx	r8
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d103      	bne.n	8004fa4 <_printf_common+0xac>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	e7c6      	b.n	8004f36 <_printf_common+0x3e>
 8004fa8:	18e1      	adds	r1, r4, r3
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	2030      	movs	r0, #48	; 0x30
 8004fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fb2:	4422      	add	r2, r4
 8004fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	e7c7      	b.n	8004f50 <_printf_common+0x58>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	47c0      	blx	r8
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d0e6      	beq.n	8004f9c <_printf_common+0xa4>
 8004fce:	3601      	adds	r6, #1
 8004fd0:	e7d9      	b.n	8004f86 <_printf_common+0x8e>
	...

08004fd4 <_printf_i>:
 8004fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd8:	7e0f      	ldrb	r7, [r1, #24]
 8004fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fdc:	2f78      	cmp	r7, #120	; 0x78
 8004fde:	4691      	mov	r9, r2
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	469a      	mov	sl, r3
 8004fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fea:	d807      	bhi.n	8004ffc <_printf_i+0x28>
 8004fec:	2f62      	cmp	r7, #98	; 0x62
 8004fee:	d80a      	bhi.n	8005006 <_printf_i+0x32>
 8004ff0:	2f00      	cmp	r7, #0
 8004ff2:	f000 80d4 	beq.w	800519e <_printf_i+0x1ca>
 8004ff6:	2f58      	cmp	r7, #88	; 0x58
 8004ff8:	f000 80c0 	beq.w	800517c <_printf_i+0x1a8>
 8004ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005004:	e03a      	b.n	800507c <_printf_i+0xa8>
 8005006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800500a:	2b15      	cmp	r3, #21
 800500c:	d8f6      	bhi.n	8004ffc <_printf_i+0x28>
 800500e:	a101      	add	r1, pc, #4	; (adr r1, 8005014 <_printf_i+0x40>)
 8005010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005014:	0800506d 	.word	0x0800506d
 8005018:	08005081 	.word	0x08005081
 800501c:	08004ffd 	.word	0x08004ffd
 8005020:	08004ffd 	.word	0x08004ffd
 8005024:	08004ffd 	.word	0x08004ffd
 8005028:	08004ffd 	.word	0x08004ffd
 800502c:	08005081 	.word	0x08005081
 8005030:	08004ffd 	.word	0x08004ffd
 8005034:	08004ffd 	.word	0x08004ffd
 8005038:	08004ffd 	.word	0x08004ffd
 800503c:	08004ffd 	.word	0x08004ffd
 8005040:	08005185 	.word	0x08005185
 8005044:	080050ad 	.word	0x080050ad
 8005048:	0800513f 	.word	0x0800513f
 800504c:	08004ffd 	.word	0x08004ffd
 8005050:	08004ffd 	.word	0x08004ffd
 8005054:	080051a7 	.word	0x080051a7
 8005058:	08004ffd 	.word	0x08004ffd
 800505c:	080050ad 	.word	0x080050ad
 8005060:	08004ffd 	.word	0x08004ffd
 8005064:	08004ffd 	.word	0x08004ffd
 8005068:	08005147 	.word	0x08005147
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	1d1a      	adds	r2, r3, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	602a      	str	r2, [r5, #0]
 8005074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800507c:	2301      	movs	r3, #1
 800507e:	e09f      	b.n	80051c0 <_printf_i+0x1ec>
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	682b      	ldr	r3, [r5, #0]
 8005084:	0607      	lsls	r7, r0, #24
 8005086:	f103 0104 	add.w	r1, r3, #4
 800508a:	6029      	str	r1, [r5, #0]
 800508c:	d501      	bpl.n	8005092 <_printf_i+0xbe>
 800508e:	681e      	ldr	r6, [r3, #0]
 8005090:	e003      	b.n	800509a <_printf_i+0xc6>
 8005092:	0646      	lsls	r6, r0, #25
 8005094:	d5fb      	bpl.n	800508e <_printf_i+0xba>
 8005096:	f9b3 6000 	ldrsh.w	r6, [r3]
 800509a:	2e00      	cmp	r6, #0
 800509c:	da03      	bge.n	80050a6 <_printf_i+0xd2>
 800509e:	232d      	movs	r3, #45	; 0x2d
 80050a0:	4276      	negs	r6, r6
 80050a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a6:	485a      	ldr	r0, [pc, #360]	; (8005210 <_printf_i+0x23c>)
 80050a8:	230a      	movs	r3, #10
 80050aa:	e012      	b.n	80050d2 <_printf_i+0xfe>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	6820      	ldr	r0, [r4, #0]
 80050b0:	1d19      	adds	r1, r3, #4
 80050b2:	6029      	str	r1, [r5, #0]
 80050b4:	0605      	lsls	r5, r0, #24
 80050b6:	d501      	bpl.n	80050bc <_printf_i+0xe8>
 80050b8:	681e      	ldr	r6, [r3, #0]
 80050ba:	e002      	b.n	80050c2 <_printf_i+0xee>
 80050bc:	0641      	lsls	r1, r0, #25
 80050be:	d5fb      	bpl.n	80050b8 <_printf_i+0xe4>
 80050c0:	881e      	ldrh	r6, [r3, #0]
 80050c2:	4853      	ldr	r0, [pc, #332]	; (8005210 <_printf_i+0x23c>)
 80050c4:	2f6f      	cmp	r7, #111	; 0x6f
 80050c6:	bf0c      	ite	eq
 80050c8:	2308      	moveq	r3, #8
 80050ca:	230a      	movne	r3, #10
 80050cc:	2100      	movs	r1, #0
 80050ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050d2:	6865      	ldr	r5, [r4, #4]
 80050d4:	60a5      	str	r5, [r4, #8]
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	bfa2      	ittt	ge
 80050da:	6821      	ldrge	r1, [r4, #0]
 80050dc:	f021 0104 	bicge.w	r1, r1, #4
 80050e0:	6021      	strge	r1, [r4, #0]
 80050e2:	b90e      	cbnz	r6, 80050e8 <_printf_i+0x114>
 80050e4:	2d00      	cmp	r5, #0
 80050e6:	d04b      	beq.n	8005180 <_printf_i+0x1ac>
 80050e8:	4615      	mov	r5, r2
 80050ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ee:	fb03 6711 	mls	r7, r3, r1, r6
 80050f2:	5dc7      	ldrb	r7, [r0, r7]
 80050f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050f8:	4637      	mov	r7, r6
 80050fa:	42bb      	cmp	r3, r7
 80050fc:	460e      	mov	r6, r1
 80050fe:	d9f4      	bls.n	80050ea <_printf_i+0x116>
 8005100:	2b08      	cmp	r3, #8
 8005102:	d10b      	bne.n	800511c <_printf_i+0x148>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	07de      	lsls	r6, r3, #31
 8005108:	d508      	bpl.n	800511c <_printf_i+0x148>
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	6861      	ldr	r1, [r4, #4]
 800510e:	4299      	cmp	r1, r3
 8005110:	bfde      	ittt	le
 8005112:	2330      	movle	r3, #48	; 0x30
 8005114:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005118:	f105 35ff 	addle.w	r5, r5, #4294967295
 800511c:	1b52      	subs	r2, r2, r5
 800511e:	6122      	str	r2, [r4, #16]
 8005120:	f8cd a000 	str.w	sl, [sp]
 8005124:	464b      	mov	r3, r9
 8005126:	aa03      	add	r2, sp, #12
 8005128:	4621      	mov	r1, r4
 800512a:	4640      	mov	r0, r8
 800512c:	f7ff fee4 	bl	8004ef8 <_printf_common>
 8005130:	3001      	adds	r0, #1
 8005132:	d14a      	bne.n	80051ca <_printf_i+0x1f6>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b004      	add	sp, #16
 800513a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	f043 0320 	orr.w	r3, r3, #32
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	4833      	ldr	r0, [pc, #204]	; (8005214 <_printf_i+0x240>)
 8005148:	2778      	movs	r7, #120	; 0x78
 800514a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	6829      	ldr	r1, [r5, #0]
 8005152:	061f      	lsls	r7, r3, #24
 8005154:	f851 6b04 	ldr.w	r6, [r1], #4
 8005158:	d402      	bmi.n	8005160 <_printf_i+0x18c>
 800515a:	065f      	lsls	r7, r3, #25
 800515c:	bf48      	it	mi
 800515e:	b2b6      	uxthmi	r6, r6
 8005160:	07df      	lsls	r7, r3, #31
 8005162:	bf48      	it	mi
 8005164:	f043 0320 	orrmi.w	r3, r3, #32
 8005168:	6029      	str	r1, [r5, #0]
 800516a:	bf48      	it	mi
 800516c:	6023      	strmi	r3, [r4, #0]
 800516e:	b91e      	cbnz	r6, 8005178 <_printf_i+0x1a4>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	f023 0320 	bic.w	r3, r3, #32
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	2310      	movs	r3, #16
 800517a:	e7a7      	b.n	80050cc <_printf_i+0xf8>
 800517c:	4824      	ldr	r0, [pc, #144]	; (8005210 <_printf_i+0x23c>)
 800517e:	e7e4      	b.n	800514a <_printf_i+0x176>
 8005180:	4615      	mov	r5, r2
 8005182:	e7bd      	b.n	8005100 <_printf_i+0x12c>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	6826      	ldr	r6, [r4, #0]
 8005188:	6961      	ldr	r1, [r4, #20]
 800518a:	1d18      	adds	r0, r3, #4
 800518c:	6028      	str	r0, [r5, #0]
 800518e:	0635      	lsls	r5, r6, #24
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	d501      	bpl.n	8005198 <_printf_i+0x1c4>
 8005194:	6019      	str	r1, [r3, #0]
 8005196:	e002      	b.n	800519e <_printf_i+0x1ca>
 8005198:	0670      	lsls	r0, r6, #25
 800519a:	d5fb      	bpl.n	8005194 <_printf_i+0x1c0>
 800519c:	8019      	strh	r1, [r3, #0]
 800519e:	2300      	movs	r3, #0
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	4615      	mov	r5, r2
 80051a4:	e7bc      	b.n	8005120 <_printf_i+0x14c>
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	602a      	str	r2, [r5, #0]
 80051ac:	681d      	ldr	r5, [r3, #0]
 80051ae:	6862      	ldr	r2, [r4, #4]
 80051b0:	2100      	movs	r1, #0
 80051b2:	4628      	mov	r0, r5
 80051b4:	f7fb f834 	bl	8000220 <memchr>
 80051b8:	b108      	cbz	r0, 80051be <_printf_i+0x1ea>
 80051ba:	1b40      	subs	r0, r0, r5
 80051bc:	6060      	str	r0, [r4, #4]
 80051be:	6863      	ldr	r3, [r4, #4]
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	2300      	movs	r3, #0
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c8:	e7aa      	b.n	8005120 <_printf_i+0x14c>
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	462a      	mov	r2, r5
 80051ce:	4649      	mov	r1, r9
 80051d0:	4640      	mov	r0, r8
 80051d2:	47d0      	blx	sl
 80051d4:	3001      	adds	r0, #1
 80051d6:	d0ad      	beq.n	8005134 <_printf_i+0x160>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	079b      	lsls	r3, r3, #30
 80051dc:	d413      	bmi.n	8005206 <_printf_i+0x232>
 80051de:	68e0      	ldr	r0, [r4, #12]
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	4298      	cmp	r0, r3
 80051e4:	bfb8      	it	lt
 80051e6:	4618      	movlt	r0, r3
 80051e8:	e7a6      	b.n	8005138 <_printf_i+0x164>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4632      	mov	r2, r6
 80051ee:	4649      	mov	r1, r9
 80051f0:	4640      	mov	r0, r8
 80051f2:	47d0      	blx	sl
 80051f4:	3001      	adds	r0, #1
 80051f6:	d09d      	beq.n	8005134 <_printf_i+0x160>
 80051f8:	3501      	adds	r5, #1
 80051fa:	68e3      	ldr	r3, [r4, #12]
 80051fc:	9903      	ldr	r1, [sp, #12]
 80051fe:	1a5b      	subs	r3, r3, r1
 8005200:	42ab      	cmp	r3, r5
 8005202:	dcf2      	bgt.n	80051ea <_printf_i+0x216>
 8005204:	e7eb      	b.n	80051de <_printf_i+0x20a>
 8005206:	2500      	movs	r5, #0
 8005208:	f104 0619 	add.w	r6, r4, #25
 800520c:	e7f5      	b.n	80051fa <_printf_i+0x226>
 800520e:	bf00      	nop
 8005210:	08005611 	.word	0x08005611
 8005214:	08005622 	.word	0x08005622

08005218 <memmove>:
 8005218:	4288      	cmp	r0, r1
 800521a:	b510      	push	{r4, lr}
 800521c:	eb01 0402 	add.w	r4, r1, r2
 8005220:	d902      	bls.n	8005228 <memmove+0x10>
 8005222:	4284      	cmp	r4, r0
 8005224:	4623      	mov	r3, r4
 8005226:	d807      	bhi.n	8005238 <memmove+0x20>
 8005228:	1e43      	subs	r3, r0, #1
 800522a:	42a1      	cmp	r1, r4
 800522c:	d008      	beq.n	8005240 <memmove+0x28>
 800522e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005232:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005236:	e7f8      	b.n	800522a <memmove+0x12>
 8005238:	4402      	add	r2, r0
 800523a:	4601      	mov	r1, r0
 800523c:	428a      	cmp	r2, r1
 800523e:	d100      	bne.n	8005242 <memmove+0x2a>
 8005240:	bd10      	pop	{r4, pc}
 8005242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800524a:	e7f7      	b.n	800523c <memmove+0x24>

0800524c <_realloc_r>:
 800524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	4680      	mov	r8, r0
 8005252:	4614      	mov	r4, r2
 8005254:	460e      	mov	r6, r1
 8005256:	b921      	cbnz	r1, 8005262 <_realloc_r+0x16>
 8005258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525c:	4611      	mov	r1, r2
 800525e:	f7ff bba9 	b.w	80049b4 <_malloc_r>
 8005262:	b92a      	cbnz	r2, 8005270 <_realloc_r+0x24>
 8005264:	f7ff fca4 	bl	8004bb0 <_free_r>
 8005268:	4625      	mov	r5, r4
 800526a:	4628      	mov	r0, r5
 800526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005270:	f000 f81b 	bl	80052aa <_malloc_usable_size_r>
 8005274:	4284      	cmp	r4, r0
 8005276:	4607      	mov	r7, r0
 8005278:	d802      	bhi.n	8005280 <_realloc_r+0x34>
 800527a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800527e:	d812      	bhi.n	80052a6 <_realloc_r+0x5a>
 8005280:	4621      	mov	r1, r4
 8005282:	4640      	mov	r0, r8
 8005284:	f7ff fb96 	bl	80049b4 <_malloc_r>
 8005288:	4605      	mov	r5, r0
 800528a:	2800      	cmp	r0, #0
 800528c:	d0ed      	beq.n	800526a <_realloc_r+0x1e>
 800528e:	42bc      	cmp	r4, r7
 8005290:	4622      	mov	r2, r4
 8005292:	4631      	mov	r1, r6
 8005294:	bf28      	it	cs
 8005296:	463a      	movcs	r2, r7
 8005298:	f7ff fc7c 	bl	8004b94 <memcpy>
 800529c:	4631      	mov	r1, r6
 800529e:	4640      	mov	r0, r8
 80052a0:	f7ff fc86 	bl	8004bb0 <_free_r>
 80052a4:	e7e1      	b.n	800526a <_realloc_r+0x1e>
 80052a6:	4635      	mov	r5, r6
 80052a8:	e7df      	b.n	800526a <_realloc_r+0x1e>

080052aa <_malloc_usable_size_r>:
 80052aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ae:	1f18      	subs	r0, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bfbc      	itt	lt
 80052b4:	580b      	ldrlt	r3, [r1, r0]
 80052b6:	18c0      	addlt	r0, r0, r3
 80052b8:	4770      	bx	lr

080052ba <atan2f>:
 80052ba:	f000 b801 	b.w	80052c0 <__ieee754_atan2f>
	...

080052c0 <__ieee754_atan2f>:
 80052c0:	ee10 2a90 	vmov	r2, s1
 80052c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80052c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80052cc:	b510      	push	{r4, lr}
 80052ce:	eef0 7a40 	vmov.f32	s15, s0
 80052d2:	dc06      	bgt.n	80052e2 <__ieee754_atan2f+0x22>
 80052d4:	ee10 0a10 	vmov	r0, s0
 80052d8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80052dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80052e0:	dd04      	ble.n	80052ec <__ieee754_atan2f+0x2c>
 80052e2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80052e6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ea:	bd10      	pop	{r4, pc}
 80052ec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80052f0:	d103      	bne.n	80052fa <__ieee754_atan2f+0x3a>
 80052f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f6:	f000 b883 	b.w	8005400 <atanf>
 80052fa:	1794      	asrs	r4, r2, #30
 80052fc:	f004 0402 	and.w	r4, r4, #2
 8005300:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005304:	b943      	cbnz	r3, 8005318 <__ieee754_atan2f+0x58>
 8005306:	2c02      	cmp	r4, #2
 8005308:	d05e      	beq.n	80053c8 <__ieee754_atan2f+0x108>
 800530a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80053dc <__ieee754_atan2f+0x11c>
 800530e:	2c03      	cmp	r4, #3
 8005310:	bf08      	it	eq
 8005312:	eef0 7a47 	vmoveq.f32	s15, s14
 8005316:	e7e6      	b.n	80052e6 <__ieee754_atan2f+0x26>
 8005318:	b941      	cbnz	r1, 800532c <__ieee754_atan2f+0x6c>
 800531a:	eddf 7a31 	vldr	s15, [pc, #196]	; 80053e0 <__ieee754_atan2f+0x120>
 800531e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80053e4 <__ieee754_atan2f+0x124>
 8005322:	2800      	cmp	r0, #0
 8005324:	bfb8      	it	lt
 8005326:	eef0 7a47 	vmovlt.f32	s15, s14
 800532a:	e7dc      	b.n	80052e6 <__ieee754_atan2f+0x26>
 800532c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005330:	d110      	bne.n	8005354 <__ieee754_atan2f+0x94>
 8005332:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005336:	f104 34ff 	add.w	r4, r4, #4294967295
 800533a:	d107      	bne.n	800534c <__ieee754_atan2f+0x8c>
 800533c:	2c02      	cmp	r4, #2
 800533e:	d846      	bhi.n	80053ce <__ieee754_atan2f+0x10e>
 8005340:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <__ieee754_atan2f+0x128>)
 8005342:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	e7cc      	b.n	80052e6 <__ieee754_atan2f+0x26>
 800534c:	2c02      	cmp	r4, #2
 800534e:	d841      	bhi.n	80053d4 <__ieee754_atan2f+0x114>
 8005350:	4b26      	ldr	r3, [pc, #152]	; (80053ec <__ieee754_atan2f+0x12c>)
 8005352:	e7f6      	b.n	8005342 <__ieee754_atan2f+0x82>
 8005354:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005358:	d0df      	beq.n	800531a <__ieee754_atan2f+0x5a>
 800535a:	1a5b      	subs	r3, r3, r1
 800535c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8005360:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8005364:	da1a      	bge.n	800539c <__ieee754_atan2f+0xdc>
 8005366:	2a00      	cmp	r2, #0
 8005368:	da01      	bge.n	800536e <__ieee754_atan2f+0xae>
 800536a:	313c      	adds	r1, #60	; 0x3c
 800536c:	db19      	blt.n	80053a2 <__ieee754_atan2f+0xe2>
 800536e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8005372:	f000 f919 	bl	80055a8 <fabsf>
 8005376:	f000 f843 	bl	8005400 <atanf>
 800537a:	eef0 7a40 	vmov.f32	s15, s0
 800537e:	2c01      	cmp	r4, #1
 8005380:	d012      	beq.n	80053a8 <__ieee754_atan2f+0xe8>
 8005382:	2c02      	cmp	r4, #2
 8005384:	d017      	beq.n	80053b6 <__ieee754_atan2f+0xf6>
 8005386:	2c00      	cmp	r4, #0
 8005388:	d0ad      	beq.n	80052e6 <__ieee754_atan2f+0x26>
 800538a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80053f0 <__ieee754_atan2f+0x130>
 800538e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005392:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80053f4 <__ieee754_atan2f+0x134>
 8005396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800539a:	e7a4      	b.n	80052e6 <__ieee754_atan2f+0x26>
 800539c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80053e0 <__ieee754_atan2f+0x120>
 80053a0:	e7ed      	b.n	800537e <__ieee754_atan2f+0xbe>
 80053a2:	eddf 7a15 	vldr	s15, [pc, #84]	; 80053f8 <__ieee754_atan2f+0x138>
 80053a6:	e7ea      	b.n	800537e <__ieee754_atan2f+0xbe>
 80053a8:	ee17 3a90 	vmov	r3, s15
 80053ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	e797      	b.n	80052e6 <__ieee754_atan2f+0x26>
 80053b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80053f0 <__ieee754_atan2f+0x130>
 80053ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053be:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80053f4 <__ieee754_atan2f+0x134>
 80053c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c6:	e78e      	b.n	80052e6 <__ieee754_atan2f+0x26>
 80053c8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80053f4 <__ieee754_atan2f+0x134>
 80053cc:	e78b      	b.n	80052e6 <__ieee754_atan2f+0x26>
 80053ce:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80053fc <__ieee754_atan2f+0x13c>
 80053d2:	e788      	b.n	80052e6 <__ieee754_atan2f+0x26>
 80053d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80053f8 <__ieee754_atan2f+0x138>
 80053d8:	e785      	b.n	80052e6 <__ieee754_atan2f+0x26>
 80053da:	bf00      	nop
 80053dc:	c0490fdb 	.word	0xc0490fdb
 80053e0:	3fc90fdb 	.word	0x3fc90fdb
 80053e4:	bfc90fdb 	.word	0xbfc90fdb
 80053e8:	08005634 	.word	0x08005634
 80053ec:	08005640 	.word	0x08005640
 80053f0:	33bbbd2e 	.word	0x33bbbd2e
 80053f4:	40490fdb 	.word	0x40490fdb
 80053f8:	00000000 	.word	0x00000000
 80053fc:	3f490fdb 	.word	0x3f490fdb

08005400 <atanf>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	ee10 5a10 	vmov	r5, s0
 8005406:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800540a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800540e:	eef0 7a40 	vmov.f32	s15, s0
 8005412:	db10      	blt.n	8005436 <atanf+0x36>
 8005414:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005418:	dd04      	ble.n	8005424 <atanf+0x24>
 800541a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800541e:	eeb0 0a67 	vmov.f32	s0, s15
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800555c <atanf+0x15c>
 8005428:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005560 <atanf+0x160>
 800542c:	2d00      	cmp	r5, #0
 800542e:	bfd8      	it	le
 8005430:	eef0 7a47 	vmovle.f32	s15, s14
 8005434:	e7f3      	b.n	800541e <atanf+0x1e>
 8005436:	4b4b      	ldr	r3, [pc, #300]	; (8005564 <atanf+0x164>)
 8005438:	429c      	cmp	r4, r3
 800543a:	dc10      	bgt.n	800545e <atanf+0x5e>
 800543c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005440:	da0a      	bge.n	8005458 <atanf+0x58>
 8005442:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005568 <atanf+0x168>
 8005446:	ee30 7a07 	vadd.f32	s14, s0, s14
 800544a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800544e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005456:	dce2      	bgt.n	800541e <atanf+0x1e>
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	e013      	b.n	8005486 <atanf+0x86>
 800545e:	f000 f8a3 	bl	80055a8 <fabsf>
 8005462:	4b42      	ldr	r3, [pc, #264]	; (800556c <atanf+0x16c>)
 8005464:	429c      	cmp	r4, r3
 8005466:	dc4f      	bgt.n	8005508 <atanf+0x108>
 8005468:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800546c:	429c      	cmp	r4, r3
 800546e:	dc41      	bgt.n	80054f4 <atanf+0xf4>
 8005470:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005474:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005478:	eea0 7a27 	vfma.f32	s14, s0, s15
 800547c:	2300      	movs	r3, #0
 800547e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005482:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800548c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005570 <atanf+0x170>
 8005490:	eddf 5a38 	vldr	s11, [pc, #224]	; 8005574 <atanf+0x174>
 8005494:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005578 <atanf+0x178>
 8005498:	ee66 6a06 	vmul.f32	s13, s12, s12
 800549c:	eee6 5a87 	vfma.f32	s11, s13, s14
 80054a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800557c <atanf+0x17c>
 80054a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80054a8:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005580 <atanf+0x180>
 80054ac:	eee7 5a26 	vfma.f32	s11, s14, s13
 80054b0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005584 <atanf+0x184>
 80054b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80054b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005588 <atanf+0x188>
 80054bc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80054c0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800558c <atanf+0x18c>
 80054c4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80054c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005590 <atanf+0x190>
 80054cc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80054d0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8005594 <atanf+0x194>
 80054d4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80054d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005598 <atanf+0x198>
 80054dc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80054e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054e4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80054e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054ec:	d121      	bne.n	8005532 <atanf+0x132>
 80054ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054f2:	e794      	b.n	800541e <atanf+0x1e>
 80054f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80054f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80054fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005500:	2301      	movs	r3, #1
 8005502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005506:	e7be      	b.n	8005486 <atanf+0x86>
 8005508:	4b24      	ldr	r3, [pc, #144]	; (800559c <atanf+0x19c>)
 800550a:	429c      	cmp	r4, r3
 800550c:	dc0b      	bgt.n	8005526 <atanf+0x126>
 800550e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005516:	eea0 7a27 	vfma.f32	s14, s0, s15
 800551a:	2302      	movs	r3, #2
 800551c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005524:	e7af      	b.n	8005486 <atanf+0x86>
 8005526:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800552a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800552e:	2303      	movs	r3, #3
 8005530:	e7a9      	b.n	8005486 <atanf+0x86>
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <atanf+0x1a0>)
 8005534:	491b      	ldr	r1, [pc, #108]	; (80055a4 <atanf+0x1a4>)
 8005536:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800553a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800553e:	edd3 6a00 	vldr	s13, [r3]
 8005542:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005546:	2d00      	cmp	r5, #0
 8005548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800554c:	edd2 7a00 	vldr	s15, [r2]
 8005550:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005554:	bfb8      	it	lt
 8005556:	eef1 7a67 	vneglt.f32	s15, s15
 800555a:	e760      	b.n	800541e <atanf+0x1e>
 800555c:	3fc90fdb 	.word	0x3fc90fdb
 8005560:	bfc90fdb 	.word	0xbfc90fdb
 8005564:	3edfffff 	.word	0x3edfffff
 8005568:	7149f2ca 	.word	0x7149f2ca
 800556c:	3f97ffff 	.word	0x3f97ffff
 8005570:	3c8569d7 	.word	0x3c8569d7
 8005574:	3d4bda59 	.word	0x3d4bda59
 8005578:	bd6ef16b 	.word	0xbd6ef16b
 800557c:	3d886b35 	.word	0x3d886b35
 8005580:	3dba2e6e 	.word	0x3dba2e6e
 8005584:	3e124925 	.word	0x3e124925
 8005588:	3eaaaaab 	.word	0x3eaaaaab
 800558c:	bd15a221 	.word	0xbd15a221
 8005590:	bd9d8795 	.word	0xbd9d8795
 8005594:	bde38e38 	.word	0xbde38e38
 8005598:	be4ccccd 	.word	0xbe4ccccd
 800559c:	401bffff 	.word	0x401bffff
 80055a0:	0800564c 	.word	0x0800564c
 80055a4:	0800565c 	.word	0x0800565c

080055a8 <fabsf>:
 80055a8:	ee10 3a10 	vmov	r3, s0
 80055ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b0:	ee00 3a10 	vmov	s0, r3
 80055b4:	4770      	bx	lr
	...

080055b8 <_init>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr

080055c4 <_fini>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr
