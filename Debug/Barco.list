
Barco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d5c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f38  08002f38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f40  08002f40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002f54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002f54  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdd7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bcd  00000000  00000000  0002ce56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000098d  00000000  00000000  0002f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b3e  00000000  00000000  0002ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec80  00000000  00000000  00031b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0398  00000000  00000000  0004079b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033b8  00000000  00000000  00110b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00113eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f08 	.word	0x08002f08

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f08 	.word	0x08002f08

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <setPWMAngle>:
 *      Author: gusta
 */

#include "Servo.h"

void setPWMAngle(ServoConfig_t servoConfig, float angle) {
 8000500:	b084      	sub	sp, #16
 8000502:	b5b0      	push	{r4, r5, r7, lr}
 8000504:	b09a      	sub	sp, #104	; 0x68
 8000506:	af12      	add	r7, sp, #72	; 0x48
 8000508:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800050c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000510:	ed87 0a01 	vstr	s0, [r7, #4]
	Scale_t angleScale;
	angleScale.min = -90;
 8000514:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <setPWMAngle+0xd8>)
 8000516:	617b      	str	r3, [r7, #20]
	angleScale.max = 90;
 8000518:	4b30      	ldr	r3, [pc, #192]	; (80005dc <setPWMAngle+0xdc>)
 800051a:	61bb      	str	r3, [r7, #24]

	Scale_t pwmScale = __getPWMScale(servoConfig.timerConfig);
 800051c:	4668      	mov	r0, sp
 800051e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000522:	2248      	movs	r2, #72	; 0x48
 8000524:	4619      	mov	r1, r3
 8000526:	f002 fce1 	bl	8002eec <memcpy>
 800052a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800052e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000530:	f000 f856 	bl	80005e0 <__getPWMScale>
 8000534:	eeb0 7a40 	vmov.f32	s14, s0
 8000538:	eef0 7a60 	vmov.f32	s15, s1
 800053c:	ed87 7a03 	vstr	s14, [r7, #12]
 8000540:	edc7 7a04 	vstr	s15, [r7, #16]

	float convertedToPWM = __convertScales(angleScale, pwmScale,
 8000544:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000548:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800054c:	ed97 1a01 	vldr	s2, [r7, #4]
 8000550:	eeb0 0a47 	vmov.f32	s0, s14
 8000554:	eef0 0a67 	vmov.f32	s1, s15
 8000558:	f000 f8bb 	bl	80006d2 <__getCalibratedAngle>
 800055c:	eef0 5a40 	vmov.f32	s11, s0
 8000560:	ed97 6a03 	vldr	s12, [r7, #12]
 8000564:	edd7 6a04 	vldr	s13, [r7, #16]
 8000568:	ed97 7a05 	vldr	s14, [r7, #20]
 800056c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000570:	eeb0 2a65 	vmov.f32	s4, s11
 8000574:	eeb0 1a46 	vmov.f32	s2, s12
 8000578:	eef0 1a66 	vmov.f32	s3, s13
 800057c:	eeb0 0a47 	vmov.f32	s0, s14
 8000580:	eef0 0a67 	vmov.f32	s1, s15
 8000584:	f000 f862 	bl	800064c <__convertScales>
 8000588:	ed87 0a07 	vstr	s0, [r7, #28]
			__getCalibratedAngle(servoConfig.calibration, angle));
	setPWM(servoConfig.timerConfig.handle, servoConfig.timerConfig.channel,
 800058c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800058e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000590:	edd7 7a07 	vldr	s15, [r7, #28]
 8000594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000598:	ee17 1a90 	vmov	r1, s15
 800059c:	b289      	uxth	r1, r1
 800059e:	9110      	str	r1, [sp, #64]	; 0x40
 80005a0:	920f      	str	r2, [sp, #60]	; 0x3c
 80005a2:	930e      	str	r3, [sp, #56]	; 0x38
 80005a4:	466d      	mov	r5, sp
 80005a6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80005aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80005be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	f000 f8a3 	bl	800070e <setPWM>
			servoConfig.timerConfig.period, convertedToPWM);
}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005d2:	b004      	add	sp, #16
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	c2b40000 	.word	0xc2b40000
 80005dc:	42b40000 	.word	0x42b40000

080005e0 <__getPWMScale>:
			__getCalibratedAngle(servoConfig.calibration, angle));
	setPWM(servoConfig.timerConfig.handle, servoConfig.timerConfig.channel,
			servoConfig.timerConfig.period, convertedToPWM);
}

Scale_t __getPWMScale(TimerConfig_t timerConfig) {
 80005e0:	b084      	sub	sp, #16
 80005e2:	b480      	push	{r7}
 80005e4:	b087      	sub	sp, #28
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	f107 0c20 	add.w	ip, r7, #32
 80005ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Scale_t pwmScale;
	pwmScale.min = timerConfig.minDutyCyclePercentage
 80005f0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
			* timerConfig.period;
 80005f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005fe:	ee67 7a27 	vmul.f32	s15, s14, s15
	pwmScale.min = timerConfig.minDutyCyclePercentage
 8000602:	edc7 7a02 	vstr	s15, [r7, #8]
	pwmScale.max = timerConfig.maxDutyCyclePercentage
 8000606:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
				* timerConfig.period;
 800060a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800060c:	ee07 3a90 	vmov	s15, r3
 8000610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000614:	ee67 7a27 	vmul.f32	s15, s14, s15
	pwmScale.max = timerConfig.maxDutyCyclePercentage
 8000618:	edc7 7a03 	vstr	s15, [r7, #12]

	return pwmScale;
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	f107 0208 	add.w	r2, r7, #8
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	e883 0003 	stmia.w	r3, {r0, r1}
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	ee07 2a10 	vmov	s14, r2
 8000634:	ee07 3a90 	vmov	s15, r3
}
 8000638:	eeb0 0a47 	vmov.f32	s0, s14
 800063c:	eef0 0a67 	vmov.f32	s1, s15
 8000640:	371c      	adds	r7, #28
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	b004      	add	sp, #16
 800064a:	4770      	bx	lr

0800064c <__convertScales>:

float __convertScales(Scale_t from, Scale_t to, float point) {
 800064c:	b480      	push	{r7}
 800064e:	b08b      	sub	sp, #44	; 0x2c
 8000650:	af00      	add	r7, sp, #0
 8000652:	eeb0 6a40 	vmov.f32	s12, s0
 8000656:	eef0 6a60 	vmov.f32	s13, s1
 800065a:	eeb0 7a41 	vmov.f32	s14, s2
 800065e:	eef0 7a61 	vmov.f32	s15, s3
 8000662:	ed87 2a01 	vstr	s4, [r7, #4]
 8000666:	ed87 6a04 	vstr	s12, [r7, #16]
 800066a:	edc7 6a05 	vstr	s13, [r7, #20]
 800066e:	ed87 7a02 	vstr	s14, [r7, #8]
 8000672:	edc7 7a03 	vstr	s15, [r7, #12]
	float deltaScaleFrom = from.max - from.min;
 8000676:	ed97 7a05 	vldr	s14, [r7, #20]
 800067a:	edd7 7a04 	vldr	s15, [r7, #16]
 800067e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000682:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float deltaScaleTo = to.max - to.min;
 8000686:	ed97 7a03 	vldr	s14, [r7, #12]
 800068a:	edd7 7a02 	vldr	s15, [r7, #8]
 800068e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000692:	edc7 7a08 	vstr	s15, [r7, #32]

	float result = ((point - from.min) / deltaScaleFrom) * deltaScaleTo
 8000696:	edd7 7a04 	vldr	s15, [r7, #16]
 800069a:	ed97 7a01 	vldr	s14, [r7, #4]
 800069e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80006a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80006ae:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ to.min;
 80006b2:	edd7 7a02 	vldr	s15, [r7, #8]
	float result = ((point - from.min) / deltaScaleFrom) * deltaScaleTo
 80006b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ba:	edc7 7a07 	vstr	s15, [r7, #28]

	//if(result > to.max) return to.max;
	//if(result < to.min) return to.min;

	return result;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	ee07 3a90 	vmov	s15, r3
}
 80006c4:	eeb0 0a67 	vmov.f32	s0, s15
 80006c8:	372c      	adds	r7, #44	; 0x2c
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <__getCalibratedAngle>:

/*
 * Foi observado que há imprecisões no servo motor, de forma a ser necessário ajustar o valor enviado conforme a reta de calibração obtida
 */
float __getCalibratedAngle(ServoCalibration_t calibration, float desiredAngle) {
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	eeb0 7a40 	vmov.f32	s14, s0
 80006dc:	eef0 7a60 	vmov.f32	s15, s1
 80006e0:	ed87 1a01 	vstr	s2, [r7, #4]
 80006e4:	ed87 7a02 	vstr	s14, [r7, #8]
 80006e8:	edc7 7a03 	vstr	s15, [r7, #12]
	return calibration.gain * desiredAngle + calibration.offset; // y = a*x + b
 80006ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80006f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80006fc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000700:	eeb0 0a67 	vmov.f32	s0, s15
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <setPWM>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint32_t period,
		uint16_t pulseLength) {
 800070e:	b084      	sub	sp, #16
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800071a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800071e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000720:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000724:	f001 fcd0 	bl	80020c8 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period; // set the period duration
 8000728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&timer); // reinitialise with new period value
 800072c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000730:	f001 fbb2 	bl	8001e98 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000734:	2360      	movs	r3, #96	; 0x60
 8000736:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulseLength; // set the pulse duration
 8000738:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800073c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800074a:	4619      	mov	r1, r3
 800074c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000750:	f001 fd2a 	bl	80021a8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // start PWM generation
 8000754:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000756:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800075a:	f001 fbed 	bl	8001f38 <HAL_TIM_PWM_Start>
}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000768:	b004      	add	sp, #16
 800076a:	4770      	bx	lr

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	ed2d 8b02 	vpush	{d8}
 8000772:	b0c6      	sub	sp, #280	; 0x118
 8000774:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f000 fb03 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077a:	f000 f86d 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f951 	bl	8000a24 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000782:	f000 f925 	bl	80009d0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000786:	f000 f8c9 	bl	800091c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TimerConfig_t servoPWMConfig;
  servoPWMConfig.handle = htim3;
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <main+0xd8>)
 800078c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000790:	4611      	mov	r1, r2
 8000792:	2248      	movs	r2, #72	; 0x48
 8000794:	4618      	mov	r0, r3
 8000796:	f002 fba9 	bl	8002eec <memcpy>
  servoPWMConfig.channel = TIM_CHANNEL_2;
 800079a:	2304      	movs	r3, #4
 800079c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  servoPWMConfig.period = 1250;
 80007a0:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80007a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  servoPWMConfig.minDutyCyclePercentage = 0.05;
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <main+0xdc>)
 80007aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  servoPWMConfig.maxDutyCyclePercentage = 0.115;
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <main+0xe0>)
 80007b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  ServoCalibration_t servoCalibration;
  servoCalibration.gain = 1.47;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <main+0xe4>)
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
  servoCalibration.offset = -12.6;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <main+0xe8>)
 80007ba:	663b      	str	r3, [r7, #96]	; 0x60

  ServoConfig_t servoConfig;
  servoConfig.timerConfig = servoPWMConfig;
 80007bc:	463b      	mov	r3, r7
 80007be:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80007c2:	2258      	movs	r2, #88	; 0x58
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 fb91 	bl	8002eec <memcpy>
  servoConfig.calibration = servoCalibration;
 80007ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80007d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d6:	e883 0003 	stmia.w	r3, {r0, r1}

  int pwmIncrement = 5;
 80007da:	2305      	movs	r3, #5
 80007dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  int pwmValue = -90;
 80007e0:	f06f 0359 	mvn.w	r3, #89	; 0x59
 80007e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	pwmValue += pwmIncrement;
 80007e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80007ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80007f0:	4413      	add	r3, r2
 80007f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	if((pwmValue <= -90) || (pwmValue >= 90)) pwmIncrement = -pwmIncrement;
 80007f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007fa:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80007fe:	db03      	blt.n	8000808 <main+0x9c>
 8000800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000804:	2b59      	cmp	r3, #89	; 0x59
 8000806:	dd04      	ble.n	8000812 <main+0xa6>
 8000808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800080c:	425b      	negs	r3, r3
 800080e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	setPWMAngle(servoConfig, pwmValue);
 8000812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800081e:	4668      	mov	r0, sp
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	2250      	movs	r2, #80	; 0x50
 8000826:	4619      	mov	r1, r3
 8000828:	f002 fb60 	bl	8002eec <memcpy>
 800082c:	463b      	mov	r3, r7
 800082e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000830:	eeb0 0a48 	vmov.f32	s0, s16
 8000834:	f7ff fe64 	bl	8000500 <setPWMAngle>
	HAL_Delay(500);
 8000838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083c:	f000 fb12 	bl	8000e64 <HAL_Delay>
	pwmValue += pwmIncrement;
 8000840:	e7d2      	b.n	80007e8 <main+0x7c>
 8000842:	bf00      	nop
 8000844:	20000028 	.word	0x20000028
 8000848:	3d4ccccd 	.word	0x3d4ccccd
 800084c:	3deb851f 	.word	0x3deb851f
 8000850:	3fbc28f6 	.word	0x3fbc28f6
 8000854:	c149999a 	.word	0xc149999a

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2234      	movs	r2, #52	; 0x34
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fb14 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <SystemClock_Config+0xbc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a23      	ldr	r2, [pc, #140]	; (8000914 <SystemClock_Config+0xbc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <SystemClock_Config+0xbc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <SystemClock_Config+0xc0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a4:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <SystemClock_Config+0xc0>)
 80008a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <SystemClock_Config+0xc0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c0:	2310      	movs	r3, #16
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f845 	bl	800195c <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008d8:	f000 f91a 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80008e4:	23c0      	movs	r3, #192	; 0xc0
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80008e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80008ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fd6a 	bl	80013d4 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000906:	f000 f903 	bl	8000b10 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	; 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <MX_TIM3_Init+0xb0>)
 8000942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_TIM3_Init+0xac>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000952:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000956:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_TIM3_Init+0xac>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000964:	4818      	ldr	r0, [pc, #96]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000966:	f001 fa97 	bl	8001e98 <HAL_TIM_PWM_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 f8ce 	bl	8000b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4619      	mov	r1, r3
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000984:	f001 ff48 	bl	8002818 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800098e:	f000 f8bf 	bl	8000b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	; 0x60
 8000994:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 94;
 8000996:	235e      	movs	r3, #94	; 0x5e
 8000998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2204      	movs	r2, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_TIM3_Init+0xac>)
 80009aa:	f001 fbfd 	bl	80021a8 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009b4:	f000 f8ac 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <MX_TIM3_Init+0xac>)
 80009ba:	f000 f8f9 	bl	8000bb0 <HAL_TIM_MspPostInit>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000028 	.word	0x20000028
 80009cc:	40000400 	.word	0x40000400

080009d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_USART1_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a08:	f001 ff82 	bl	8002910 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f87d 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000070 	.word	0x20000070
 8000a20:	40011000 	.word	0x40011000

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a2f      	ldr	r2, [pc, #188]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	481c      	ldr	r0, [pc, #112]	; (8000b04 <MX_GPIO_Init+0xe0>)
 8000a94:	f000 fc84 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a98:	2320      	movs	r3, #32
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4815      	ldr	r0, [pc, #84]	; (8000b04 <MX_GPIO_Init+0xe0>)
 8000ab0:	f000 fae2 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_GPIO_Init+0xe4>)
 8000ad0:	f000 fad2 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_GPIO_Init+0xe8>)
 8000af2:	f000 fac1 	bl	8001078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d10d      	bne.n	8000b9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_TIM_PWM_MspInit+0x40>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <HAL_TIM_PWM_MspInit+0x40>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <HAL_TIM_PWM_MspInit+0x40>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40000400 	.word	0x40000400
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <HAL_TIM_MspPostInit+0x68>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d11d      	bne.n	8000c0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_TIM_MspPostInit+0x6c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_TIM_MspPostInit+0x6c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_TIM_MspPostInit+0x6c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_TIM_MspPostInit+0x70>)
 8000c0a:	f000 fa35 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12c      	bne.n	8000ca0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c90:	2307      	movs	r3, #7
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0x8c>)
 8000c9c:	f000 f9ec 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f890 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x12>
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopFillZerobss+0x16>)
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1a>)
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1e>)
 8000d36:	2300      	movs	r3, #0
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:
 8000d3a:	58d4      	ldr	r4, [r2, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:
 8000d40:	18c4      	adds	r4, r0, r3
 8000d42:	428c      	cmp	r4, r1
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x22>)
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopFillZerobss+0x26>)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:
 8000d52:	42a2      	cmp	r2, r4
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>
 8000d56:	f7ff ffd7 	bl	8000d08 <SystemInit>
 8000d5a:	f002 f8a3 	bl	8002ea4 <__libc_init_array>
 8000d5e:	f7ff fd05 	bl	800076c <main>
 8000d62:	4770      	bx	lr
 8000d64:	20020000 	.word	0x20020000
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	2000000c 	.word	0x2000000c
 8000d70:	08002f48 	.word	0x08002f48
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	200000b8 	.word	0x200000b8

08000d7c <ADC_IRQHandler>:
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_Init+0x40>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_Init+0x40>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x40>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f931 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff feb2 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023c00 	.word	0x40023c00

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f93b 	bl	800105e <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f911 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200000b4 	.word	0x200000b4

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200000b4 	.word	0x200000b4

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff47 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff5c 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffb0 	bl	8000fcc <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e165      	b.n	8001360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 8154 	bne.w	800135a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80ae 	beq.w	800135a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <HAL_GPIO_Init+0x300>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a5c      	ldr	r2, [pc, #368]	; (8001378 <HAL_GPIO_Init+0x300>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b5a      	ldr	r3, [pc, #360]	; (8001378 <HAL_GPIO_Init+0x300>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_GPIO_Init+0x304>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <HAL_GPIO_Init+0x308>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d025      	beq.n	8001292 <HAL_GPIO_Init+0x21a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4e      	ldr	r2, [pc, #312]	; (8001384 <HAL_GPIO_Init+0x30c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d01f      	beq.n	800128e <HAL_GPIO_Init+0x216>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <HAL_GPIO_Init+0x310>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x212>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4c      	ldr	r2, [pc, #304]	; (800138c <HAL_GPIO_Init+0x314>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x20e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <HAL_GPIO_Init+0x318>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x20a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <HAL_GPIO_Init+0x31c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x206>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a49      	ldr	r2, [pc, #292]	; (8001398 <HAL_GPIO_Init+0x320>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x202>
 8001276:	2306      	movs	r3, #6
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 800127a:	2307      	movs	r3, #7
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x304>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b3a      	ldr	r3, [pc, #232]	; (800139c <HAL_GPIO_Init+0x324>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a31      	ldr	r2, [pc, #196]	; (800139c <HAL_GPIO_Init+0x324>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_GPIO_Init+0x324>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a26      	ldr	r2, [pc, #152]	; (800139c <HAL_GPIO_Init+0x324>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_GPIO_Init+0x324>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_GPIO_Init+0x324>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_GPIO_Init+0x324>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <HAL_GPIO_Init+0x324>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae96 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40013c00 	.word	0x40013c00

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fcc2 	bl	8000e4c <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fcbe 	bl	8000e4c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f855 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fc22 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	08002f20 	.word	0x08002f20
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000

080015b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015bc:	f7ff fff0 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4903      	ldr	r1, [pc, #12]	; (80015dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	08002f30 	.word	0x08002f30

080015e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015e4:	f7ff ffdc 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	0b5b      	lsrs	r3, r3, #13
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4903      	ldr	r1, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	08002f30 	.word	0x08002f30

08001608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800160c:	b0a6      	sub	sp, #152	; 0x98
 800160e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800162e:	4bc8      	ldr	r3, [pc, #800]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b0c      	cmp	r3, #12
 8001638:	f200 817e 	bhi.w	8001938 <HAL_RCC_GetSysClockFreq+0x330>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <HAL_RCC_GetSysClockFreq+0x3c>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001679 	.word	0x08001679
 8001648:	08001939 	.word	0x08001939
 800164c:	08001939 	.word	0x08001939
 8001650:	08001939 	.word	0x08001939
 8001654:	08001681 	.word	0x08001681
 8001658:	08001939 	.word	0x08001939
 800165c:	08001939 	.word	0x08001939
 8001660:	08001939 	.word	0x08001939
 8001664:	08001689 	.word	0x08001689
 8001668:	08001939 	.word	0x08001939
 800166c:	08001939 	.word	0x08001939
 8001670:	08001939 	.word	0x08001939
 8001674:	080017f3 	.word	0x080017f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4bb6      	ldr	r3, [pc, #728]	; (8001954 <HAL_RCC_GetSysClockFreq+0x34c>)
 800167a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800167e:	e15f      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001680:	4bb5      	ldr	r3, [pc, #724]	; (8001958 <HAL_RCC_GetSysClockFreq+0x350>)
 8001682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001686:	e15b      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001688:	4bb1      	ldr	r3, [pc, #708]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001690:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001694:	4bae      	ldr	r3, [pc, #696]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d031      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a0:	4bab      	ldr	r3, [pc, #684]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	2200      	movs	r2, #0
 80016a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80016aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b2:	663b      	str	r3, [r7, #96]	; 0x60
 80016b4:	2300      	movs	r3, #0
 80016b6:	667b      	str	r3, [r7, #100]	; 0x64
 80016b8:	4ba7      	ldr	r3, [pc, #668]	; (8001958 <HAL_RCC_GetSysClockFreq+0x350>)
 80016ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016be:	462a      	mov	r2, r5
 80016c0:	fb03 f202 	mul.w	r2, r3, r2
 80016c4:	2300      	movs	r3, #0
 80016c6:	4621      	mov	r1, r4
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	4aa2      	ldr	r2, [pc, #648]	; (8001958 <HAL_RCC_GetSysClockFreq+0x350>)
 80016d0:	4621      	mov	r1, r4
 80016d2:	fba1 1202 	umull	r1, r2, r1, r2
 80016d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80016d8:	460a      	mov	r2, r1
 80016da:	67ba      	str	r2, [r7, #120]	; 0x78
 80016dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80016de:	4413      	add	r3, r2
 80016e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016e6:	2200      	movs	r2, #0
 80016e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80016ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016f4:	f7fe fd86 	bl	8000204 <__aeabi_uldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4613      	mov	r3, r2
 80016fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001702:	e064      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001704:	4b92      	ldr	r3, [pc, #584]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	2200      	movs	r2, #0
 800170c:	653b      	str	r3, [r7, #80]	; 0x50
 800170e:	657a      	str	r2, [r7, #84]	; 0x54
 8001710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001716:	64bb      	str	r3, [r7, #72]	; 0x48
 8001718:	2300      	movs	r3, #0
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800171c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001720:	4622      	mov	r2, r4
 8001722:	462b      	mov	r3, r5
 8001724:	f04f 0000 	mov.w	r0, #0
 8001728:	f04f 0100 	mov.w	r1, #0
 800172c:	0159      	lsls	r1, r3, #5
 800172e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001732:	0150      	lsls	r0, r2, #5
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4621      	mov	r1, r4
 800173a:	1a51      	subs	r1, r2, r1
 800173c:	6139      	str	r1, [r7, #16]
 800173e:	4629      	mov	r1, r5
 8001740:	eb63 0301 	sbc.w	r3, r3, r1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001752:	4659      	mov	r1, fp
 8001754:	018b      	lsls	r3, r1, #6
 8001756:	4651      	mov	r1, sl
 8001758:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800175c:	4651      	mov	r1, sl
 800175e:	018a      	lsls	r2, r1, #6
 8001760:	4651      	mov	r1, sl
 8001762:	ebb2 0801 	subs.w	r8, r2, r1
 8001766:	4659      	mov	r1, fp
 8001768:	eb63 0901 	sbc.w	r9, r3, r1
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001778:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800177c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001780:	4690      	mov	r8, r2
 8001782:	4699      	mov	r9, r3
 8001784:	4623      	mov	r3, r4
 8001786:	eb18 0303 	adds.w	r3, r8, r3
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	462b      	mov	r3, r5
 800178e:	eb49 0303 	adc.w	r3, r9, r3
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017a0:	4629      	mov	r1, r5
 80017a2:	028b      	lsls	r3, r1, #10
 80017a4:	4621      	mov	r1, r4
 80017a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017aa:	4621      	mov	r1, r4
 80017ac:	028a      	lsls	r2, r1, #10
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017b6:	2200      	movs	r2, #0
 80017b8:	643b      	str	r3, [r7, #64]	; 0x40
 80017ba:	647a      	str	r2, [r7, #68]	; 0x44
 80017bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017c0:	f7fe fd20 	bl	8000204 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ce:	4b60      	ldr	r3, [pc, #384]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	3301      	adds	r3, #1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80017e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80017e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017f0:	e0a6      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f2:	4b57      	ldr	r3, [pc, #348]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fe:	4b54      	ldr	r3, [pc, #336]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d02a      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b51      	ldr	r3, [pc, #324]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	2200      	movs	r2, #0
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
 8001814:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001818:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800181c:	2100      	movs	r1, #0
 800181e:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <HAL_RCC_GetSysClockFreq+0x350>)
 8001820:	fb03 f201 	mul.w	r2, r3, r1
 8001824:	2300      	movs	r3, #0
 8001826:	fb00 f303 	mul.w	r3, r0, r3
 800182a:	4413      	add	r3, r2
 800182c:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_RCC_GetSysClockFreq+0x350>)
 800182e:	fba0 1202 	umull	r1, r2, r0, r2
 8001832:	677a      	str	r2, [r7, #116]	; 0x74
 8001834:	460a      	mov	r2, r1
 8001836:	673a      	str	r2, [r7, #112]	; 0x70
 8001838:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800183a:	4413      	add	r3, r2
 800183c:	677b      	str	r3, [r7, #116]	; 0x74
 800183e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001842:	2200      	movs	r2, #0
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
 8001846:	637a      	str	r2, [r7, #52]	; 0x34
 8001848:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800184c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001850:	f7fe fcd8 	bl	8000204 <__aeabi_uldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4613      	mov	r3, r2
 800185a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800185e:	e05b      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001860:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	2200      	movs	r2, #0
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
 800186a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
 8001878:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800187c:	4642      	mov	r2, r8
 800187e:	464b      	mov	r3, r9
 8001880:	f04f 0000 	mov.w	r0, #0
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	0159      	lsls	r1, r3, #5
 800188a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188e:	0150      	lsls	r0, r2, #5
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4641      	mov	r1, r8
 8001896:	ebb2 0a01 	subs.w	sl, r2, r1
 800189a:	4649      	mov	r1, r9
 800189c:	eb63 0b01 	sbc.w	fp, r3, r1
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018b4:	ebb2 040a 	subs.w	r4, r2, sl
 80018b8:	eb63 050b 	sbc.w	r5, r3, fp
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	00eb      	lsls	r3, r5, #3
 80018c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ca:	00e2      	lsls	r2, r4, #3
 80018cc:	4614      	mov	r4, r2
 80018ce:	461d      	mov	r5, r3
 80018d0:	4643      	mov	r3, r8
 80018d2:	18e3      	adds	r3, r4, r3
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	464b      	mov	r3, r9
 80018d8:	eb45 0303 	adc.w	r3, r5, r3
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ea:	4629      	mov	r1, r5
 80018ec:	028b      	lsls	r3, r1, #10
 80018ee:	4621      	mov	r1, r4
 80018f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f4:	4621      	mov	r1, r4
 80018f6:	028a      	lsls	r2, r1, #10
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001900:	2200      	movs	r2, #0
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	61fa      	str	r2, [r7, #28]
 8001906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190a:	f7fe fc7b 	bl	8000204 <__aeabi_uldivmod>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4613      	mov	r3, r2
 8001914:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_RCC_GetSysClockFreq+0x348>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0f1b      	lsrs	r3, r3, #28
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800192a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001936:	e003      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_GetSysClockFreq+0x34c>)
 800193a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800193e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001940:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001944:	4618      	mov	r0, r3
 8001946:	3798      	adds	r7, #152	; 0x98
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	00f42400 	.word	0x00f42400
 8001958:	017d7840 	.word	0x017d7840

0800195c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e28d      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8083 	beq.w	8001a82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800197c:	4b94      	ldr	r3, [pc, #592]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b04      	cmp	r3, #4
 8001986:	d019      	beq.n	80019bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001988:	4b91      	ldr	r3, [pc, #580]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001990:	2b08      	cmp	r3, #8
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001994:	4b8e      	ldr	r3, [pc, #568]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a0:	d00c      	beq.n	80019bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d112      	bne.n	80019d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ae:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ba:	d10b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d05b      	beq.n	8001a80 <HAL_RCC_OscConfig+0x124>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d157      	bne.n	8001a80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e25a      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_OscConfig+0x90>
 80019de:	4b7c      	ldr	r3, [pc, #496]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a7b      	ldr	r2, [pc, #492]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e01d      	b.n	8001a28 <HAL_RCC_OscConfig+0xcc>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0xb4>
 80019f6:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a75      	ldr	r2, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b73      	ldr	r3, [pc, #460]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a72      	ldr	r2, [pc, #456]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xcc>
 8001a10:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a6e      	ldr	r2, [pc, #440]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b6c      	ldr	r3, [pc, #432]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6b      	ldr	r2, [pc, #428]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fa0c 	bl	8000e4c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fa08 	bl	8000e4c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e21f      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b61      	ldr	r3, [pc, #388]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0xdc>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff f9f8 	bl	8000e4c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff f9f4 	bl	8000e4c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e20b      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x104>
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d06f      	beq.n	8001b6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a8e:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d017      	beq.n	8001aca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a9a:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d105      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d11c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x186>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e1d3      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	e03a      	b.n	8001b6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f9a1 	bl	8000e4c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f99d 	bl	8000e4c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1b4      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4925      	ldr	r1, [pc, #148]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f980 	bl	8000e4c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f97c 	bl	8000e4c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e193      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d036      	beq.n	8001be8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d016      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f960 	bl	8000e4c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff f95c 	bl	8000e4c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e173      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x234>
 8001bae:	e01b      	b.n	8001be8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f949 	bl	8000e4c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	e00e      	b.n	8001bdc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f945 	bl	8000e4c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d907      	bls.n	8001bdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e15c      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470000 	.word	0x42470000
 8001bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ea      	bne.n	8001bbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8097 	beq.w	8001d24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b83      	ldr	r3, [pc, #524]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10f      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a7e      	ldr	r2, [pc, #504]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b79      	ldr	r3, [pc, #484]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f905 	bl	8000e4c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7ff f901 	bl	8000e4c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e118      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b6c      	ldr	r3, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x31e>
 8001c6c:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a65      	ldr	r2, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x358>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x340>
 8001c82:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a60      	ldr	r2, [pc, #384]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a5d      	ldr	r2, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x358>
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a59      	ldr	r2, [pc, #356]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a56      	ldr	r2, [pc, #344]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f8c6 	bl	8000e4c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f8c2 	bl	8000e4c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0d7      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	4b4b      	ldr	r3, [pc, #300]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ee      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x368>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f8b0 	bl	8000e4c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f8ac 	bl	8000e4c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0c1      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d06:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ee      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a3a      	ldr	r2, [pc, #232]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80ad 	beq.w	8001e88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2e:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d060      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d145      	bne.n	8001dce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_RCC_OscConfig+0x4b4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff f880 	bl	8000e4c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff f87c 	bl	8000e4c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e093      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	071b      	lsls	r3, r3, #28
 8001d9a:	491b      	ldr	r1, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x4b4>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f851 	bl	8000e4c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff f84d 	bl	8000e4c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e064      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x452>
 8001dcc:	e05c      	b.n	8001e88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_RCC_OscConfig+0x4b4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f83a 	bl	8000e4c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff f836 	bl	8000e4c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e04d      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x480>
 8001dfa:	e045      	b.n	8001e88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e040      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_RCC_OscConfig+0x538>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d030      	beq.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d129      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d122      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d119      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d10f      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e041      	b.n	8001f2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fe54 	bl	8000b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f000 fa28 	bl	800232c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_TIM_PWM_Start+0x24>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	e022      	b.n	8001fa2 <HAL_TIM_PWM_Start+0x6a>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d109      	bne.n	8001f76 <HAL_TIM_PWM_Start+0x3e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e015      	b.n	8001fa2 <HAL_TIM_PWM_Start+0x6a>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d109      	bne.n	8001f90 <HAL_TIM_PWM_Start+0x58>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e008      	b.n	8001fa2 <HAL_TIM_PWM_Start+0x6a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07c      	b.n	80020a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <HAL_TIM_PWM_Start+0x82>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	e013      	b.n	8001fe2 <HAL_TIM_PWM_Start+0xaa>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d104      	bne.n	8001fca <HAL_TIM_PWM_Start+0x92>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc8:	e00b      	b.n	8001fe2 <HAL_TIM_PWM_Start+0xaa>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d104      	bne.n	8001fda <HAL_TIM_PWM_Start+0xa2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	e003      	b.n	8001fe2 <HAL_TIM_PWM_Start+0xaa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fbee 	bl	80027cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	; (80020ac <HAL_TIM_PWM_Start+0x174>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_PWM_Start+0xcc>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <HAL_TIM_PWM_Start+0x178>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_TIM_PWM_Start+0xd0>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_TIM_PWM_Start+0xd2>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_TIM_PWM_Start+0x174>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d01d      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_TIM_PWM_Start+0x17c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d018      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_TIM_PWM_Start+0x180>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_TIM_PWM_Start+0x184>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00e      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_TIM_PWM_Start+0x178>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_TIM_PWM_Start+0x188>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_TIM_PWM_Start+0x18c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d111      	bne.n	8002092 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b06      	cmp	r3, #6
 800207e:	d010      	beq.n	80020a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	e007      	b.n	80020a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010400 	.word	0x40010400
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40014000 	.word	0x40014000
 80020c4:	40001800 	.word	0x40001800

080020c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fb76 	bl	80027cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2e      	ldr	r2, [pc, #184]	; (80021a0 <HAL_TIM_PWM_Stop+0xd8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <HAL_TIM_PWM_Stop+0x2c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <HAL_TIM_PWM_Stop+0xdc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_TIM_PWM_Stop+0x30>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_TIM_PWM_Stop+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d017      	beq.n	800212e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	f241 1311 	movw	r3, #4369	; 0x1111
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <HAL_TIM_PWM_Stop+0x66>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	f240 4344 	movw	r3, #1092	; 0x444
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_TIM_PWM_Stop+0x66>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	f241 1311 	movw	r3, #4369	; 0x1111
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <HAL_TIM_PWM_Stop+0x96>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	f240 4344 	movw	r3, #1092	; 0x444
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_TIM_PWM_Stop+0x96>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <HAL_TIM_PWM_Stop+0xa6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800216c:	e013      	b.n	8002196 <HAL_TIM_PWM_Stop+0xce>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d104      	bne.n	800217e <HAL_TIM_PWM_Stop+0xb6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800217c:	e00b      	b.n	8002196 <HAL_TIM_PWM_Stop+0xce>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d104      	bne.n	800218e <HAL_TIM_PWM_Stop+0xc6>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800218c:	e003      	b.n	8002196 <HAL_TIM_PWM_Stop+0xce>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0ae      	b.n	8002324 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	f200 809f 	bhi.w	8002314 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	08002211 	.word	0x08002211
 80021e0:	08002315 	.word	0x08002315
 80021e4:	08002315 	.word	0x08002315
 80021e8:	08002315 	.word	0x08002315
 80021ec:	08002251 	.word	0x08002251
 80021f0:	08002315 	.word	0x08002315
 80021f4:	08002315 	.word	0x08002315
 80021f8:	08002315 	.word	0x08002315
 80021fc:	08002293 	.word	0x08002293
 8002200:	08002315 	.word	0x08002315
 8002204:	08002315 	.word	0x08002315
 8002208:	08002315 	.word	0x08002315
 800220c:	080022d3 	.word	0x080022d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f928 	bl	800246c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0208 	orr.w	r2, r2, #8
 800222a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0204 	bic.w	r2, r2, #4
 800223a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6999      	ldr	r1, [r3, #24]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	619a      	str	r2, [r3, #24]
      break;
 800224e:	e064      	b.n	800231a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f978 	bl	800254c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6999      	ldr	r1, [r3, #24]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	021a      	lsls	r2, r3, #8
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	619a      	str	r2, [r3, #24]
      break;
 8002290:	e043      	b.n	800231a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f9cd 	bl	8002638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0208 	orr.w	r2, r2, #8
 80022ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0204 	bic.w	r2, r2, #4
 80022bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69d9      	ldr	r1, [r3, #28]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	61da      	str	r2, [r3, #28]
      break;
 80022d0:	e023      	b.n	800231a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fa21 	bl	8002720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69d9      	ldr	r1, [r3, #28]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	021a      	lsls	r2, r3, #8
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	61da      	str	r2, [r3, #28]
      break;
 8002312:	e002      	b.n	800231a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	75fb      	strb	r3, [r7, #23]
      break;
 8002318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002322:	7dfb      	ldrb	r3, [r7, #23]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d00f      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3d      	ldr	r2, [pc, #244]	; (8002444 <TIM_Base_SetConfig+0x118>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00b      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3c      	ldr	r2, [pc, #240]	; (8002448 <TIM_Base_SetConfig+0x11c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d007      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3b      	ldr	r2, [pc, #236]	; (800244c <TIM_Base_SetConfig+0x120>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d003      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3a      	ldr	r2, [pc, #232]	; (8002450 <TIM_Base_SetConfig+0x124>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d108      	bne.n	800237e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238c:	d027      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <TIM_Base_SetConfig+0x118>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d023      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <TIM_Base_SetConfig+0x11c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2a      	ldr	r2, [pc, #168]	; (800244c <TIM_Base_SetConfig+0x120>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01b      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <TIM_Base_SetConfig+0x124>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d017      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <TIM_Base_SetConfig+0x128>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <TIM_Base_SetConfig+0x12c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00f      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a26      	ldr	r2, [pc, #152]	; (800245c <TIM_Base_SetConfig+0x130>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00b      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a25      	ldr	r2, [pc, #148]	; (8002460 <TIM_Base_SetConfig+0x134>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a24      	ldr	r2, [pc, #144]	; (8002464 <TIM_Base_SetConfig+0x138>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a23      	ldr	r2, [pc, #140]	; (8002468 <TIM_Base_SetConfig+0x13c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d108      	bne.n	80023f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <TIM_Base_SetConfig+0xf8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <TIM_Base_SetConfig+0x124>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	615a      	str	r2, [r3, #20]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40010000 	.word	0x40010000
 8002444:	40000400 	.word	0x40000400
 8002448:	40000800 	.word	0x40000800
 800244c:	40000c00 	.word	0x40000c00
 8002450:	40010400 	.word	0x40010400
 8002454:	40014000 	.word	0x40014000
 8002458:	40014400 	.word	0x40014400
 800245c:	40014800 	.word	0x40014800
 8002460:	40001800 	.word	0x40001800
 8002464:	40001c00 	.word	0x40001c00
 8002468:	40002000 	.word	0x40002000

0800246c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	f023 0201 	bic.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f023 0302 	bic.w	r3, r3, #2
 80024b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a20      	ldr	r2, [pc, #128]	; (8002544 <TIM_OC1_SetConfig+0xd8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d003      	beq.n	80024d0 <TIM_OC1_SetConfig+0x64>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <TIM_OC1_SetConfig+0xdc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d10c      	bne.n	80024ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f023 0308 	bic.w	r3, r3, #8
 80024d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a15      	ldr	r2, [pc, #84]	; (8002544 <TIM_OC1_SetConfig+0xd8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_OC1_SetConfig+0x8e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <TIM_OC1_SetConfig+0xdc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d111      	bne.n	800251e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40010000 	.word	0x40010000
 8002548:	40010400 	.word	0x40010400

0800254c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f023 0210 	bic.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f023 0320 	bic.w	r3, r3, #32
 8002596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <TIM_OC2_SetConfig+0xe4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <TIM_OC2_SetConfig+0x68>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a21      	ldr	r2, [pc, #132]	; (8002634 <TIM_OC2_SetConfig+0xe8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10d      	bne.n	80025d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <TIM_OC2_SetConfig+0xe4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d003      	beq.n	80025e0 <TIM_OC2_SetConfig+0x94>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a16      	ldr	r2, [pc, #88]	; (8002634 <TIM_OC2_SetConfig+0xe8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d113      	bne.n	8002608 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	621a      	str	r2, [r3, #32]
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40010000 	.word	0x40010000
 8002634:	40010400 	.word	0x40010400

08002638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a21      	ldr	r2, [pc, #132]	; (8002718 <TIM_OC3_SetConfig+0xe0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d003      	beq.n	800269e <TIM_OC3_SetConfig+0x66>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a20      	ldr	r2, [pc, #128]	; (800271c <TIM_OC3_SetConfig+0xe4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10d      	bne.n	80026ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a16      	ldr	r2, [pc, #88]	; (8002718 <TIM_OC3_SetConfig+0xe0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d003      	beq.n	80026ca <TIM_OC3_SetConfig+0x92>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a15      	ldr	r2, [pc, #84]	; (800271c <TIM_OC3_SetConfig+0xe4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d113      	bne.n	80026f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	621a      	str	r2, [r3, #32]
}
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40010000 	.word	0x40010000
 800271c:	40010400 	.word	0x40010400

08002720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800276a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	031b      	lsls	r3, r3, #12
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <TIM_OC4_SetConfig+0xa4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d003      	beq.n	8002788 <TIM_OC4_SetConfig+0x68>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <TIM_OC4_SetConfig+0xa8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d109      	bne.n	800279c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800278e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	019b      	lsls	r3, r3, #6
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	621a      	str	r2, [r3, #32]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40010000 	.word	0x40010000
 80027c8:	40010400 	.word	0x40010400

080027cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2201      	movs	r2, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	431a      	orrs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	621a      	str	r2, [r3, #32]
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800282c:	2302      	movs	r3, #2
 800282e:	e05a      	b.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d01d      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d018      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a18      	ldr	r2, [pc, #96]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d009      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a17      	ldr	r2, [pc, #92]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40010000 	.word	0x40010000
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40000c00 	.word	0x40000c00
 8002904:	40010400 	.word	0x40010400
 8002908:	40014000 	.word	0x40014000
 800290c:	40001800 	.word	0x40001800

08002910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e03f      	b.n	80029a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe f974 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	; 0x24
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f829 	bl	80029ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b0:	b0c0      	sub	sp, #256	; 0x100
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	68d9      	ldr	r1, [r3, #12]
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	ea40 0301 	orr.w	r3, r0, r1
 80029d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a04:	f021 010c 	bic.w	r1, r1, #12
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a12:	430b      	orrs	r3, r1
 8002a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a26:	6999      	ldr	r1, [r3, #24]
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	ea40 0301 	orr.w	r3, r0, r1
 8002a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b8f      	ldr	r3, [pc, #572]	; (8002c78 <UART_SetConfig+0x2cc>)
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d005      	beq.n	8002a4c <UART_SetConfig+0xa0>
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b8d      	ldr	r3, [pc, #564]	; (8002c7c <UART_SetConfig+0x2d0>)
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d104      	bne.n	8002a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a4c:	f7fe fdc8 	bl	80015e0 <HAL_RCC_GetPCLK2Freq>
 8002a50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a54:	e003      	b.n	8002a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a56:	f7fe fdaf 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 8002a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a68:	f040 810c 	bne.w	8002c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a7e:	4622      	mov	r2, r4
 8002a80:	462b      	mov	r3, r5
 8002a82:	1891      	adds	r1, r2, r2
 8002a84:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a86:	415b      	adcs	r3, r3
 8002a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a8e:	4621      	mov	r1, r4
 8002a90:	eb12 0801 	adds.w	r8, r2, r1
 8002a94:	4629      	mov	r1, r5
 8002a96:	eb43 0901 	adc.w	r9, r3, r1
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aae:	4690      	mov	r8, r2
 8002ab0:	4699      	mov	r9, r3
 8002ab2:	4623      	mov	r3, r4
 8002ab4:	eb18 0303 	adds.w	r3, r8, r3
 8002ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002abc:	462b      	mov	r3, r5
 8002abe:	eb49 0303 	adc.w	r3, r9, r3
 8002ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ada:	460b      	mov	r3, r1
 8002adc:	18db      	adds	r3, r3, r3
 8002ade:	653b      	str	r3, [r7, #80]	; 0x50
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	eb42 0303 	adc.w	r3, r2, r3
 8002ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002af0:	f7fd fb88 	bl	8000204 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <UART_SetConfig+0x2d4>)
 8002afa:	fba3 2302 	umull	r2, r3, r3, r2
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	011c      	lsls	r4, r3, #4
 8002b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b14:	4642      	mov	r2, r8
 8002b16:	464b      	mov	r3, r9
 8002b18:	1891      	adds	r1, r2, r2
 8002b1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b1c:	415b      	adcs	r3, r3
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b24:	4641      	mov	r1, r8
 8002b26:	eb12 0a01 	adds.w	sl, r2, r1
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b44:	4692      	mov	sl, r2
 8002b46:	469b      	mov	fp, r3
 8002b48:	4643      	mov	r3, r8
 8002b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b52:	464b      	mov	r3, r9
 8002b54:	eb4b 0303 	adc.w	r3, fp, r3
 8002b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b70:	460b      	mov	r3, r1
 8002b72:	18db      	adds	r3, r3, r3
 8002b74:	643b      	str	r3, [r7, #64]	; 0x40
 8002b76:	4613      	mov	r3, r2
 8002b78:	eb42 0303 	adc.w	r3, r2, r3
 8002b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b86:	f7fd fb3d 	bl	8000204 <__aeabi_uldivmod>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <UART_SetConfig+0x2d4>)
 8002b92:	fba3 2301 	umull	r2, r3, r3, r1
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2264      	movs	r2, #100	; 0x64
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	1acb      	subs	r3, r1, r3
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <UART_SetConfig+0x2d4>)
 8002ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bb4:	441c      	add	r4, r3
 8002bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bc8:	4642      	mov	r2, r8
 8002bca:	464b      	mov	r3, r9
 8002bcc:	1891      	adds	r1, r2, r2
 8002bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bd0:	415b      	adcs	r3, r3
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bd8:	4641      	mov	r1, r8
 8002bda:	1851      	adds	r1, r2, r1
 8002bdc:	6339      	str	r1, [r7, #48]	; 0x30
 8002bde:	4649      	mov	r1, r9
 8002be0:	414b      	adcs	r3, r1
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bf0:	4659      	mov	r1, fp
 8002bf2:	00cb      	lsls	r3, r1, #3
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bfa:	4651      	mov	r1, sl
 8002bfc:	00ca      	lsls	r2, r1, #3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	4642      	mov	r2, r8
 8002c06:	189b      	adds	r3, r3, r2
 8002c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	460a      	mov	r2, r1
 8002c10:	eb42 0303 	adc.w	r3, r2, r3
 8002c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	18db      	adds	r3, r3, r3
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c32:	4613      	mov	r3, r2
 8002c34:	eb42 0303 	adc.w	r3, r2, r3
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c42:	f7fd fadf 	bl	8000204 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <UART_SetConfig+0x2d4>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	2164      	movs	r1, #100	; 0x64
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	3332      	adds	r3, #50	; 0x32
 8002c5e:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <UART_SetConfig+0x2d4>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	f003 0207 	and.w	r2, r3, #7
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4422      	add	r2, r4
 8002c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c74:	e106      	b.n	8002e84 <UART_SetConfig+0x4d8>
 8002c76:	bf00      	nop
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	40011400 	.word	0x40011400
 8002c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c96:	4642      	mov	r2, r8
 8002c98:	464b      	mov	r3, r9
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	6239      	str	r1, [r7, #32]
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	1854      	adds	r4, r2, r1
 8002caa:	4649      	mov	r1, r9
 8002cac:	eb43 0501 	adc.w	r5, r3, r1
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	00eb      	lsls	r3, r5, #3
 8002cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cbe:	00e2      	lsls	r2, r4, #3
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	461d      	mov	r5, r3
 8002cc4:	4643      	mov	r3, r8
 8002cc6:	18e3      	adds	r3, r4, r3
 8002cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ccc:	464b      	mov	r3, r9
 8002cce:	eb45 0303 	adc.w	r3, r5, r3
 8002cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	008b      	lsls	r3, r1, #2
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	008a      	lsls	r2, r1, #2
 8002d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d04:	f7fd fa7e 	bl	8000204 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <UART_SetConfig+0x4e4>)
 8002d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	011c      	lsls	r4, r3, #4
 8002d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d28:	4642      	mov	r2, r8
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	1891      	adds	r1, r2, r2
 8002d2e:	61b9      	str	r1, [r7, #24]
 8002d30:	415b      	adcs	r3, r3
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d38:	4641      	mov	r1, r8
 8002d3a:	1851      	adds	r1, r2, r1
 8002d3c:	6139      	str	r1, [r7, #16]
 8002d3e:	4649      	mov	r1, r9
 8002d40:	414b      	adcs	r3, r1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d50:	4659      	mov	r1, fp
 8002d52:	00cb      	lsls	r3, r1, #3
 8002d54:	4651      	mov	r1, sl
 8002d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	00ca      	lsls	r2, r1, #3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	4642      	mov	r2, r8
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d6c:	464b      	mov	r3, r9
 8002d6e:	460a      	mov	r2, r1
 8002d70:	eb42 0303 	adc.w	r3, r2, r3
 8002d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d90:	4649      	mov	r1, r9
 8002d92:	008b      	lsls	r3, r1, #2
 8002d94:	4641      	mov	r1, r8
 8002d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	008a      	lsls	r2, r1, #2
 8002d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002da2:	f7fd fa2f 	bl	8000204 <__aeabi_uldivmod>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <UART_SetConfig+0x4e4>)
 8002dae:	fba3 2301 	umull	r2, r3, r3, r1
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2264      	movs	r2, #100	; 0x64
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	1acb      	subs	r3, r1, r3
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	3332      	adds	r3, #50	; 0x32
 8002dc0:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <UART_SetConfig+0x4e4>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dcc:	441c      	add	r4, r3
 8002dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	673b      	str	r3, [r7, #112]	; 0x70
 8002dd6:	677a      	str	r2, [r7, #116]	; 0x74
 8002dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ddc:	4642      	mov	r2, r8
 8002dde:	464b      	mov	r3, r9
 8002de0:	1891      	adds	r1, r2, r2
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	415b      	adcs	r3, r3
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dec:	4641      	mov	r1, r8
 8002dee:	1851      	adds	r1, r2, r1
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	4649      	mov	r1, r9
 8002df4:	414b      	adcs	r3, r1
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e04:	4659      	mov	r1, fp
 8002e06:	00cb      	lsls	r3, r1, #3
 8002e08:	4651      	mov	r1, sl
 8002e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e0e:	4651      	mov	r1, sl
 8002e10:	00ca      	lsls	r2, r1, #3
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	4642      	mov	r2, r8
 8002e1a:	189b      	adds	r3, r3, r2
 8002e1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e1e:	464b      	mov	r3, r9
 8002e20:	460a      	mov	r2, r1
 8002e22:	eb42 0303 	adc.w	r3, r2, r3
 8002e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
 8002e32:	667a      	str	r2, [r7, #100]	; 0x64
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e40:	4649      	mov	r1, r9
 8002e42:	008b      	lsls	r3, r1, #2
 8002e44:	4641      	mov	r1, r8
 8002e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e4a:	4641      	mov	r1, r8
 8002e4c:	008a      	lsls	r2, r1, #2
 8002e4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e52:	f7fd f9d7 	bl	8000204 <__aeabi_uldivmod>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <UART_SetConfig+0x4e4>)
 8002e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	2164      	movs	r1, #100	; 0x64
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	3332      	adds	r3, #50	; 0x32
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <UART_SetConfig+0x4e4>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	f003 020f 	and.w	r2, r3, #15
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4422      	add	r2, r4
 8002e82:	609a      	str	r2, [r3, #8]
}
 8002e84:	bf00      	nop
 8002e86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e90:	51eb851f 	.word	0x51eb851f

08002e94 <memset>:
 8002e94:	4402      	add	r2, r0
 8002e96:	4603      	mov	r3, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	4d0d      	ldr	r5, [pc, #52]	; (8002edc <__libc_init_array+0x38>)
 8002ea8:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	2600      	movs	r6, #0
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	4d0b      	ldr	r5, [pc, #44]	; (8002ee4 <__libc_init_array+0x40>)
 8002eb6:	4c0c      	ldr	r4, [pc, #48]	; (8002ee8 <__libc_init_array+0x44>)
 8002eb8:	f000 f826 	bl	8002f08 <_init>
 8002ebc:	1b64      	subs	r4, r4, r5
 8002ebe:	10a4      	asrs	r4, r4, #2
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08002f40 	.word	0x08002f40
 8002ee0:	08002f40 	.word	0x08002f40
 8002ee4:	08002f40 	.word	0x08002f40
 8002ee8:	08002f44 	.word	0x08002f44

08002eec <memcpy>:
 8002eec:	440a      	add	r2, r1
 8002eee:	4291      	cmp	r1, r2
 8002ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ef4:	d100      	bne.n	8002ef8 <memcpy+0xc>
 8002ef6:	4770      	bx	lr
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f02:	4291      	cmp	r1, r2
 8002f04:	d1f9      	bne.n	8002efa <memcpy+0xe>
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
